{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/{network}/data/validator/stakes": {
      "get": {
        "operationId": "data-validator-stakes",
        "summary": "Get Validator Stake",
        "description": "Get a list of validator stakes.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Network:</p><ul><li>`solana` — Solana mainnet.</li><li>`ethereum` — Ethereum mainnet.</li><li>`polkadot` — Polkadot mainnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "solana",
                "ethereum",
                "polkadot"
              ]
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "The quantity of resources within a single response page.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "The quantity of resources to exclude from a response page.",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          },
          {
            "name": "startAt",
            "required": true,
            "in": "query",
            "description": "Transaction start timestamp in the ISO 8601 format.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": true,
            "in": "query",
            "description": "Transaction finish timestamp in the ISO 8601 format.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "validatorAddress",
            "required": true,
            "in": "query",
            "description": "Validator address in the required network.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorStakesResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidValidatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "InvalidValidatorAddressException": {
                    "value": {
                      "code": 100101,
                      "message": "Validator address is not valid for the specified network",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorStakesException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorStakesException": {
                    "value": {
                      "code": 100173,
                      "message": "Get validator stakes failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator Data"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/validator/rewards": {
      "get": {
        "operationId": "data-validator-rewards",
        "summary": "Get Validator Rewards",
        "description": "Method to retrieve validator rewards.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string",
              "enum": [
                "solana",
                "ethereum",
                "polkadot"
              ]
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "The number of resources that a single response page contains",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "The number of resources to exclude from a response",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          },
          {
            "name": "startAt",
            "required": true,
            "in": "query",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": true,
            "in": "query",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "validatorAddress",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorStakesResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidValidatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "InvalidValidatorAddressException": {
                    "value": {
                      "code": 100101,
                      "message": "Validator address is not valid for the specified network",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorRewardsException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorRewardsException": {
                    "value": {
                      "code": 100174,
                      "message": "Get validator rewards failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator Data"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/validator/apy": {
      "get": {
        "operationId": "data-validator-apy",
        "summary": "Get Validator APY",
        "description": "Method to retrieve validator Annual Percentage Yield (APY).",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string",
              "enum": [
                "solana",
                "ethereum",
                "polkadot"
              ]
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "The number of resources that a single response page contains",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "The number of resources to exclude from a response",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          },
          {
            "name": "startAt",
            "required": true,
            "in": "query",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": true,
            "in": "query",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "validatorAddress",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorAPYResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidValidatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "InvalidValidatorAddressException": {
                    "value": {
                      "code": 100101,
                      "message": "Validator address is not valid for the specified network",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorApyException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorApyException": {
                    "value": {
                      "code": 100175,
                      "message": "Get validator apy failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator Data"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/validator/fee": {
      "get": {
        "operationId": "data-validator-fee",
        "summary": "Get Validator Fee",
        "description": "Method to retrieve validator fee.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string",
              "enum": [
                "solana",
                "ethereum",
                "polkadot"
              ]
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "The number of resources that a single response page contains",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "The number of resources to exclude from a response",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          },
          {
            "name": "startAt",
            "required": true,
            "in": "query",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": true,
            "in": "query",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "validatorAddress",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorFeeResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidValidatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "InvalidValidatorAddressException": {
                    "value": {
                      "code": 100101,
                      "message": "Validator address is not valid for the specified network",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorFeeException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorFeeException": {
                    "value": {
                      "code": 100176,
                      "message": "Get validator fee failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator Data"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/validator/status": {
      "post": {
        "operationId": "eth-validator-status",
        "summary": "Validator Status Check",
        "description": "Check the status of the validators.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatorsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/ValidatorsResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "code": 100119,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/tx/deposit": {
      "post": {
        "operationId": "eth-staking-deposit",
        "summary": "Prepare Stake Transaction",
        "description": "Construct serialized transaction to deposit the stake amount, utilizing the functionalities of P2P smart contract.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StakeEthereumRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Web3CreateTransactionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Web3CreateTransactionException": {
                    "value": {
                      "code": 100144,
                      "message": "Could not create transaction",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 100119,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/tx/withdrawal": {
      "post": {
        "operationId": "eth-staking-withdrawal",
        "summary": "Prepare Withdrawal Transaction",
        "description": "Construct serialized transaction to initiate the withdrawal process for active validators, utilizing the functionalities of P2P smart contract.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnstakeEthereumRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidDepositDataSignException"
                        },
                        {
                          "$ref": "#/components/schemas/PubkeyDoNotExistsException"
                        },
                        {
                          "$ref": "#/components/schemas/ValidatorNotActiveException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "InvalidDepositDataSignException": {
                    "value": {
                      "code": 100153,
                      "message": "Invalid deposit-data signature",
                      "type": "client"
                    }
                  },
                  "PubkeyDoNotExistsException": {
                    "value": {
                      "code": 100145,
                      "message": "Unauthorized to request withdrawal transaction for validator public key",
                      "type": "client"
                    }
                  },
                  "ValidatorNotActiveException": {
                    "value": {
                      "code": 100146,
                      "message": "Error creating withdrawal transaction because one or more validators are not in active state",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Web3CreateTransactionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/WithdrawalTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Web3CreateTransactionException": {
                    "value": {
                      "code": 100144,
                      "message": "Could not create transaction",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 100119,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  },
                  "WithdrawalTransactionException": {
                    "value": {
                      "code": 100147,
                      "message": "Could not create withdrawal transaction",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/nodes-request/create": {
      "post": {
        "operationId": "eth-nodes-request-create",
        "summary": "Create Staking Request",
        "description": "Set up nodes for staking using P2P infrastructure.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNodesRequestRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NodesRequestIdAlreadyExistException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NodesRequestIdAlreadyExistException": {
                    "value": {
                      "code": 100161,
                      "message": "Nodes request id already exists",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestCreateException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NodesRequestCreateException": {
                    "value": {
                      "code": 100156,
                      "message": "Error creating nodes request",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 100119,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/nodes-request/status/{id}": {
      "get": {
        "operationId": "eth-nodes-request-status",
        "summary": "Check Status Request",
        "description": "Check the status of the node set-up operation.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "The nodes request ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NodesRequestNotFoundException": {
                    "value": {
                      "code": 100154,
                      "message": "Nodes request not found",
                      "type": "not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestGetException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NodesRequestGetException": {
                    "value": {
                      "code": 100157,
                      "message": "Error getting nodes request",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 100119,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/nodes-request": {
      "get": {
        "operationId": "eth-nodes-request-list",
        "summary": "Check All Status Requests",
        "description": "Check the status of all the node set-up operations created through the authorization token",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "The number of resources that a single response page contains",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "The number of resources to exclude from a response",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetListNodesRequestResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestGetListException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NodesRequestGetListException": {
                    "value": {
                      "code": 100160,
                      "message": "Error getting nodes requests list",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 100119,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/options/relays-sets": {
      "get": {
        "operationId": "eth-nodes-request-relays-sets",
        "summary": "Check All Status Requests",
        "description": "Check the status of all the node set-up operations created through the authorization token",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetRelaysSetsRequestResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetRelaysSetsException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetRelaysSetsException": {
                    "value": {
                      "code": 100165,
                      "message": "Error getting relays sets",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 100119,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/tx/status/{blockHash}/{transactionHash}": {
      "get": {
        "operationId": "polkadot-transaction-status",
        "summary": "Status of the transaction",
        "description": "Check the status of the transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          },
          {
            "name": "blockHash",
            "required": true,
            "in": "path",
            "description": "The hash of the checkpoint block.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionHash",
            "required": true,
            "in": "path",
            "description": "Extrinsic transaction hash.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/SignTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100177,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TransactionNotFoundException": {
                    "value": {
                      "code": 100191,
                      "message": "Bond not found",
                      "type": "not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/StatusException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "StatusException": {
                    "value": {
                      "code": 100204,
                      "message": "Unable to get transaction status",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 100119,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/tx/send": {
      "post": {
        "operationId": "polkadot-transaction-send",
        "summary": "Broadcast transaction",
        "description": "Broadcast transaction to the Polkadot network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/SignTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100177,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SendException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionRetractedException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionUsurpedException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionFinalityTimeoutException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionDroppedException"
                        },
                        {
                          "$ref": "#/components/schemas/ExtrinsicCouldNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/CouldNotGetStateException"
                        },
                        {
                          "$ref": "#/components/schemas/ExtrinsicCouldNotSendException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SendException": {
                    "value": {
                      "code": 100205,
                      "message": "Unable to send transaction",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 100119,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  },
                  "TransactionRetractedException": {
                    "value": {
                      "code": 100194,
                      "message": "Transaction was retracted",
                      "type": "server"
                    }
                  },
                  "TransactionInvalidException": {
                    "value": {
                      "code": 100195,
                      "message": "Transaction is invalid",
                      "type": "server"
                    }
                  },
                  "TransactionUsurpedException": {
                    "value": {
                      "code": 100196,
                      "message": "Transaction was usurped",
                      "type": "server"
                    }
                  },
                  "TransactionFinalityTimeoutException": {
                    "value": {
                      "code": 100197,
                      "message": "Transaction was finality timeouted",
                      "type": "server"
                    }
                  },
                  "TransactionDroppedException": {
                    "value": {
                      "code": 100198,
                      "message": "Transaction was dropped",
                      "type": "server"
                    }
                  },
                  "ExtrinsicCouldNotFoundException": {
                    "value": {
                      "code": 100194,
                      "message": "Transaction was retracted",
                      "type": "server"
                    }
                  },
                  "CouldNotGetStateException": {
                    "value": {
                      "code": 100200,
                      "message": "Could not get transaction state",
                      "type": "server"
                    }
                  },
                  "ExtrinsicCouldNotSendException": {
                    "value": {
                      "code": 100201,
                      "message": "Extrinsic cannot be sent",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/account/add": {
      "post": {
        "operationId": "polkadot-account-add",
        "summary": "Add staking proxy account",
        "description": "Adding a staking proxy account allows users to utilize an account less frequently while maintaining active participation in the Polkadot network based on the weight of tokens held within that account.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "code": 100184,
                      "message": "Polkadot address (undefined) is invalid",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100177,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/AddException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "AddException": {
                    "value": {
                      "code": 100202,
                      "message": "Unable to add proxy",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 100119,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "code": 100185,
                      "message": "Insufficient balance",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/account/remove": {
      "post": {
        "operationId": "polkadot-account-remove",
        "summary": "Remove staking proxy account",
        "description": "Removing a proxy account involves discontinuing the delegation of staking responsibilities from one account to another. This action allows users to regain direct control over their staking activities and tokens in the Polkadot network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/ProxyNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "code": 100184,
                      "message": "Polkadot address (undefined) is invalid",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100177,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  },
                  "ProxyNotFoundException": {
                    "value": {
                      "code": 100190,
                      "message": "Proxy not found",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/RemoveException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "RemoveException": {
                    "value": {
                      "code": 100203,
                      "message": "Unable to remove proxy",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 100119,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/bond": {
      "post": {
        "operationId": "polkadot-staking-bond",
        "summary": "Submit bond",
        "description": "Submitting a bond to the Polkadot network in exchange for some other benefit.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BondRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PolkadotUnsignedBondTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "code": 100184,
                      "message": "Polkadot address (undefined) is invalid",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100177,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/BondException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        },
                        {
                          "$ref": "#/components/schemas/StakeAmountTooSmallException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "BondException": {
                    "value": {
                      "code": 100206,
                      "message": "Unable to request bond",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 100119,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "code": 100185,
                      "message": "Insufficient balance",
                      "type": "server"
                    }
                  },
                  "StakeAmountTooSmallException": {
                    "value": {
                      "code": 100189,
                      "message": "Stake amount too small",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/bond-extra": {
      "post": {
        "operationId": "polkadot-staking-bondExtra",
        "summary": "Submit extra bond",
        "description": "Submitting an extra bond to the Polkadot network in exchange for some other benefit.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BondExtraRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PolkadotUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "code": 100184,
                      "message": "Polkadot address (undefined) is invalid",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100177,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/BondExtraException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "BondExtraException": {
                    "value": {
                      "code": 100207,
                      "message": "Unable to request bond extra",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 100119,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "code": 100185,
                      "message": "Insufficient balance",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/rebond": {
      "post": {
        "operationId": "polkadot-staking-rebond",
        "summary": "Submit rebond",
        "description": "Rebonding tokens within the Polkadot network involves the process of re-staking or redelegating tokens that were previously withdrawn from the staking mechanism.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RebondRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PolkadotUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "code": 100184,
                      "message": "Polkadot address (undefined) is invalid",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100177,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/RebondException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/LedgerNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/BondNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongControllerException"
                        },
                        {
                          "$ref": "#/components/schemas/NotEnoughPendingAmountException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "RebondException": {
                    "value": {
                      "code": 100209,
                      "message": "Unable to request rebond",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 100119,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  },
                  "LedgerNotFoundException": {
                    "value": {
                      "code": 100187,
                      "message": "Ledger not found",
                      "type": "server"
                    }
                  },
                  "BondNotFoundException": {
                    "value": {
                      "code": 100186,
                      "message": "Bond not found",
                      "type": "server"
                    }
                  },
                  "WrongControllerException": {
                    "value": {
                      "code": 100188,
                      "message": "Wrong controller",
                      "type": "server"
                    }
                  },
                  "NotEnoughPendingAmountException": {
                    "value": {
                      "code": 100192,
                      "message": "Not enough pending amount",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/nominate": {
      "post": {
        "operationId": "polkadot-staking-nominate",
        "summary": "Submit nomination",
        "description": "Submitting nomination is the action of choosing validators within the Polkadot network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NominateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/NominateTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "code": 100184,
                      "message": "Polkadot address (undefined) is invalid",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100177,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NominateException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NominateException": {
                    "value": {
                      "code": 100208,
                      "message": "Unable to request nominate",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 100119,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/unbond": {
      "post": {
        "operationId": "polkadot-staking-unbond",
        "summary": "Submit unbound",
        "description": "Unbonding tokens within the Polkadot network refers to the process of withdrawing or releasing tokens that were previously staked or bonded.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnbondRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PolkadotUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "code": 100184,
                      "message": "Polkadot address (undefined) is invalid",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100177,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/UnbondException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/NotEnoughBonedAmountException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "UnbondException": {
                    "value": {
                      "code": 100210,
                      "message": "Unable to request unbond",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 100119,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  },
                  "NotEnoughBonedAmountException": {
                    "value": {
                      "code": 100193,
                      "message": "Not enough bonded amount",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/withdraw-unbonded": {
      "post": {
        "operationId": "polkadot-staking-withdrawUnbonded",
        "summary": "Withdraw Unbonded",
        "description": "Withdrawing tokens within the Polkadot network that were previously unbonded.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawUnbondedRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/WithdrawalTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "code": 100184,
                      "message": "Polkadot address (undefined) is invalid",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100177,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 100120,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 100118,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/WithdrawUnbondedException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/BondNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongControllerException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "WithdrawUnbondedException": {
                    "value": {
                      "code": 100211,
                      "message": "Unable to withdraw unbonded",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 100119,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  },
                  "BondNotFoundException": {
                    "value": {
                      "code": 100186,
                      "message": "Bond not found",
                      "type": "server"
                    }
                  },
                  "WrongControllerException": {
                    "value": {
                      "code": 100188,
                      "message": "Wrong controller",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/tx/send": {
      "post": {
        "operationId": "solana-staking-send",
        "summary": "Solana send transaction ",
        "description": "Send signed transaction",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Solana network",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet-beta",
                "testnet"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/SendResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana (beta)"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/account/staking": {
      "get": {
        "operationId": "solana-staking-get-staking-account",
        "summary": "Solana get staking account",
        "description": "Get staking account",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Solana network",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet-beta",
                "testnet"
              ]
            }
          },
          {
            "name": "stakeAuthority",
            "required": true,
            "in": "query",
            "description": "Stake authority",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withdrawAuthority",
            "required": true,
            "in": "query",
            "description": "Withdraw authority",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakingResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana (beta)"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/staking/stake": {
      "post": {
        "operationId": "solana-staking-stake",
        "summary": "Solana create stake",
        "description": "Create stake transaction",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Solana network",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet-beta",
                "testnet"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StakeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakeResult"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana (beta)"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/staking/unstake": {
      "post": {
        "operationId": "solana-staking-unstake",
        "summary": "Solana create unstake ",
        "description": "Create unstake transaction",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Solana network",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet-beta",
                "testnet"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnstakeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UnstakeResult"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana (beta)"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/staking/withdraw": {
      "post": {
        "operationId": "solana-staking-withdraw",
        "summary": "Solana create withdraw ",
        "description": "Create withdraw transaction",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Solana network",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet-beta",
                "testnet"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UnstakeResult"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana (beta)"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Staking API",
    "description": "API used for staking",
    "version": "1.0.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "https://api.p2p.org",
      "description": "Staking API"
    },
    {
      "url": "https://api-test.p2p.org",
      "description": "Testnet Staking API"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "ExceptionResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object"
          },
          "result": {
            "type": "object",
            "nullable": true,
            "default": null
          }
        },
        "required": [
          "error",
          "result"
        ]
      },
      "NoTokenException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100120
          },
          "message": {
            "type": "string",
            "default": "No token"
          },
          "name": {
            "type": "string",
            "default": "NoTokenException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "WrongTokenException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100118
          },
          "message": {
            "type": "string",
            "default": "Wrong token"
          },
          "name": {
            "type": "string",
            "default": "WrongTokenException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidationErrorResponse": {
        "type": "object",
        "properties": {
          "property": {
            "type": "string"
          },
          "constraints": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "property",
          "constraints"
        ]
      },
      "ValidationException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100101
          },
          "message": {
            "type": "string",
            "default": "Validation error"
          },
          "name": {
            "type": "string",
            "default": "ValidationException"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationErrorResponse"
            }
          }
        },
        "required": [
          "code",
          "message",
          "name",
          "errors"
        ]
      },
      "InvalidValidatorAddressException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100171
          },
          "message": {
            "type": "string",
            "default": "Validator address is not valid for the specified network"
          },
          "name": {
            "type": "string",
            "default": "InvalidValidatorAddressException"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationErrorResponse"
            }
          }
        },
        "required": [
          "code",
          "message",
          "name",
          "errors"
        ]
      },
      "NetworkIsNotIncludedInListException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100177
          },
          "message": {
            "type": "string",
            "default": "Network is not included in list ([ 'mainnet', 'kusama', 'westend' ])"
          },
          "name": {
            "type": "string",
            "default": "NetworkIsNotIncludedInListException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetValidatorStakesException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100173
          },
          "message": {
            "type": "string",
            "default": "Get validator stakes failed"
          },
          "name": {
            "type": "string",
            "default": "GetValidatorStakesException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "nullable": true,
            "default": null
          },
          "result": {
            "type": "object"
          }
        },
        "required": [
          "error",
          "result"
        ]
      },
      "ValidatorStake": {
        "type": "object",
        "properties": {
          "stakingPeriod": {
            "type": "number"
          },
          "stakingPeriodStart": {
            "type": "string"
          },
          "stakingPeriodEnd": {
            "type": "string"
          },
          "stake": {
            "type": "number"
          }
        },
        "required": [
          "stakingPeriod",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "stake"
        ]
      },
      "GetValidatorStakesResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "description": "The quantity of resources within a single response page.",
            "minimum": 1,
            "default": 50
          },
          "offset": {
            "type": "number",
            "description": "The quantity of resources to exclude from a response page.",
            "minimum": 0
          },
          "totalCount": {
            "type": "number",
            "description": "The total quantity of resources on the response page.",
            "minimum": 1
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorStake"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "GetValidatorRewardsException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100174
          },
          "message": {
            "type": "string",
            "default": "Get validator rewards failed"
          },
          "name": {
            "type": "string",
            "default": "GetValidatorRewardsException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetValidatorApyException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100175
          },
          "message": {
            "type": "string",
            "default": "Get validator apy failed"
          },
          "name": {
            "type": "string",
            "default": "GetValidatorApyException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidatorAPY": {
        "type": "object",
        "properties": {
          "stakingPeriod": {
            "type": "number"
          },
          "stakingPeriodStart": {
            "type": "string"
          },
          "stakingPeriodEnd": {
            "type": "string"
          },
          "apy": {
            "type": "number"
          }
        },
        "required": [
          "stakingPeriod",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "apy"
        ]
      },
      "GetValidatorAPYResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50
          },
          "offset": {
            "type": "number",
            "minimum": 0
          },
          "totalCount": {
            "type": "number",
            "minimum": 1
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorAPY"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "GetValidatorFeeException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100175
          },
          "message": {
            "type": "string",
            "default": "Get validator fee failed"
          },
          "name": {
            "type": "string",
            "default": "GetValidatorFeeException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidatorFee": {
        "type": "object",
        "properties": {
          "stakingPeriod": {
            "type": "number"
          },
          "stakingPeriodStart": {
            "type": "string"
          },
          "stakingPeriodEnd": {
            "type": "string"
          },
          "fee": {
            "type": "number"
          }
        },
        "required": [
          "stakingPeriod",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "fee"
        ]
      },
      "GetValidatorFeeResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50
          },
          "offset": {
            "type": "number",
            "minimum": 0
          },
          "totalCount": {
            "type": "number",
            "minimum": 1
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorFee"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "TokenGuardException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100119
          },
          "message": {
            "type": "string",
            "default": "Token guard error"
          },
          "name": {
            "type": "string",
            "default": "TokenGuardException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidatorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "not_found",
              "deposited",
              "pending",
              "active_online",
              "active_offline",
              "slashed",
              "exited"
            ],
            "description": "State of the validator",
            "example": "active_online"
          },
          "amount": {
            "type": "number",
            "example": 1,
            "description": "The validator current status"
          },
          "pubkey": {
            "type": "string",
            "description": "A public key",
            "example": "0xbe5E9c3Bb9eba1BF4C5eC1c1cbcF85ee2CE2fEC66Ce5460C23eF82332A044FDCabF7011F588CCbD77E73CCe6c4accDF0",
            "pattern": "^0x[a-fA-F0-9]{96}$"
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "The withdrawal address for the given validator",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "status",
          "amount",
          "pubkey"
        ]
      },
      "ValidatorsResponse": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorResponse"
            }
          }
        },
        "required": [
          "list"
        ]
      },
      "ValidatorsRequest": {
        "type": "object",
        "properties": {
          "pubkeys": {
            "description": "List of validator public keys.",
            "example": [
              "0xffC08FcD7cFeF5c70fB2b0e1f2A8EaA690AaE2bDFfa5dBEc4dEef31DcC0B19eB1f9Cebe3E2fe9eefBD9a1BDF6FD89b39"
            ],
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{96}$"
            }
          }
        },
        "required": [
          "pubkeys"
        ]
      },
      "Web3CreateTransactionException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100144
          },
          "message": {
            "type": "string",
            "default": "Could not create transaction"
          },
          "name": {
            "type": "string",
            "default": "Web3CreateTransactionException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "EthereumUnsignedTransactionResponse": {
        "type": "object",
        "properties": {
          "serializeTx": {
            "type": "string",
            "description": "Serialized unsigned transaction",
            "example": "0x02f902d705808301674e8508530af16e830186a094681a1b3441c6bfb12f91651efd9f02c83c0702938901bc16d674ec800000b902a44f498c730000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030aa5f27070a21d79455c4a9b73c0aa4a8b1a65a1fb530d7fd8e6cd23aa16660679ac43ee4861098f6d9166aed3a4d8abb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002001000000000000000000000028c84612d37de9209018ad96167f12169b653e9a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060978c565cd915f4e885b4201093d1501697610eb9ee99b9b60b70434dc330e98d5b42927725304ded48483a8b8f39506d09bcb22ee18d4f6b50257946ac5ee360385308d95c0e2bc963902d42e985c29ee489aa3c989ac1561c952a6424f107a800000000000000000000000000000000000000000000000000000000000000014cb452f6e3f10ba2175c86a0284f53fcb61404b458393391abc3d5622e3e55cdc0",
            "pattern": "^0x([A-Fa-f0-9])+$",
            "nullable": false
          },
          "to": {
            "type": "string",
            "description": "The address this transaction it to.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "gasLimit": {
            "type": "string",
            "example": "0",
            "description": "The maximum amount of gas that this block was permitted to use"
          },
          "data": {
            "type": "string",
            "example": "",
            "description": "The transaction data"
          },
          "value": {
            "type": "string",
            "example": "0",
            "description": "The amount (in wei) this transaction is sending"
          },
          "chainId": {
            "type": "string",
            "example": "0",
            "description": "The chain ID this transaction is authorized on, as specified by EIP-155"
          },
          "type": {
            "type": "string",
            "example": "0",
            "description": "The EIP-2718 type of this transaction envelope"
          },
          "maxFeePerGas": {
            "type": "string",
            "example": "0",
            "description": "The maximum price (in wei) per unit of gas this transaction will pay for the combined EIP-1559 block's base fee and this transaction's priority fee"
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "example": "0",
            "description": "The price (in wei) per unit of gas this transaction will allow in addition to the EIP-1559 block's base fee to bribe miners into giving this transaction priority"
          }
        },
        "required": [
          "serializeTx",
          "to",
          "gasLimit",
          "data",
          "value",
          "chainId",
          "type",
          "maxFeePerGas",
          "maxPriorityFeePerGas"
        ]
      },
      "DepositDataRequest": {
        "type": "object",
        "properties": {
          "pubkey": {
            "type": "string",
            "description": "Validator public key.",
            "example": "0x4Ef81c0018aB0DCbBdC8915D26efAcEa7CDef61eE9aBdddcBdAD2f2F04c5b6E4fBA6F5afD1Ad46267c1DC8544E690fE4",
            "pattern": "^0x[a-fA-F0-9]{96}$"
          },
          "signature": {
            "type": "string",
            "description": "A valid signature",
            "example": "0x83D2E925AEAEdcB18db983Bd447db0BFc1Ee9a6Ead118E5BEfeBcb24BA8C0efd3BD19Cb1cE8e807Fc980a67bBbf8b11e039efe2DB71fcdF096fccac5B04dF80f6a1804cd8d492455D30abE27FcDbDA78AFE61856cad65ffF5cA48Ed4776edd88",
            "pattern": "^0x[a-fA-F0-9]{192}$"
          },
          "depositDataRoot": {
            "type": "string",
            "description": "The deposit data",
            "example": "0x784bfffb4DfEFb457BA9187B38E49a1Bc0f4af50EDDDaca9581AA0aA7F98E96C",
            "pattern": "^0x[a-fA-F0-9]{64}$"
          }
        },
        "required": [
          "pubkey",
          "signature",
          "depositDataRoot"
        ]
      },
      "StakeEthereumRequest": {
        "type": "object",
        "properties": {
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "depositData": {
            "minItems": 1,
            "maxItems": 400,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepositDataRequest"
            }
          }
        },
        "required": [
          "withdrawalAddress",
          "depositData"
        ]
      },
      "InvalidDepositDataSignException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100153
          },
          "message": {
            "type": "string",
            "default": "Invalid deposit-data signature"
          },
          "name": {
            "type": "string",
            "default": "InvalidDepositDataSignException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "PubkeyDoNotExistsException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100145
          },
          "message": {
            "type": "string",
            "default": "Unauthorized to request withdrawal transaction for validator public key"
          },
          "name": {
            "type": "string",
            "default": "PubkeyDoNotExistsException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidatorNotActiveException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100146
          },
          "message": {
            "type": "string",
            "default": "Error creating withdrawal transaction because one or more validators are not in active state"
          },
          "name": {
            "type": "string",
            "default": "ValidatorNotActiveException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "WithdrawalTransactionException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100147
          },
          "message": {
            "type": "string",
            "default": "Could not create withdrawal transaction"
          },
          "name": {
            "type": "string",
            "default": "WithdrawalTransactionException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "UnstakeEthereumRequest": {
        "type": "object",
        "properties": {
          "pubkeys": {
            "description": "The List pubkey of validators",
            "example": [
              "0xffC08FcD7cFeF5c70fB2b0e1f2A8EaA690AaE2bDFfa5dBEc4dEef31DcC0B19eB1f9Cebe3E2fe9eefBD9a1BDF6FD89b39"
            ],
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{96}$"
            }
          }
        },
        "required": [
          "pubkeys"
        ]
      },
      "NodesRequestIdAlreadyExistException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100161
          },
          "message": {
            "type": "string",
            "default": "Nodes request id already exists"
          },
          "name": {
            "type": "string",
            "default": "NodesRequestIdAlreadyExistException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NodesRequestCreateException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100156
          },
          "message": {
            "type": "string",
            "default": "Error creating nodes request"
          },
          "name": {
            "type": "string",
            "default": "NodesRequestCreateException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NodesOptionsRequest": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "enum": [
              "any"
            ],
            "example": "any",
            "description": "Nodes location. Currently, only any is supported.",
            "default": "any"
          },
          "relaysSet": {
            "type": "string",
            "description": "MEV Relay Selection.",
            "example": null
          }
        },
        "required": [
          "location"
        ]
      },
      "CreateNodesRequestRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "Arbitrary UUID. You can later use that UUID to check the status of the set-up operation."
          },
          "validatorsCount": {
            "type": "number",
            "description": "Number of validators. One validator is equal to 32 ETH.",
            "default": 1,
            "minimum": 1,
            "maximum": 3125,
            "example": 1
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address for the validators.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "controllerAddress": {
            "type": "string",
            "description": "Controller address for the validators.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "feeRecipientAddress": {
            "type": "string",
            "description": "The fee recipient address",
            "example": "0x53da3c92fCCEb0CFE1764f65DDfF1564A2b15585",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "nodesOptions": {
            "$ref": "#/components/schemas/NodesOptionsRequest"
          }
        },
        "required": [
          "id",
          "validatorsCount",
          "withdrawalAddress",
          "nodesOptions"
        ]
      },
      "NodesRequestNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100154
          },
          "message": {
            "type": "string",
            "default": "Nodes request not found"
          },
          "name": {
            "type": "string",
            "default": "NodesRequestNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NodesRequestGetException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100157
          },
          "message": {
            "type": "string",
            "default": "Error getting nodes request"
          },
          "name": {
            "type": "string",
            "default": "NodesRequestGetException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "DepositDataResponse": {
        "type": "object",
        "properties": {
          "pubkey": {
            "type": "string",
            "description": " A public key",
            "example": "0xbe5E9c3Bb9eba1BF4C5eC1c1cbcF85ee2CE2fEC66Ce5460C23eF82332A044FDCabF7011F588CCbD77E73CCe6c4accDF0",
            "pattern": "^0x[a-fA-F0-9]{96}$"
          },
          "signature": {
            "type": "string",
            "description": "A valid signature",
            "example": "0x15C9D0Bf74BE4ef12b0008Ed53825Da647E0C0FE21c0EfAE2B36E066bf44A5a9b5De0B70cE19F73D8eC5E7237Dde667FE8a99Ad607BddDC4b2aDd4c4Bc57b10ddfe7f0bFb925b48f4d37Cee8f894cEA365CeeA6c4B25a9Ca7DAbDfFdB2EDd6eB",
            "pattern": "^0x[a-fA-F0-9]{192}$"
          },
          "depositDataRoot": {
            "type": "string",
            "description": "The deposit data",
            "example": "0xFEDdcB470eAA856c57f466e2f4d4F6971efEA1ED38fdB91bD913EEFFb52C8E24",
            "pattern": "^0x[a-fA-F0-9]{64}$"
          }
        },
        "required": [
          "pubkey",
          "signature",
          "depositDataRoot"
        ]
      },
      "NodesRequestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "UUID that was specified in the node set-up request."
          },
          "status": {
            "type": "string",
            "enum": [
              "init",
              "processing",
              "ready",
              "cancel"
            ],
            "description": "Current status of the nodes request",
            "example": "processing"
          },
          "validatorsCount": {
            "type": "number",
            "description": "The number of validators",
            "default": 1,
            "minimum": 1,
            "maximum": 3125,
            "example": 1
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "The withdrawal address for the given validator",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "controllerAddress": {
            "type": "string",
            "description": "The controller address for the given validator",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "feeRecipientAddress": {
            "type": "string",
            "description": "The fee recipient address for the given validator",
            "example": "0x53da3c92fCCEb0CFE1764f65DDfF1564A2b15585",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "depositData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepositDataResponse"
            }
          }
        },
        "required": [
          "id",
          "status",
          "validatorsCount",
          "withdrawalAddress",
          "feeRecipientAddress"
        ]
      },
      "NodesRequestGetListException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100160
          },
          "message": {
            "type": "string",
            "default": "Error getting nodes requests list"
          },
          "name": {
            "type": "string",
            "default": "NodesRequestGetListException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetListNodesRequestResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50
          },
          "offset": {
            "type": "number",
            "minimum": 0
          },
          "totalCount": {
            "type": "number",
            "minimum": 1
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodesRequestResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "GetRelaysSetsException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100165
          },
          "message": {
            "type": "string",
            "default": "Error getting relays sets"
          },
          "name": {
            "type": "string",
            "default": "GetRelaysSetsException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RelaysSetResponse": {
        "type": "object",
        "properties": {
          "relaysSet": {
            "type": "string",
            "description": "Name of relays set"
          }
        },
        "required": [
          "relaysSet"
        ]
      },
      "GetRelaysSetsRequestResponse": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelaysSetResponse"
            }
          }
        },
        "required": [
          "list"
        ]
      },
      "TransactionNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100191
          },
          "message": {
            "type": "string",
            "default": "Transaction not found"
          },
          "name": {
            "type": "string",
            "default": "TransactionNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "StatusException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100204
          },
          "message": {
            "type": "string",
            "default": "Unable to get transaction status"
          },
          "name": {
            "type": "string",
            "default": "StatusException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SignTransactionResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "failed"
            ],
            "description": "Transaction status.",
            "example": "success"
          },
          "blockHash": {
            "type": "string",
            "description": "The block in which the transaction was included.",
            "example": "0x0628743b05ffb4c9d5ea2144b359af38910f0ae439a685f57d85b50b9481ba3f"
          },
          "blockId": {
            "type": "number",
            "description": "Unique block identifier.",
            "example": "17168395"
          },
          "extrinsicId": {
            "type": "number",
            "description": "Unique extrinsic identifier.",
            "example": "0xb838911d5a5f965f33b8ee134e1115b5b9902abfc567f0c3050073faf9d3c3e0"
          },
          "transactionHash": {
            "type": "string",
            "description": "Signed transaction in hex format.",
            "example": "0xbd018400cc7cb7325ad1208212e2d8ee41a7572e816d53ac1bcac1be5df433486819213c011a6fc75a4d779e13a789ce9fe03d5cbb090b1e9833ae38c2c873571b73e2d7393f30bf097d93ca1692d426196f263d609e4d421cef3e017ad8bd388604e47e839502a80006010700e40b5402"
          },
          "signerAccount": {
            "type": "string",
            "description": "Account that signed the transaction.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "status",
          "blockHash",
          "blockId",
          "extrinsicId",
          "transactionHash",
          "signerAccount",
          "createdAt"
        ]
      },
      "SendException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100205
          },
          "message": {
            "type": "string",
            "default": "Unable to send transaction"
          },
          "name": {
            "type": "string",
            "default": "SendException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionRetractedException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100194
          },
          "message": {
            "type": "string",
            "default": "Transaction was retracted"
          },
          "name": {
            "type": "string",
            "default": "TransactionRetractedException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionInvalidException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100195
          },
          "message": {
            "type": "string",
            "default": "Transaction is invalid"
          },
          "name": {
            "type": "string",
            "default": "TransactionInvalidException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionUsurpedException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100196
          },
          "message": {
            "type": "string",
            "default": "Transaction was usurped"
          },
          "name": {
            "type": "string",
            "default": "TransactionUsurpedException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionFinalityTimeoutException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100197
          },
          "message": {
            "type": "string",
            "default": "Transaction was finality timeouted"
          },
          "name": {
            "type": "string",
            "default": "TransactionFinalityTimeoutException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionDroppedException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100198
          },
          "message": {
            "type": "string",
            "default": "Transaction was dropped"
          },
          "name": {
            "type": "string",
            "default": "TransactionDroppedException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ExtrinsicCouldNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100199
          },
          "message": {
            "type": "string",
            "default": "Extrinsic cannot be found"
          },
          "name": {
            "type": "string",
            "default": "ExtrinsicCouldNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "CouldNotGetStateException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100200
          },
          "message": {
            "type": "string",
            "default": "Could not get transaction state"
          },
          "name": {
            "type": "string",
            "default": "CouldNotGetStateException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ExtrinsicCouldNotSendException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100201
          },
          "message": {
            "type": "string",
            "default": "Extrinsic cannot be sent"
          },
          "name": {
            "type": "string",
            "default": "ExtrinsicCouldNotSendException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SendRequest": {
        "type": "object",
        "properties": {
          "signedTransaction": {
            "type": "string",
            "description": "Base64 encrypted transaction for unstake.",
            "example": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAcJjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+jagnMHpK8BDHt0PpssHwXGD2fBxS6MWBoxptD2u9TvrgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1NjSeWM5+GSJdoQd43Al9SVVXC9FfWGwbe7icpomwAUGodgXkTdUKpg0N73+KnqyVX9TXIp4citopJ3AAAAAAAah2BelAgULaAeR5s5tuI4eW3FQ9h/GeQpOtNEAAAAABqfVFxjHdMkoVmOYaR1etoteuKObS21cc1VbIQAAAAAGp9UXGSxcUSGMyUw9SvF/WNruCJuh/UTj29mKAAAAAAan1RcZNYTQ/u2bs0MdEyBr5UQoG1e4VmzFN1/0AAAAijW940iwWddz25ZC37fI0ue5fa+eTbC2ynBM3b0t4pcDAgMAAQBgAwAAAI5ELeF3F+N1ZPBWe0G1FV0heaKPY7e8dg5tBPbrf8voBAAAAAAAAABzZWVkgJaYAAAAAADIAAAAAAAAAAah2BeRN1QqmDQ3vf4qerJVf1NcinhyK2ikncAAAAAABAIBB3QAAAAAjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+iORC3hdxfjdWTwVntBtRVdIXmij2O3vHYObQT263/L6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQGAQMGCAUABAIAAAA="
          }
        },
        "required": [
          "signedTransaction"
        ]
      },
      "AddressIsInvalidException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100184
          },
          "message": {
            "type": "string",
            "default": "Polkadot address (%s) is invalid"
          },
          "name": {
            "type": "string",
            "default": "AddressIsInvalidException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "AddException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100202
          },
          "message": {
            "type": "string",
            "default": "Unable to add proxy"
          },
          "name": {
            "type": "string",
            "default": "AddException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "InsufficientBalanceException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100185
          },
          "message": {
            "type": "string",
            "default": "Insufficient balance"
          },
          "name": {
            "type": "string",
            "default": "InsufficientBalanceException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "0xa404160200165874de804160c3cd013d9b6f4bba864657c4c2168a542f78ff14a0253873190200000000"
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "createdAt"
        ]
      },
      "AddRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Proxied account is an address that transfers rights to a proxy account. The original account retains all of its rights, and the proxy account can be removed at any time.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "proxyAccountAddress": {
            "type": "string",
            "description": "Proxy account is an address that receives proxied account rights.",
            "example": "5Ggpg3JepXM3ZrktNpoc5QA1sKaFVpUPWMRr7jppiMxTuU75"
          }
        },
        "required": [
          "stashAccountAddress",
          "proxyAccountAddress"
        ]
      },
      "ProxyNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100190
          },
          "message": {
            "type": "string",
            "default": "Proxy not found"
          },
          "name": {
            "type": "string",
            "default": "ProxyNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RemoveException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100203
          },
          "message": {
            "type": "string",
            "default": "Unable to remove proxy"
          },
          "name": {
            "type": "string",
            "default": "RemoveException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RemoveRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Proxied account is an address that transfers rights to a proxy account. The original account retains all of its rights, and the proxy account can be removed at any time.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "proxyAccountAddress": {
            "type": "string",
            "description": "Proxy account is an address that receives proxied account rights.",
            "example": "5Ca1Bqfzc4DdU6zMXLu5UhpRtdX5EzCseDXW9YisVm25ATeJ"
          }
        },
        "required": [
          "stashAccountAddress",
          "proxyAccountAddress"
        ]
      },
      "BondException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100206
          },
          "message": {
            "type": "string",
            "default": "Unable to request bond"
          },
          "name": {
            "type": "string",
            "default": "BondException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "StakeAmountTooSmallException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100189
          },
          "message": {
            "type": "string",
            "default": "Stake amount too small"
          },
          "name": {
            "type": "string",
            "default": "StakeAmountTooSmallException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "PolkadotUnsignedBondTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "0xac0406000b0030ef7dba0203ded255321b86f5f975cf04fd0e9d2b1d941469d469dcc93b89441cdfe6c39f7b"
          },
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "rewardDestinationType": {
            "type": "string",
            "enum": [
              "staked",
              "stash",
              "controller",
              "account"
            ],
            "description": "<p>Rewards destination type:</p><ul><li>`staked` — Pay into the stash account, increasing the amount at stake accordingly.</li><li>`stash` — Pay into the stash account, not increasing the amount at stake.</li><li>`controller` — Pay into the controller account.</li><li>`account` — Pay into a custom account.</li></ul>"
          },
          "rewardDestination": {
            "type": "string",
            "description": "Rewards destination account address.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond (in usual DOTs/KSMs/WNDs).",
            "example": 3
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "stashAccountAddress",
          "rewardDestinationType",
          "rewardDestination",
          "amount",
          "createdAt"
        ]
      },
      "BondRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "rewardDestinationType": {
            "type": "string",
            "enum": [
              "staked",
              "stash",
              "controller",
              "account"
            ],
            "example": "account",
            "description": "<p>Rewards destination type:</p><ul><li>`staked` — Pay into the stash account, increasing the amount at stake accordingly.</li><li>`stash` — Pay into the stash account, not increasing the amount at stake.</li><li>`controller` — Pay into the controller account.</li><li>`account` — Pay into a custom account.</li></ul>"
          },
          "rewardDestination": {
            "type": "string",
            "description": "Rewards destination account address.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond (in usual DOTs/KSMs/WNDs).",
            "example": 3
          }
        },
        "required": [
          "stashAccountAddress",
          "rewardDestinationType",
          "amount"
        ]
      },
      "BondExtraException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100207
          },
          "message": {
            "type": "string",
            "default": "Unable to request bond extra"
          },
          "name": {
            "type": "string",
            "default": "BondExtraException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "PolkadotUnsignedTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "0xac0406000b0030ef7dba0203ded255321b86f5f975cf04fd0e9d2b1d941469d469dcc93b89441cdfe6c39f7b"
          },
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond (in usual DOTs/KSMs/WNDs).",
            "example": 3
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "stashAccountAddress",
          "amount",
          "createdAt"
        ]
      },
      "BondExtraRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond (in usual DOTs/KSMs/WNDs).",
            "example": 1
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "RebondException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100209
          },
          "message": {
            "type": "string",
            "default": "Unable to request rebond"
          },
          "name": {
            "type": "string",
            "default": "RebondException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "LedgerNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100187
          },
          "message": {
            "type": "string",
            "default": "Ledger not found"
          },
          "name": {
            "type": "string",
            "default": "LedgerNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "BondNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100186
          },
          "message": {
            "type": "string",
            "default": "Bond not found"
          },
          "name": {
            "type": "string",
            "default": "BondNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "WrongControllerException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100188
          },
          "message": {
            "type": "string",
            "default": "Wrong controller"
          },
          "name": {
            "type": "string",
            "default": "WrongControllerException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NotEnoughPendingAmountException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100192
          },
          "message": {
            "type": "string",
            "default": "Not enough pending amount"
          },
          "name": {
            "type": "string",
            "default": "NotEnoughPendingAmountException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RebondRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond (in usual DOTs/KSMs/WNDs).",
            "example": 3
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "NominateException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100208
          },
          "message": {
            "type": "string",
            "default": "Unable to request nominate"
          },
          "name": {
            "type": "string",
            "default": "NominateException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NominateTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action."
          },
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "targets": {
            "description": "Selected validators in the targets.",
            "example": [
              "5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY",
              "5HpG9w8EBLe5XCrbczpwq5TSXvedjrBGCwqxK1iQ7qUsSWFc"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:26.593Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "stashAccountAddress",
          "targets",
          "createdAt"
        ]
      },
      "NominateRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          }
        },
        "required": [
          "stashAccountAddress"
        ]
      },
      "UnbondException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100210
          },
          "message": {
            "type": "string",
            "default": "Unable to request unbond"
          },
          "name": {
            "type": "string",
            "default": "UnbondException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NotEnoughBonedAmountException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100193
          },
          "message": {
            "type": "string",
            "default": "Not enough bonded amount"
          },
          "name": {
            "type": "string",
            "default": "NotEnoughBonedAmountException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "UnbondRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond (in usual DOTs/KSMs/WNDs).",
            "example": 3
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "WithdrawUnbondedException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100211
          },
          "message": {
            "type": "string",
            "default": "Unable to withdraw unbonded"
          },
          "name": {
            "type": "string",
            "default": "WithdrawUnbondedException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "WithdrawalTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action."
          },
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding."
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format."
          }
        },
        "required": [
          "unsignedTransaction",
          "stashAccountAddress",
          "createdAt"
        ]
      },
      "WithdrawUnbondedRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          }
        },
        "required": [
          "stashAccountAddress"
        ]
      },
      "SendResponse": {
        "type": "object",
        "properties": {
          "transactionHash": {
            "type": "string",
            "description": "Block in which the transaction was included",
            "example": "0x0628743b05ffb4c9d5ea2144b359af38910f0ae439a685f57d85b50b9481ba3f"
          },
          "blockId": {
            "type": "number",
            "description": "Unique block identifier",
            "example": "17168395"
          },
          "signerAccount": {
            "type": "string",
            "description": "First signer of transaction",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "transactionHash",
          "blockId",
          "signerAccount",
          "createdAt"
        ]
      },
      "StakeAccount": {
        "type": "object",
        "properties": {
          "stakeAccount": {
            "type": "string",
            "description": "Stake account address",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAuthority": {
            "type": "string",
            "description": "Stake authority",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "withdrawAuthority": {
            "type": "string",
            "description": "Withdraw authority",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "voteAccount": {
            "type": "string",
            "description": "Vote account",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "activating",
              "deactivating"
            ],
            "description": "Stake account status",
            "example": "active"
          },
          "amount": {
            "type": "number",
            "description": "Amount of lamports to stake",
            "minimum": 1,
            "example": 1
          }
        },
        "required": [
          "stakeAccount",
          "stakeAuthority",
          "withdrawAuthority",
          "voteAccount",
          "status",
          "amount"
        ]
      },
      "StakingResponse": {
        "type": "object",
        "properties": {
          "accounts": {
            "description": "List of stake accounts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StakeAccount"
            }
          }
        },
        "required": [
          "accounts"
        ]
      },
      "StakeResult": {
        "type": "object",
        "properties": {
          "fromPublicKey": {
            "type": "string",
            "description": "From public key",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "accountPublicKey": {
            "type": "string",
            "description": "Account public key",
            "example": "6ZuLUCwVTvuQJrN1HrpoHJheQUw9Zk8CtiD3CEpHiA9E"
          },
          "stakerPublicKey": {
            "type": "string",
            "description": "Stacker public key",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "withdrawerPublicKey": {
            "type": "string",
            "description": "Withdrawer public key",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "amount": {
            "type": "number",
            "description": "Amount of lamports to stake",
            "minimum": 1,
            "example": 1
          },
          "unsignedTransaction": {
            "type": "string",
            "description": "Base64 encrypted transaction for stake",
            "example": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAcJjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+jagnMHpK8BDHt0PpssHwXGD2fBxS6MWBoxptD2u9TvrgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1NjSeWM5+GSJdoQd43Al9SVVXC9FfWGwbe7icpomwAUGodgXkTdUKpg0N73+KnqyVX9TXIp4citopJ3AAAAAAAah2BelAgULaAeR5s5tuI4eW3FQ9h/GeQpOtNEAAAAABqfVFxjHdMkoVmOYaR1etoteuKObS21cc1VbIQAAAAAGp9UXGSxcUSGMyUw9SvF/WNruCJuh/UTj29mKAAAAAAan1RcZNYTQ/u2bs0MdEyBr5UQoG1e4VmzFN1/0AAAAijW940iwWddz25ZC37fI0ue5fa+eTbC2ynBM3b0t4pcDAgMAAQBgAwAAAI5ELeF3F+N1ZPBWe0G1FV0heaKPY7e8dg5tBPbrf8voBAAAAAAAAABzZWVkgJaYAAAAAADIAAAAAAAAAAah2BeRN1QqmDQ3vf4qerJVf1NcinhyK2ikncAAAAAABAIBB3QAAAAAjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+iORC3hdxfjdWTwVntBtRVdIXmij2O3vHYObQT263/L6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQGAQMGCAUABAIAAAA="
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "fromPublicKey",
          "accountPublicKey",
          "stakerPublicKey",
          "withdrawerPublicKey",
          "amount",
          "unsignedTransaction",
          "createdAt"
        ]
      },
      "StakeRequest": {
        "type": "object",
        "properties": {
          "fromPublicKey": {
            "type": "string",
            "description": "From public key",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "accountPublicKey": {
            "type": "string",
            "description": "Account public key",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakerPublicKey": {
            "type": "string",
            "description": "Stacker public key",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "withdrawerPublicKey": {
            "type": "string",
            "description": "Withdrawer public key",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "amount": {
            "type": "number",
            "description": "Amount of lamports to stake",
            "minimum": 1,
            "example": 1
          }
        },
        "required": [
          "fromPublicKey",
          "accountPublicKey",
          "stakerPublicKey",
          "withdrawerPublicKey",
          "amount"
        ]
      },
      "UnstakeResult": {
        "type": "object",
        "properties": {
          "accountPublicKey": {
            "type": "string",
            "description": "Account public key",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "authorizedPublicKey": {
            "type": "string",
            "description": "Public key staker",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "unsignedTransaction": {
            "type": "string",
            "description": "Base64 encrypted transaction for unstake",
            "example": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAcJjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+jagnMHpK8BDHt0PpssHwXGD2fBxS6MWBoxptD2u9TvrgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1NjSeWM5+GSJdoQd43Al9SVVXC9FfWGwbe7icpomwAUGodgXkTdUKpg0N73+KnqyVX9TXIp4citopJ3AAAAAAAah2BelAgULaAeR5s5tuI4eW3FQ9h/GeQpOtNEAAAAABqfVFxjHdMkoVmOYaR1etoteuKObS21cc1VbIQAAAAAGp9UXGSxcUSGMyUw9SvF/WNruCJuh/UTj29mKAAAAAAan1RcZNYTQ/u2bs0MdEyBr5UQoG1e4VmzFN1/0AAAAijW940iwWddz25ZC37fI0ue5fa+eTbC2ynBM3b0t4pcDAgMAAQBgAwAAAI5ELeF3F+N1ZPBWe0G1FV0heaKPY7e8dg5tBPbrf8voBAAAAAAAAABzZWVkgJaYAAAAAADIAAAAAAAAAAah2BeRN1QqmDQ3vf4qerJVf1NcinhyK2ikncAAAAAABAIBB3QAAAAAjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+iORC3hdxfjdWTwVntBtRVdIXmij2O3vHYObQT263/L6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQGAQMGCAUABAIAAAA="
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "accountPublicKey",
          "authorizedPublicKey",
          "unsignedTransaction",
          "createdAt"
        ]
      },
      "UnstakeRequest": {
        "type": "object",
        "properties": {
          "accountPublicKey": {
            "type": "string",
            "description": "Account public key",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "authorizedPublicKey": {
            "type": "string",
            "description": "Stacker public key",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          }
        },
        "required": [
          "accountPublicKey",
          "authorizedPublicKey"
        ]
      },
      "WithdrawRequest": {
        "type": "object",
        "properties": {
          "accountPublicKey": {
            "type": "string",
            "description": "Account public key",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "authorizedPublicKey": {
            "type": "string",
            "description": "Withdrawer public key",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "toPublicKey": {
            "type": "string",
            "description": "Public key for withdraw amount",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "amount": {
            "type": "number",
            "description": "Amount of lamports to withdraw",
            "minimum": 1,
            "example": 1
          }
        },
        "required": [
          "accountPublicKey",
          "authorizedPublicKey",
          "toPublicKey",
          "amount"
        ]
      }
    }
  }
}
