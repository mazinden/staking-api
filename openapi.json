{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/eth/staking/ssv/request/create": {
      "post": {
        "operationId": "ssv-request-create",
        "summary": "Create SSV Request",
        "description": "Set up a request for running a distributed validator and making a stake.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSsvRequestRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/SsvRequestIdAlreadyExistException"
                        },
                        {
                          "$ref": "#/components/schemas/ClusterIsLiquidatedException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "SsvRequestIdAlreadyExistException": {
                    "value": {
                      "error": {
                        "code": 111103,
                        "message": "The request could not be created because this SSV request ID already exists. Please specify the correct UUID.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "ClusterIsLiquidatedException": {
                    "value": {
                      "error": {
                        "code": 111123,
                        "message": "The request could not be performed because the SSV cluster was liquidated. Please register a new cluster and then try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SsvRequestCreateException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/OperatorsNotEnoughException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SsvRequestCreateException": {
                    "value": {
                      "error": {
                        "code": 111100,
                        "message": "The SSV request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "OperatorsNotEnoughException": {
                    "value": {
                      "error": {
                        "code": 111124,
                        "message": "The SSV request could not be created because there are not enough available node operators.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/request/status/{id}": {
      "get": {
        "operationId": "ssv-request-status",
        "summary": "Check Status Request",
        "description": "Check the status of the set-up operation.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the SSV request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/SsvRequestResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SsvRequestNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/ClusterIsLiquidatedException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SsvRequestNotFoundException": {
                    "value": {
                      "error": {
                        "code": 111104,
                        "message": "The SSV ID undefined provided could not be found. Please specify the correct UUID.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  },
                  "ClusterIsLiquidatedException": {
                    "value": {
                      "error": {
                        "code": 111123,
                        "message": "The request could not be performed because the SSV cluster was liquidated. Please register a new cluster and then try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidEncryptedShardesCountException"
                        },
                        {
                          "$ref": "#/components/schemas/SsvRequestGetException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "InvalidEncryptedShardesCountException": {
                    "value": {
                      "error": {
                        "code": 111127,
                        "message": "The request could not be performed because the number of encrypted shardes is not valid. Please try again.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "SsvRequestGetException": {
                    "value": {
                      "error": {
                        "code": 111102,
                        "message": "The status of the SSV request could not be obtained because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/request/deposit-data/{id}": {
      "get": {
        "operationId": "ssv-request-deposit-data",
        "summary": "Get Request Deposit Data",
        "description": "Check the deposit data of the SSV request.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the SSV request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/SsvDepositDataResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/SsvValidatorErrorException"
                        },
                        {
                          "$ref": "#/components/schemas/SsvValidatorNotReadyException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "SsvValidatorErrorException": {
                    "value": {
                      "error": {
                        "code": 111129,
                        "message": "The request could not be performed because the validator was not correctly registered on SSV. Please remove the validator from the cluster by calling https://docs.p2p.org/reference/transaction-remove-validator.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "SsvValidatorNotReadyException": {
                    "value": {
                      "error": {
                        "code": 111130,
                        "message": "The request could not be performed because the validator registration on SSV is not confirmed due to invalid registration or an issue with the SSV API. Please ensure you have correctly broadcasted the validatorRegistrationTxs and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SsvRequestNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SsvRequestNotFoundException": {
                    "value": {
                      "error": {
                        "code": 111104,
                        "message": "The SSV ID undefined provided could not be found. Please specify the correct UUID.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/SsvRequestGetDepositdataException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "SsvRequestGetDepositdataException": {
                    "value": {
                      "error": {
                        "code": 111131,
                        "message": "The request deposit data could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/request": {
      "get": {
        "operationId": "ssv-request-list",
        "summary": "Check All Status Requests",
        "description": "Check the status of all the set-up operations created through the authorization token.",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetListSsvRequestResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SsvRequestGetListException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SsvRequestGetListException": {
                    "value": {
                      "error": {
                        "code": 111101,
                        "message": "The list of SSV requests could not be obtained because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/nodes-request/create": {
      "post": {
        "operationId": "eth-nodes-request-create",
        "summary": "Create Staking Request",
        "description": "Set up nodes for staking using P2P infrastructure.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNodesRequestRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NodesRequestIdAlreadyExistException"
                        },
                        {
                          "$ref": "#/components/schemas/CannotGetPodAddressException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NodesRequestIdAlreadyExistException": {
                    "value": {
                      "error": {
                        "code": 103121,
                        "message": "The nodes set-up request could not be performed because the node ID specified already exists.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "CannotGetPodAddressException": {
                    "value": {
                      "error": {
                        "code": 103128,
                        "message": "The transaction could not be created because the withdrawal address 'undefined' provided is invalid. For the restaking flow, the withdrawal address corresponds to the EigenPod address set by default or explicitly. Please check the request parameters.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestCreateException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NodesRequestCreateException": {
                    "value": {
                      "error": {
                        "code": 103116,
                        "message": "The nodes set-up request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/nodes-request/status/{id}": {
      "get": {
        "operationId": "eth-nodes-request-status",
        "summary": "Get Request Status",
        "description": "Check the status of the node set-up operation and retrieve the details of the validator by using the node request operation identifier. For several requests, see the [Get All Requests Status](ref:eth-nodes-request-list) method.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the nodes request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NodesRequestNotFoundException": {
                    "value": {
                      "error": {
                        "code": 103114,
                        "message": "The node request ID provided could not be found. Please specify the correct UUID.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestGetException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NodesRequestGetException": {
                    "value": {
                      "error": {
                        "code": 103117,
                        "message": "The status of the node request could not be obtained because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/nodes-request": {
      "get": {
        "operationId": "eth-nodes-request-list",
        "summary": "Get All Requests Status",
        "description": "Check the status of all the node set-up operations created through the authorization token.",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Status of node request",
            "example": "ready",
            "schema": {
              "enum": [
                "init",
                "processing",
                "ready",
                "cancel"
              ],
              "type": "string"
            }
          },
          {
            "name": "direction",
            "required": false,
            "in": "query",
            "description": "Sort direction by field createAt",
            "example": "ASC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetListNodesRequestResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestGetListException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NodesRequestGetListException": {
                    "value": {
                      "error": {
                        "code": 103120,
                        "message": "The list of nodes requests statuses could not be obtained because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/options/relays-sets": {
      "get": {
        "operationId": "eth-nodes-request-relays-sets",
        "summary": "Get List MEV Relays",
        "description": "Get the list of MEV relays.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetRelaysSetsRequestResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetRelaysSetsException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetRelaysSetsException": {
                    "value": {
                      "error": {
                        "code": 103125,
                        "message": "The list of relay sets could not be obtained because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/cosmos/{network}/staking/stake": {
      "post": {
        "operationId": "create-cosmos-stake-transaction",
        "summary": "Create Staking Request",
        "description": "Create stake request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "cosmoshub-4",
            "description": "<p>Cosmos network:</p><ul><li>`cosmoshub-4` — Cosmos mainnet.</li></ul>",
            "schema": {
              "enum": [
                "cosmoshub-4"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StakeOrUnstakeStakingCosmosRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakeOrUnstakeTransactionStakingCosmosResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/SimulationTransactionOnCosmosException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientFundsOnCosmosAccountException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "SimulationTransactionOnCosmosException": {
                    "value": {
                      "error": {
                        "code": 110113,
                        "message": "The request could not be performed because the simulation transaction failed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InsufficientFundsOnCosmosAccountException": {
                    "value": {
                      "error": {
                        "code": 110101,
                        "message": "The request could not be performed because the amount of tokens in the stash account is insufficient. Please check the balance and specify the correct request parameters.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateStakeTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateStakeTransactionException": {
                    "value": {
                      "error": {
                        "code": 110103,
                        "message": "The staking request transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Cosmos"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/cosmos/{network}/staking/unstake": {
      "post": {
        "operationId": "create-cosmos-unstake-transaction",
        "summary": "Create Unstake Request",
        "description": "Create unstake request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "cosmoshub-4",
            "description": "<p>Cosmos network:</p><ul><li>`cosmoshub-4` — Cosmos mainnet.</li></ul>",
            "schema": {
              "enum": [
                "cosmoshub-4"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StakeOrUnstakeStakingCosmosRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakeOrUnstakeTransactionStakingCosmosResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientFundsOnCosmosValidatorException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InsufficientFundsOnCosmosValidatorException": {
                    "value": {
                      "error": {
                        "code": 110102,
                        "message": "The request could not be performed because the amount of tokens staked in the Validator account is insufficient. Please check the balance and specify the correct request parameters.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateUnstakeTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateUnstakeTransactionException": {
                    "value": {
                      "error": {
                        "code": 110104,
                        "message": "The staking request transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Cosmos"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/cosmos/{network}/staking/redelegate/from": {
      "post": {
        "operationId": "create-cosmos-redelegate-from-transaction",
        "summary": "Create Redelegate From Request",
        "description": "Create redelegate from default validator request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "cosmoshub-4",
            "description": "<p>Cosmos network:</p><ul><li>`cosmoshub-4` — Cosmos mainnet.</li></ul>",
            "schema": {
              "enum": [
                "cosmoshub-4"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedelegateTransactionStakingCosmosRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/RedelegateTransactionStakingCosmosResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/SimulationTransactionOnCosmosException"
                        },
                        {
                          "$ref": "#/components/schemas/RedelegationTransactionInProcessException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "SimulationTransactionOnCosmosException": {
                    "value": {
                      "error": {
                        "code": 110113,
                        "message": "The request could not be performed because the simulation transaction failed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "RedelegationTransactionInProcessException": {
                    "value": {
                      "error": {
                        "code": 110114,
                        "message": "The request could not be performed because the redelegation to this validator is already in progress. Please try again after the redelegation process will be completed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateRedelegateTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateRedelegateTransactionException": {
                    "value": {
                      "error": {
                        "code": 110105,
                        "message": "The redelegate request transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Cosmos"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/cosmos/{network}/staking/redelegate/to": {
      "post": {
        "operationId": "create-cosmos-redelegate-to-transaction",
        "summary": "Create Redelegate To Request",
        "description": "Create redelegate to default validator request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "cosmoshub-4",
            "description": "<p>Cosmos network:</p><ul><li>`cosmoshub-4` — Cosmos mainnet.</li></ul>",
            "schema": {
              "enum": [
                "cosmoshub-4"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedelegateTransactionStakingCosmosRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/RedelegateTransactionStakingCosmosResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/SimulationTransactionOnCosmosException"
                        },
                        {
                          "$ref": "#/components/schemas/RedelegationTransactionInProcessException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "SimulationTransactionOnCosmosException": {
                    "value": {
                      "error": {
                        "code": 110113,
                        "message": "The request could not be performed because the simulation transaction failed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "RedelegationTransactionInProcessException": {
                    "value": {
                      "error": {
                        "code": 110114,
                        "message": "The request could not be performed because the redelegation to this validator is already in progress. Please try again after the redelegation process will be completed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateRedelegateTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateRedelegateTransactionException": {
                    "value": {
                      "error": {
                        "code": 110105,
                        "message": "The redelegate request transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Cosmos"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/cosmos/{network}/staking/claim-rewards": {
      "post": {
        "operationId": "create-cosmos-claim-rewards-transaction",
        "summary": "Create Claim Rewards Request",
        "description": "Create claim rewards request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "cosmoshub-4",
            "description": "<p>Cosmos network:</p><ul><li>`cosmoshub-4` — Cosmos mainnet.</li></ul>",
            "schema": {
              "enum": [
                "cosmoshub-4"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseStakingCosmosRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/ClaimRewardsTransactionStakingCosmosResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/SimulationTransactionOnCosmosException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "SimulationTransactionOnCosmosException": {
                    "value": {
                      "error": {
                        "code": 110113,
                        "message": "The request could not be performed because the simulation transaction failed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateClaimRewardsTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateClaimRewardsTransactionException": {
                    "value": {
                      "error": {
                        "code": 110106,
                        "message": "The claiming rewards request transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Cosmos"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/cosmos/{network}/transaction/encode": {
      "post": {
        "operationId": "encode-cosmos-transaction",
        "summary": "Encode Transaction",
        "description": "Prepare an encoded transaction in the hexadecimal format for signing within a third-party service.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "cosmoshub-4",
            "description": "<p>Cosmos network:</p><ul><li>`cosmoshub-4` — Cosmos mainnet.</li></ul>",
            "schema": {
              "enum": [
                "cosmoshub-4"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EncodeTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EncodeTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "TransactionNotFoundException": {
                    "value": {
                      "error": {
                        "code": 110107,
                        "message": "The transaction could not be found. Please specify the correct transaction data.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/EncodeTransactionFailedException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "EncodeTransactionFailedException": {
                    "value": {
                      "error": {
                        "code": 110115,
                        "message": "The transaction could not be signed because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Cosmos"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/cosmos/{network}/transaction/send": {
      "post": {
        "operationId": "broadcast-cosmos-transaction",
        "summary": "Broadcast Transaction",
        "description": "Broadcast transaction to the Cosmos network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "cosmoshub-4",
            "description": "<p>Cosmos network:</p><ul><li>`cosmoshub-4` — Cosmos mainnet.</li></ul>",
            "schema": {
              "enum": [
                "cosmoshub-4"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BroadcastTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TransactionStatusResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "TransactionNotFoundException": {
                    "value": {
                      "error": {
                        "code": 110107,
                        "message": "The transaction could not be found. Please specify the correct transaction data.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/BroadcastTransactionFailedException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "BroadcastTransactionFailedException": {
                    "value": {
                      "error": {
                        "code": 110109,
                        "message": "The transaction could not be broadcasted because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Cosmos"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/cosmos/{network}/transaction/status/{transactionHash}": {
      "get": {
        "operationId": "get-cosmos-transaction-status",
        "summary": "Check Transaction Status",
        "description": "Check the status of the transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "cosmoshub-4",
            "description": "<p>Cosmos network:</p><ul><li>`cosmoshub-4` — Cosmos mainnet.</li></ul>",
            "schema": {
              "enum": [
                "cosmoshub-4"
              ],
              "type": "string"
            }
          },
          {
            "name": "transactionHash",
            "required": true,
            "in": "path",
            "example": "EDDA3AE81ACBF56CB1F154F4957779C04F10B6F4C23B13597EFFC61FE05A02D2",
            "description": "Hash of the transaction.",
            "schema": {
              "format": "[A-Z0-9]{64}",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TransactionStatusResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidTransactionHashException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionAlreadyBroadcastException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "TransactionNotFoundException": {
                    "value": {
                      "error": {
                        "code": 110107,
                        "message": "The transaction could not be found. Please specify the correct transaction data.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidTransactionHashException": {
                    "value": {
                      "error": {
                        "code": 110111,
                        "message": "The transaction status could not be obtained because the transaction hash provided is invalid. Please check the transaction hash satisfies the regular expression undefined format and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "TransactionAlreadyBroadcastException": {
                    "value": {
                      "error": {
                        "code": 110110,
                        "message": "The transaction status could not be obtained because the transaction has been already broadcasted.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetTransactionStatusFailedException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetTransactionStatusFailedException": {
                    "value": {
                      "error": {
                        "code": 110108,
                        "message": "The transaction status could not be obtained because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Cosmos"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/celestia/{network}/staking/stake": {
      "post": {
        "operationId": "create-celestia-stake-transaction",
        "summary": "Create Staking Request",
        "description": "Create stake request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "celestia-mainnet-beta",
            "description": "<p>Celestia network:</p><ul><li>`mainnet-beta` — Celestia mainnet.</li><li>`mocha-testnet` — Celestia testnet.</li></ul>",
            "schema": {
              "enum": [
                "celestia-mainnet-beta",
                "celestia-mocha-testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StakeOrUnstakeStakingCelestiaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakeOrUnstakeTransactionStakingCelestiaResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/SimulationTransactionOnCosmosException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientFundsOnCosmosAccountException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "SimulationTransactionOnCosmosException": {
                    "value": {
                      "error": {
                        "code": 110113,
                        "message": "The request could not be performed because the simulation transaction failed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InsufficientFundsOnCosmosAccountException": {
                    "value": {
                      "error": {
                        "code": 110101,
                        "message": "The request could not be performed because the amount of tokens in the stash account is insufficient. Please check the balance and specify the correct request parameters.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateStakeTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateStakeTransactionException": {
                    "value": {
                      "error": {
                        "code": 110103,
                        "message": "The staking request transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Celestia"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/celestia/{network}/staking/unstake": {
      "post": {
        "operationId": "create-celestia-unstake-transaction",
        "summary": "Create Unstake Request",
        "description": "Create unstake request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "celestia-mainnet-beta",
            "description": "<p>Celestia network:</p><ul><li>`mainnet-beta` — Celestia mainnet.</li><li>`mocha-testnet` — Celestia testnet.</li></ul>",
            "schema": {
              "enum": [
                "celestia-mainnet-beta",
                "celestia-mocha-testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StakeOrUnstakeStakingCelestiaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakeOrUnstakeTransactionStakingCelestiaResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientFundsOnCosmosValidatorException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InsufficientFundsOnCosmosValidatorException": {
                    "value": {
                      "error": {
                        "code": 110102,
                        "message": "The request could not be performed because the amount of tokens staked in the Validator account is insufficient. Please check the balance and specify the correct request parameters.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateUnstakeTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateUnstakeTransactionException": {
                    "value": {
                      "error": {
                        "code": 110104,
                        "message": "The staking request transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Celestia"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/celestia/{network}/staking/redelegate/from": {
      "post": {
        "operationId": "create-celestia-redelegate-from-transaction",
        "summary": "Create Redelegate From Request",
        "description": "Create redelegate from default validator request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "celestia-mainnet-beta",
            "description": "<p>Celestia network:</p><ul><li>`mainnet-beta` — Celestia mainnet.</li><li>`mocha-testnet` — Celestia testnet.</li></ul>",
            "schema": {
              "enum": [
                "celestia-mainnet-beta",
                "celestia-mocha-testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedelegateTransactionStakingCelestiaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/RedelegateTransactionStakingCelestiaResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/SimulationTransactionOnCosmosException"
                        },
                        {
                          "$ref": "#/components/schemas/RedelegationTransactionInProcessException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "SimulationTransactionOnCosmosException": {
                    "value": {
                      "error": {
                        "code": 110113,
                        "message": "The request could not be performed because the simulation transaction failed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "RedelegationTransactionInProcessException": {
                    "value": {
                      "error": {
                        "code": 110114,
                        "message": "The request could not be performed because the redelegation to this validator is already in progress. Please try again after the redelegation process will be completed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateRedelegateTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateRedelegateTransactionException": {
                    "value": {
                      "error": {
                        "code": 110105,
                        "message": "The redelegate request transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Celestia"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/celestia/{network}/staking/redelegate/to": {
      "post": {
        "operationId": "create-celestia-redelegate-to-transaction",
        "summary": "Create Redelegate To Request",
        "description": "Create redelegate to default validator request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "celestia-mainnet-beta",
            "description": "<p>Celestia network:</p><ul><li>`mainnet-beta` — Celestia mainnet.</li><li>`mocha-testnet` — Celestia testnet.</li></ul>",
            "schema": {
              "enum": [
                "celestia-mainnet-beta",
                "celestia-mocha-testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedelegateTransactionStakingCelestiaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/RedelegateTransactionStakingCelestiaResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/SimulationTransactionOnCosmosException"
                        },
                        {
                          "$ref": "#/components/schemas/RedelegationTransactionInProcessException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "SimulationTransactionOnCosmosException": {
                    "value": {
                      "error": {
                        "code": 110113,
                        "message": "The request could not be performed because the simulation transaction failed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "RedelegationTransactionInProcessException": {
                    "value": {
                      "error": {
                        "code": 110114,
                        "message": "The request could not be performed because the redelegation to this validator is already in progress. Please try again after the redelegation process will be completed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateRedelegateTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateRedelegateTransactionException": {
                    "value": {
                      "error": {
                        "code": 110105,
                        "message": "The redelegate request transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Celestia"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/celestia/{network}/staking/claim-rewards": {
      "post": {
        "operationId": "create-celestia-claim-rewards-transaction",
        "summary": "Create Claim Rewards Request",
        "description": "Create claim rewards request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "celestia-mainnet-beta",
            "description": "<p>Celestia network:</p><ul><li>`mainnet-beta` — Celestia mainnet.</li><li>`mocha-testnet` — Celestia testnet.</li></ul>",
            "schema": {
              "enum": [
                "celestia-mainnet-beta",
                "celestia-mocha-testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseStakingCelestiaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/ClaimRewardsTransactionStakingCelestiaResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/SimulationTransactionOnCosmosException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "SimulationTransactionOnCosmosException": {
                    "value": {
                      "error": {
                        "code": 110113,
                        "message": "The request could not be performed because the simulation transaction failed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateClaimRewardsTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateClaimRewardsTransactionException": {
                    "value": {
                      "error": {
                        "code": 110106,
                        "message": "The claiming rewards request transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Celestia"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/celestia/{network}/transaction/encode": {
      "post": {
        "operationId": "encode-celestia-transaction",
        "summary": "Encode Transaction",
        "description": "Prepare an encoded transaction in the hexadecimal format for signing within a third-party service.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "celestia-mainnet-beta",
            "description": "<p>Celestia network:</p><ul><li>`mainnet-beta` — Celestia mainnet.</li><li>`mocha-testnet` — Celestia testnet.</li></ul>",
            "schema": {
              "enum": [
                "celestia-mainnet-beta",
                "celestia-mocha-testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EncodeTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EncodeTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "TransactionNotFoundException": {
                    "value": {
                      "error": {
                        "code": 110107,
                        "message": "The transaction could not be found. Please specify the correct transaction data.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/EncodeTransactionFailedException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "EncodeTransactionFailedException": {
                    "value": {
                      "error": {
                        "code": 110115,
                        "message": "The transaction could not be signed because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Celestia"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/celestia/{network}/transaction/send": {
      "post": {
        "operationId": "broadcast-celestia-transaction",
        "summary": "Broadcast Transaction",
        "description": "Broadcast transaction to the Cosmos network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "celestia-mainnet-beta",
            "description": "<p>Celestia network:</p><ul><li>`mainnet-beta` — Celestia mainnet.</li><li>`mocha-testnet` — Celestia testnet.</li></ul>",
            "schema": {
              "enum": [
                "celestia-mainnet-beta",
                "celestia-mocha-testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BroadcastTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TransactionStatusResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "TransactionNotFoundException": {
                    "value": {
                      "error": {
                        "code": 110107,
                        "message": "The transaction could not be found. Please specify the correct transaction data.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/BroadcastTransactionFailedException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "BroadcastTransactionFailedException": {
                    "value": {
                      "error": {
                        "code": 110109,
                        "message": "The transaction could not be broadcasted because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Celestia"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/celestia/{network}/transaction/status/{transactionHash}": {
      "get": {
        "operationId": "get-celestia-transaction-status",
        "summary": "Check Transaction Status",
        "description": "Check the status of the transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "celestia-mainnet-beta",
            "description": "<p>Celestia network:</p><ul><li>`mainnet-beta` — Celestia mainnet.</li><li>`mocha-testnet` — Celestia testnet.</li></ul>",
            "schema": {
              "enum": [
                "celestia-mainnet-beta",
                "celestia-mocha-testnet"
              ],
              "type": "string"
            }
          },
          {
            "name": "transactionHash",
            "required": true,
            "in": "path",
            "example": "EDDA3AE81ACBF56CB1F154F4957779C04F10B6F4C23B13597EFFC61FE05A02D2",
            "description": "Hash of the transaction.",
            "schema": {
              "format": "[A-Z0-9]{64}",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TransactionStatusResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidTransactionHashException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionAlreadyBroadcastException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "TransactionNotFoundException": {
                    "value": {
                      "error": {
                        "code": 110107,
                        "message": "The transaction could not be found. Please specify the correct transaction data.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidTransactionHashException": {
                    "value": {
                      "error": {
                        "code": 110111,
                        "message": "The transaction status could not be obtained because the transaction hash provided is invalid. Please check the transaction hash satisfies the regular expression undefined format and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "TransactionAlreadyBroadcastException": {
                    "value": {
                      "error": {
                        "code": 110110,
                        "message": "The transaction status could not be obtained because the transaction has been already broadcasted.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetTransactionStatusFailedException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetTransactionStatusFailedException": {
                    "value": {
                      "error": {
                        "code": 110108,
                        "message": "The transaction status could not be obtained because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Celestia"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/sei/{network}/staking/stake": {
      "post": {
        "operationId": "create-sei-stake-transaction",
        "summary": "Create Staking Request",
        "description": "Create a stake request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "pacific-1",
            "description": "<p>Sei network:</p><ul><li>`pacific-1` — Sei mainnet.</li><li>`atlantic-2` — Sei testnet.</li></ul>",
            "schema": {
              "enum": [
                "pacific-1",
                "atlantic-2"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StakeOrUnstakeStakingSeiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakeOrUnstakeTransactionStakingSeiResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/SimulationTransactionOnCosmosException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientFundsOnCosmosAccountException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "SimulationTransactionOnCosmosException": {
                    "value": {
                      "error": {
                        "code": 110113,
                        "message": "The request could not be performed because the simulation transaction failed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InsufficientFundsOnCosmosAccountException": {
                    "value": {
                      "error": {
                        "code": 110101,
                        "message": "The request could not be performed because the amount of tokens in the stash account is insufficient. Please check the balance and specify the correct request parameters.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateStakeTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateStakeTransactionException": {
                    "value": {
                      "error": {
                        "code": 110103,
                        "message": "The staking request transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Sei"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/sei/{network}/staking/unstake": {
      "post": {
        "operationId": "create-sei-unstake-transaction",
        "summary": "Create Unstake Request",
        "description": "Create an unstake request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "pacific-1",
            "description": "<p>Sei network:</p><ul><li>`pacific-1` — Sei mainnet.</li><li>`atlantic-2` — Sei testnet.</li></ul>",
            "schema": {
              "enum": [
                "pacific-1",
                "atlantic-2"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StakeOrUnstakeStakingSeiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakeOrUnstakeTransactionStakingSeiResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientFundsOnCosmosValidatorException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InsufficientFundsOnCosmosValidatorException": {
                    "value": {
                      "error": {
                        "code": 110102,
                        "message": "The request could not be performed because the amount of tokens staked in the Validator account is insufficient. Please check the balance and specify the correct request parameters.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateUnstakeTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateUnstakeTransactionException": {
                    "value": {
                      "error": {
                        "code": 110104,
                        "message": "The staking request transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Sei"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/sei/{network}/staking/redelegate/from": {
      "post": {
        "operationId": "create-sei-redelegate-from-transaction",
        "summary": "Create Redelegate From Request",
        "description": "Create a redelegate from the default validator request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "pacific-1",
            "description": "<p>Sei network:</p><ul><li>`pacific-1` — Sei mainnet.</li><li>`atlantic-2` — Sei testnet.</li></ul>",
            "schema": {
              "enum": [
                "pacific-1",
                "atlantic-2"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedelegateTransactionStakingSeiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/RedelegateTransactionStakingSeiResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/SimulationTransactionOnCosmosException"
                        },
                        {
                          "$ref": "#/components/schemas/RedelegationTransactionInProcessException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "SimulationTransactionOnCosmosException": {
                    "value": {
                      "error": {
                        "code": 110113,
                        "message": "The request could not be performed because the simulation transaction failed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "RedelegationTransactionInProcessException": {
                    "value": {
                      "error": {
                        "code": 110114,
                        "message": "The request could not be performed because the redelegation to this validator is already in progress. Please try again after the redelegation process will be completed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateRedelegateTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateRedelegateTransactionException": {
                    "value": {
                      "error": {
                        "code": 110105,
                        "message": "The redelegate request transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Sei"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/sei/{network}/staking/redelegate/to": {
      "post": {
        "operationId": "create-sei-redelegate-to-transaction",
        "summary": "Create Redelegate To Request",
        "description": "Create a redelegate to the default validator request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "pacific-1",
            "description": "<p>Sei network:</p><ul><li>`pacific-1` — Sei mainnet.</li><li>`atlantic-2` — Sei testnet.</li></ul>",
            "schema": {
              "enum": [
                "pacific-1",
                "atlantic-2"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedelegateTransactionStakingSeiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/RedelegateTransactionStakingSeiResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/SimulationTransactionOnCosmosException"
                        },
                        {
                          "$ref": "#/components/schemas/RedelegationTransactionInProcessException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "SimulationTransactionOnCosmosException": {
                    "value": {
                      "error": {
                        "code": 110113,
                        "message": "The request could not be performed because the simulation transaction failed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "RedelegationTransactionInProcessException": {
                    "value": {
                      "error": {
                        "code": 110114,
                        "message": "The request could not be performed because the redelegation to this validator is already in progress. Please try again after the redelegation process will be completed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateRedelegateTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateRedelegateTransactionException": {
                    "value": {
                      "error": {
                        "code": 110105,
                        "message": "The redelegate request transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Sei"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/sei/{network}/staking/claim-rewards": {
      "post": {
        "operationId": "create-sei-claim-rewards-transaction",
        "summary": "Create Claim Rewards Request",
        "description": "Create a claim rewards request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "pacific-1",
            "description": "<p>Sei network:</p><ul><li>`pacific-1` — Sei mainnet.</li><li>`atlantic-2` — Sei testnet.</li></ul>",
            "schema": {
              "enum": [
                "pacific-1",
                "atlantic-2"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseStakingSeiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/ClaimRewardsTransactionStakingSeiResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/SimulationTransactionOnCosmosException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "SimulationTransactionOnCosmosException": {
                    "value": {
                      "error": {
                        "code": 110113,
                        "message": "The request could not be performed because the simulation transaction failed.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateClaimRewardsTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateClaimRewardsTransactionException": {
                    "value": {
                      "error": {
                        "code": 110106,
                        "message": "The claiming rewards request transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Sei"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/sei/{network}/transaction/encode": {
      "post": {
        "operationId": "encode-sei-transaction",
        "summary": "Encode Transaction",
        "description": "Prepare an encoded transaction in the hexadecimal format for signing within a third-party service.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "pacific-1",
            "description": "<p>Sei network:</p><ul><li>`pacific-1` — Sei mainnet.</li><li>`atlantic-2` — Sei testnet.</li></ul>",
            "schema": {
              "enum": [
                "pacific-1",
                "atlantic-2"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EncodeTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EncodeTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "TransactionNotFoundException": {
                    "value": {
                      "error": {
                        "code": 110107,
                        "message": "The transaction could not be found. Please specify the correct transaction data.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/EncodeTransactionFailedException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "EncodeTransactionFailedException": {
                    "value": {
                      "error": {
                        "code": 110115,
                        "message": "The transaction could not be signed because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Sei"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/sei/{network}/transaction/send": {
      "post": {
        "operationId": "broadcast-sei-transaction",
        "summary": "Broadcast Transaction",
        "description": "Broadcast transaction to the Sei network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "pacific-1",
            "description": "<p>Sei network:</p><ul><li>`pacific-1` — Sei mainnet.</li><li>`atlantic-2` — Sei testnet.</li></ul>",
            "schema": {
              "enum": [
                "pacific-1",
                "atlantic-2"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BroadcastTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TransactionStatusResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "TransactionNotFoundException": {
                    "value": {
                      "error": {
                        "code": 110107,
                        "message": "The transaction could not be found. Please specify the correct transaction data.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/BroadcastTransactionFailedException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "BroadcastTransactionFailedException": {
                    "value": {
                      "error": {
                        "code": 110109,
                        "message": "The transaction could not be broadcasted because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Sei"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/sei/{network}/transaction/status/{transactionHash}": {
      "get": {
        "operationId": "get-sei-transaction-status",
        "summary": "Check Transaction Status",
        "description": "Check the status of the transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "pacific-1",
            "description": "<p>Sei network:</p><ul><li>`pacific-1` — Sei mainnet.</li><li>`atlantic-2` — Sei testnet.</li></ul>",
            "schema": {
              "enum": [
                "pacific-1",
                "atlantic-2"
              ],
              "type": "string"
            }
          },
          {
            "name": "transactionHash",
            "required": true,
            "in": "path",
            "example": "EDDA3AE81ACBF56CB1F154F4957779C04F10B6F4C23B13597EFFC61FE05A02D2",
            "description": "Hash of the transaction.",
            "schema": {
              "format": "[A-Z0-9]{64}",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TransactionStatusResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidTransactionHashException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionAlreadyBroadcastException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "TransactionNotFoundException": {
                    "value": {
                      "error": {
                        "code": 110107,
                        "message": "The transaction could not be found. Please specify the correct transaction data.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidTransactionHashException": {
                    "value": {
                      "error": {
                        "code": 110111,
                        "message": "The transaction status could not be obtained because the transaction hash provided is invalid. Please check the transaction hash satisfies the regular expression undefined format and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "TransactionAlreadyBroadcastException": {
                    "value": {
                      "error": {
                        "code": 110110,
                        "message": "The transaction status could not be obtained because the transaction has been already broadcasted.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetTransactionStatusFailedException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetTransactionStatusFailedException": {
                    "value": {
                      "error": {
                        "code": 110108,
                        "message": "The transaction status could not be obtained because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Sei"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/exit-queue": {
      "get": {
        "operationId": "data-network-exit-queue",
        "summary": "Get Exit Queue",
        "description": "Method to retrieve the network exit queue — a queue of validators who have requested to exit the network. Validators in the queue must wait for a certain period before they can safely exit.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkQueueResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsNotFoundException": {
                    "value": {
                      "error": {
                        "code": 115200,
                        "message": "The data for the parameters provided could not be found.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkExitQueueException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkExitQueueException": {
                    "value": {
                      "error": {
                        "code": 115201,
                        "message": "The network exit queue could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/staking-queue": {
      "get": {
        "operationId": "data-network-staking-queue",
        "summary": "Get Staking Queue",
        "description": "Method to retrieve network staking queue.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkQueueResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsNotFoundException": {
                    "value": {
                      "error": {
                        "code": 115200,
                        "message": "The data for the parameters provided could not be found.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStakingQueueException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStakingQueueException": {
                    "value": {
                      "error": {
                        "code": 115202,
                        "message": "The network staking queue could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/supply-data": {
      "get": {
        "operationId": "data-network-supply-data",
        "summary": "Get Supply Data",
        "description": "Method to retrieve network supply data.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkSupplyDataResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsNotFoundException": {
                    "value": {
                      "error": {
                        "code": 115200,
                        "message": "The data for the parameters provided could not be found.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkSupplyDataException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkSupplyDataException": {
                    "value": {
                      "error": {
                        "code": 115203,
                        "message": "The network supply data could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/last-staking-period": {
      "get": {
        "operationId": "data-network-last-staking-period",
        "summary": "Get Last Staking Period",
        "description": "Method to retrieve network last staking period.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkLastStakingPeriodResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsNotFoundException": {
                    "value": {
                      "error": {
                        "code": 115200,
                        "message": "The data for the parameters provided could not be found.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkLastStakingPeriodException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkLastStakingPeriodException": {
                    "value": {
                      "error": {
                        "code": 115204,
                        "message": "The network last staking period could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/apy": {
      "get": {
        "operationId": "data-network-apy",
        "summary": "Get Network APY",
        "description": "Method to retrieve network APY by staking period.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkAPYListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsNotFoundException": {
                    "value": {
                      "error": {
                        "code": 115200,
                        "message": "The data for the parameters provided could not be found.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsHistoryException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsHistoryException": {
                    "value": {
                      "error": {
                        "code": 115206,
                        "message": "The request could not be performed because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/apr": {
      "get": {
        "operationId": "data-network-apr",
        "summary": "Get Network APR",
        "description": "Method to retrieve network APR by staking period.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkAPYListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsNotFoundException": {
                    "value": {
                      "error": {
                        "code": 115200,
                        "message": "The data for the parameters provided could not be found.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsHistoryException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsHistoryException": {
                    "value": {
                      "error": {
                        "code": 115206,
                        "message": "The request could not be performed because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/validators-count": {
      "get": {
        "operationId": "data-network-validator-count",
        "summary": "Get Validators Count",
        "description": "Method to retrieve network validators count by staking period.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkValidatorsCountListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsHistoryNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsHistoryNotFoundException": {
                    "value": {
                      "error": {
                        "code": 115200,
                        "message": "The data for the parameters provided could not be found.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsHistoryException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsHistoryException": {
                    "value": {
                      "error": {
                        "code": 115206,
                        "message": "The request could not be performed because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/delegators-count": {
      "get": {
        "operationId": "data-network-delegators-count",
        "summary": "Get Delegators Count",
        "description": "Method to retrieve network delegators count by staking period.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkDelegatorsCountListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsHistoryNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsHistoryNotFoundException": {
                    "value": {
                      "error": {
                        "code": 115200,
                        "message": "The data for the parameters provided could not be found.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsHistoryException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsHistoryException": {
                    "value": {
                      "error": {
                        "code": 115206,
                        "message": "The request could not be performed because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/stake": {
      "get": {
        "operationId": "data-network-stake",
        "summary": "Get Network Stake",
        "description": "Method to retrieve network stake by staking period.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStakeListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsHistoryNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsHistoryNotFoundException": {
                    "value": {
                      "error": {
                        "code": 115200,
                        "message": "The data for the parameters provided could not be found.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsHistoryException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsHistoryException": {
                    "value": {
                      "error": {
                        "code": 115206,
                        "message": "The request could not be performed because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/rewards": {
      "get": {
        "operationId": "data-network-rewards",
        "summary": "Get Network Rewards",
        "description": "Method to retrieve network rewards by staking period.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkRewardsListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsHistoryNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsHistoryNotFoundException": {
                    "value": {
                      "error": {
                        "code": 115200,
                        "message": "The data for the parameters provided could not be found.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkRewardsStatsHistoryException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkRewardsStatsHistoryException": {
                    "value": {
                      "error": {
                        "code": 115208,
                        "message": "The list of network rewards could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/validator/summary": {
      "get": {
        "operationId": "data-validator-summary",
        "summary": "Get Validator Summary",
        "description": "Get a list of validator rewards, stake and APY.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "Validator address in the required network. For the Ethereum network, it is a public validator key.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorSummaryResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidValidatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidValidatorAddressException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the validator address provided is not valid on the specified network. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorSummaryException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorSummaryException": {
                    "value": {
                      "error": {
                        "code": 115309,
                        "message": "The validator summary could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/validator/stakes": {
      "get": {
        "operationId": "data-validator-stakes",
        "summary": "Get Validator Stake",
        "description": "Get a current validator stake.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "Validator address in the required network. For the Ethereum network, it is a public validator key.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorStakesResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidValidatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidValidatorAddressException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the validator address provided is not valid on the specified network. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorStakesException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorStakesException": {
                    "value": {
                      "error": {
                        "code": 115300,
                        "message": "The list of validator stakes could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/validator/rewards": {
      "get": {
        "operationId": "data-validator-rewards",
        "summary": "Get Validator Rewards",
        "description": "Get a list of validator rewards.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "Validator address in the required network. For the Ethereum network, it is a public validator key.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorRewardsResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidValidatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidValidatorAddressException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the validator address provided is not valid on the specified network. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorRewardsException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorRewardsException": {
                    "value": {
                      "error": {
                        "code": 115301,
                        "message": "The list of validator rewards could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/validator/apy": {
      "get": {
        "operationId": "data-validator-apy",
        "summary": "Get Validator APY",
        "description": "Get a list of validator annual percentage yield (APY).",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "Validator address in the required network. For the Ethereum network, it is a public validator key.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorAPYResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidValidatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidValidatorAddressException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the validator address provided is not valid on the specified network. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorApyException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorApyException": {
                    "value": {
                      "error": {
                        "code": 115302,
                        "message": "The validator annual percentage yield could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/validator/fee": {
      "get": {
        "operationId": "data-validator-fee",
        "summary": "Get Validator Fee",
        "description": "Get a list of validator fee.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "Validator address in the required network. For the Ethereum network, it is a public validator key.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorFeeResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidValidatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidValidatorAddressException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the validator address provided is not valid on the specified network. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorFeeException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorFeeException": {
                    "value": {
                      "error": {
                        "code": 115303,
                        "message": "The list of validator fee could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/validator/name": {
      "get": {
        "operationId": "data-validator-name",
        "summary": "Get Validator Name",
        "description": "Get a validator name.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "polygon",
                "sui",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "Validator address in the required network. For the Ethereum network, it is a public validator key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorNameResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidValidatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidValidatorAddressException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the validator address provided is not valid on the specified network. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorInfoException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorInfoException": {
                    "value": {
                      "error": {
                        "code": 115304,
                        "message": "The request could not be performed because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/validator/state": {
      "get": {
        "operationId": "data-validator-state",
        "summary": "Get Validator State",
        "description": "Get a validator state.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "Validator address in the required network. For the Ethereum network, it is a public validator key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorStateResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidValidatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidValidatorAddressException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the validator address provided is not valid on the specified network. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorInfoNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorInfoNotFoundException": {
                    "value": {
                      "error": {
                        "code": 115305,
                        "message": "The validator could not be found. Please specify the correct validator address and the network.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorInfoException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorInfoException": {
                    "value": {
                      "error": {
                        "code": 115304,
                        "message": "The request could not be performed because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/validator/delegators-count": {
      "get": {
        "operationId": "data-validator-delegators-count",
        "summary": "Get Validator Delegators Count",
        "description": "Get a validator delegators count.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "Validator address in the required network. For the Ethereum network, it is a public validator key.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorDelegatorsCountResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidValidatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidValidatorAddressException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the validator address provided is not valid on the specified network. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorDelegatorsCountException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorDelegatorsCountException": {
                    "value": {
                      "error": {
                        "code": 115306,
                        "message": "The data could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/validator/statuses": {
      "get": {
        "operationId": "data-validator-statuses",
        "summary": "Get Validator Statuses",
        "description": "Get a list of validators created via Staking API based on their statuses.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorStatusesResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorStatusesException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorStatusesException": {
                    "value": {
                      "error": {
                        "code": 115308,
                        "message": "The list of validator statuses could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/validator/statuses/detailed": {
      "get": {
        "operationId": "data-validator-statuses-detailed",
        "summary": "Get Validator Statuses Detailed",
        "description": "Get a detailed status information for each individual validator along with their total count.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorStatusesDetailedResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorStatusesException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorStatusesException": {
                    "value": {
                      "error": {
                        "code": 115308,
                        "message": "The list of validator statuses could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/delegator/summary": {
      "get": {
        "operationId": "data-delegator-summary",
        "summary": "Get Delegator Summary",
        "description": "Get a list of delegator rewards, stake and APY.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "Delegator address in the required network.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressType",
            "required": false,
            "in": "query",
            "description": "<p>Delegator address type in the required network:</p><ul><li>`deposit` — available for the Ethereum network (used by default)</li><li>`withdrawal` — available for the Ethereum network</li><li>`delegator` — available for the Polygon, Solana, Cosmos, and Sui networks (used by default)</li><li>`stake_account` — available for the Solana</li><li>`nominator` — available for the TON and Polkadot networks (used by default)</li><li>`nominator_reward_account` — available for the Polkadot networks</li></ul>",
            "schema": {
              "enum": [
                "deposit",
                "withdrawal",
                "nominator",
                "nominator_reward_account",
                "delegator",
                "stake_account"
              ],
              "type": "string"
            }
          },
          {
            "name": "validatorAddress",
            "required": false,
            "in": "query",
            "description": "Validator address in the required network for this delegator",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupBy",
            "required": false,
            "in": "query",
            "description": "<p>Group the report data:</p> <ul><li>`stakingPeriod` — aggregate the results by epoch.</li><li>`day` — aggregate the results by days.</li><li>`all` — aggregate the results over the entire period.</li></ul>.",
            "schema": {
              "enum": [
                "stakingPeriod",
                "day",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Exclude breakdown by `validator` from the data report.",
            "schema": {
              "enum": [
                "validator"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetDelegatorSummaryResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidDelegatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidDelegatorAddressException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the delegator address provided is not valid on the specified network. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetDelegatorSummaryException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetDelegatorSummaryException": {
                    "value": {
                      "error": {
                        "code": 115407,
                        "message": "The delegator summary could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Delegator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/delegator/stakes": {
      "get": {
        "operationId": "data-delegator-stakes",
        "summary": "Get Delegator Stake",
        "description": "Get a current delegator stake.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "Delegator address in the required network",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressType",
            "required": false,
            "in": "query",
            "description": "<p>Delegator address type in the required network:</p><ul><li>`deposit` — available for the Ethereum network (used by default)</li><li>`withdrawal` — available for the Ethereum network</li><li>`delegator` — available for the Polygon, Solana, Cosmos, and Sui networks (used by default)</li><li>`stake_account` — available for the Solana</li><li>`nominator` — available for the TON and Polkadot networks (used by default)</li><li>`nominator_reward_account` — available for the Polkadot networks</li></ul>",
            "schema": {
              "enum": [
                "deposit",
                "withdrawal",
                "nominator",
                "nominator_reward_account",
                "delegator",
                "stake_account"
              ],
              "type": "string"
            }
          },
          {
            "name": "validatorAddress",
            "required": false,
            "in": "query",
            "description": "Validator address in the required network for this delegator",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupBy",
            "required": false,
            "in": "query",
            "description": "<p>Group the report data:</p> <ul><li>`stakingPeriod` — aggregate the results by epoch.</li><li>`day` — aggregate the results by days.</li><li>`all` — aggregate the results over the entire period.</li></ul>.",
            "schema": {
              "enum": [
                "stakingPeriod",
                "day",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Exclude breakdown by `validator` from the data report.",
            "schema": {
              "enum": [
                "validator"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetDelegatorStakesResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidDelegatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidDelegatorAddressException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the delegator address provided is not valid on the specified network. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetDelegatorStakesException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetDelegatorStakesException": {
                    "value": {
                      "error": {
                        "code": 115402,
                        "message": "The list of delegator stakes could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Delegator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/delegator/rewards": {
      "get": {
        "operationId": "data-delegator-rewards",
        "summary": "Get Delegator Rewards",
        "description": "Get a list of delegator rewards.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "Delegator address in the required network",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressType",
            "required": false,
            "in": "query",
            "description": "<p>Delegator address type in the required network:</p><ul><li>`deposit` — available for the Ethereum network (used by default)</li><li>`withdrawal` — available for the Ethereum network</li><li>`delegator` — available for the Polygon, Solana, Cosmos, and Sui networks (used by default)</li><li>`stake_account` — available for the Solana</li><li>`nominator` — available for the TON and Polkadot networks (used by default)</li><li>`nominator_reward_account` — available for the Polkadot networks</li></ul>",
            "schema": {
              "enum": [
                "deposit",
                "withdrawal",
                "nominator",
                "nominator_reward_account",
                "delegator",
                "stake_account"
              ],
              "type": "string"
            }
          },
          {
            "name": "validatorAddress",
            "required": false,
            "in": "query",
            "description": "Validator address in the required network for this delegator",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupBy",
            "required": false,
            "in": "query",
            "description": "<p>Group the report data:</p> <ul><li>`stakingPeriod` — aggregate the results by epoch.</li><li>`day` — aggregate the results by days.</li><li>`all` — aggregate the results over the entire period.</li></ul>.",
            "schema": {
              "enum": [
                "stakingPeriod",
                "day",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Exclude breakdown by `validator` from the data report.",
            "schema": {
              "enum": [
                "validator"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetDelegatorRewardsResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidDelegatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidDelegatorAddressException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the delegator address provided is not valid on the specified network. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetDelegatorRewardsException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetDelegatorRewardsException": {
                    "value": {
                      "error": {
                        "code": 115403,
                        "message": "The list of delegator rewards could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Delegator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/delegator/apy": {
      "get": {
        "operationId": "data-delegator-apy",
        "summary": "Get Delegator APY",
        "description": "Get a list of delegator annual percentage yield (APY).",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot",
                "kusama",
                "moonbeam",
                "vara",
                "sui",
                "polygon",
                "avail",
                "ton"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "Delegator address in the required network",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressType",
            "required": false,
            "in": "query",
            "description": "<p>Delegator address type in the required network:</p><ul><li>`deposit` — available for the Ethereum network (used by default)</li><li>`withdrawal` — available for the Ethereum network</li><li>`delegator` — available for the Polygon, Solana, Cosmos, and Sui networks (used by default)</li><li>`stake_account` — available for the Solana</li><li>`nominator` — available for the TON and Polkadot networks (used by default)</li><li>`nominator_reward_account` — available for the Polkadot networks</li></ul>",
            "schema": {
              "enum": [
                "deposit",
                "withdrawal",
                "nominator",
                "nominator_reward_account",
                "delegator",
                "stake_account"
              ],
              "type": "string"
            }
          },
          {
            "name": "validatorAddress",
            "required": false,
            "in": "query",
            "description": "Validator address in the required network for this delegator",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupBy",
            "required": false,
            "in": "query",
            "description": "<p>Group the report data:</p> <ul><li>`stakingPeriod` — aggregate the results by epoch.</li><li>`day` — aggregate the results by days.</li><li>`all` — aggregate the results over the entire period.</li></ul>.",
            "schema": {
              "enum": [
                "stakingPeriod",
                "day",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Exclude breakdown by `validator` from the data report.",
            "schema": {
              "enum": [
                "validator"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetDelegatorAPYResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidDelegatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidDelegatorAddressException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the delegator address provided is not valid on the specified network. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetDelegatorApyException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetDelegatorApyException": {
                    "value": {
                      "error": {
                        "code": 115404,
                        "message": "The delegator annual percentage yield could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Delegator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/delegator/total-rewards": {
      "get": {
        "operationId": "data-delegator-total-rewards",
        "summary": "Get Total Delegator Rewards",
        "description": "Get total delegator rewards.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "Delegator address in the required network",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressType",
            "required": false,
            "in": "query",
            "description": "<p>Delegator address type in the required network:</p><ul><li>`deposit` — available for the Ethereum network (used by default)</li><li>`withdrawal` — available for the Ethereum network</li><li>`delegator` — available for the Polygon, Solana, Cosmos, and Sui networks (used by default)</li><li>`stake_account` — available for the Solana</li><li>`nominator` — available for the TON and Polkadot networks (used by default)</li><li>`nominator_reward_account` — available for the Polkadot networks</li></ul>",
            "schema": {
              "enum": [
                "deposit",
                "withdrawal",
                "nominator",
                "nominator_reward_account",
                "delegator",
                "stake_account"
              ],
              "type": "string"
            }
          },
          {
            "name": "validatorAddress",
            "required": false,
            "in": "query",
            "description": "Validator address in the required network for this delegator",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupBy",
            "required": false,
            "in": "query",
            "description": "<p>Group the report data:</p> <ul><li>`stakingPeriod` — aggregate the results by epoch.</li><li>`day` — aggregate the results by days.</li><li>`all` — aggregate the results over the entire period.</li></ul>.",
            "schema": {
              "enum": [
                "stakingPeriod",
                "day",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Exclude breakdown by `validator` from the data report.",
            "schema": {
              "enum": [
                "validator"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetDelegatorRewardsResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidDelegatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidDelegatorAddressException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the delegator address provided is not valid on the specified network. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetDelegatorAutostakingDataException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetDelegatorAutostakingDataException": {
                    "value": {
                      "error": {
                        "code": 115406,
                        "message": "The request could not be performed because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Delegator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/delegator/apr": {
      "get": {
        "operationId": "data-delegator-apr",
        "summary": "Get Delegator APR",
        "description": "Get delegator APR (Annual Percentage Rate).",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Network name.",
            "schema": {
              "enum": [
                "ethereum"
              ],
              "type": "string"
            }
          },
          {
            "name": "startAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period start in the ISO 8601 format. If not specified, the default value is the one month ago.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": false,
            "in": "query",
            "description": "Timestamp of the report data period finish in the ISO 8601 format. If not specified, the default value is the current date.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 10000000,
              "type": "number"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "Delegator address in the required network",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressType",
            "required": false,
            "in": "query",
            "description": "<p>Delegator address type in the required network:</p><ul><li>`deposit` — available for the Ethereum network (used by default)</li><li>`withdrawal` — available for the Ethereum network</li><li>`delegator` — available for the Polygon, Solana, Cosmos, and Sui networks (used by default)</li><li>`stake_account` — available for the Solana</li><li>`nominator` — available for the TON and Polkadot networks (used by default)</li><li>`nominator_reward_account` — available for the Polkadot networks</li></ul>",
            "schema": {
              "enum": [
                "deposit",
                "withdrawal",
                "nominator",
                "nominator_reward_account",
                "delegator",
                "stake_account"
              ],
              "type": "string"
            }
          },
          {
            "name": "validatorAddress",
            "required": false,
            "in": "query",
            "description": "Validator address in the required network for this delegator",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupBy",
            "required": false,
            "in": "query",
            "description": "<p>Group the report data:</p> <ul><li>`stakingPeriod` — aggregate the results by epoch.</li><li>`day` — aggregate the results by days.</li><li>`all` — aggregate the results over the entire period.</li></ul>.",
            "schema": {
              "enum": [
                "stakingPeriod",
                "day",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Exclude breakdown by `validator` from the data report.",
            "schema": {
              "enum": [
                "validator"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetDelegatorRewardsResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidDelegatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidDelegatorAddressException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the delegator address provided is not valid on the specified network. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetDelegatorAutostakingDataException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetDelegatorAutostakingDataException": {
                    "value": {
                      "error": {
                        "code": 115406,
                        "message": "The request could not be performed because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Delegator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/tx/deposit": {
      "post": {
        "operationId": "eth-staking-deposit",
        "summary": "Prepare Staking Transaction",
        "description": "Construct a serialized transaction to deposit the stake amount, utilizing the functionalities of P2P smart contract.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StakeEthereumRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Web3CreateTransactionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Web3CreateTransactionException": {
                    "value": {
                      "error": {
                        "code": 103104,
                        "message": "The Web3 transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/tx/withdrawal": {
      "post": {
        "operationId": "eth-staking-withdrawal",
        "summary": "Prepare Withdrawal Transaction",
        "description": "Construct a serialized transaction to initiate the withdrawal process for active validators, utilizing the functionalities of P2P smart contract.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnstakeEthereumRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidDepositDataSignException"
                        },
                        {
                          "$ref": "#/components/schemas/PubkeyDoNotExistsException"
                        },
                        {
                          "$ref": "#/components/schemas/ValidatorNotActiveException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidDepositDataSignException": {
                    "value": {
                      "error": {
                        "code": 103113,
                        "message": "The withdrawal transaction could not be created because the signature of the deposit data is invalid. Please re-sign the serialized transaction by following https://docs.p2p.org/docs/signing-transaction-eth.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "PubkeyDoNotExistsException": {
                    "value": {
                      "error": {
                        "code": 103105,
                        "message": "The withdrawal transaction could not be created because the validator public keys provided are invalid or do not exist.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "ValidatorNotActiveException": {
                    "value": {
                      "error": {
                        "code": 103106,
                        "message": "The withdrawal transaction could not be created because one or more validators are not participating currently in the validator activities.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Web3CreateTransactionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/WithdrawalTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Web3CreateTransactionException": {
                    "value": {
                      "error": {
                        "code": 103104,
                        "message": "The Web3 transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "WithdrawalTransactionException": {
                    "value": {
                      "error": {
                        "code": 103107,
                        "message": "The withdrawal transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/tx/convert-tx-data": {
      "post": {
        "operationId": "eth-staking-convert-tx-data",
        "summary": "Change Transaction Format",
        "description": "Convert the transaction data obtained from the Staking API into a JSON format compatible with the Gnosis Safe transaction builder.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EthereumConvertTxDataRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidDepositDataSignException"
                        },
                        {
                          "$ref": "#/components/schemas/PubkeyDoNotExistsException"
                        },
                        {
                          "$ref": "#/components/schemas/ValidatorNotActiveException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidDepositDataSignException": {
                    "value": {
                      "error": {
                        "code": 103113,
                        "message": "The withdrawal transaction could not be created because the signature of the deposit data is invalid. Please re-sign the serialized transaction by following https://docs.p2p.org/docs/signing-transaction-eth.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "PubkeyDoNotExistsException": {
                    "value": {
                      "error": {
                        "code": 103105,
                        "message": "The withdrawal transaction could not be created because the validator public keys provided are invalid or do not exist.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "ValidatorNotActiveException": {
                    "value": {
                      "error": {
                        "code": 103106,
                        "message": "The withdrawal transaction could not be created because one or more validators are not participating currently in the validator activities.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Web3CreateTransactionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/WithdrawalTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Web3CreateTransactionException": {
                    "value": {
                      "error": {
                        "code": 103104,
                        "message": "The Web3 transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "WithdrawalTransactionException": {
                    "value": {
                      "error": {
                        "code": 103107,
                        "message": "The withdrawal transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/validator/status": {
      "post": {
        "operationId": "eth-validator-status",
        "summary": "Get Validator Status",
        "description": "Check the status of the validators.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatorsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/ValidatorsResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/vem/create": {
      "post": {
        "operationId": "eth-vem-create",
        "summary": "Create VEM Request",
        "description": "Set up a VEM request.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVemRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/VemIdAlreadyExistException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "VemIdAlreadyExistException": {
                    "value": {
                      "error": {
                        "code": 112103,
                        "message": "The VEM request could not be created because the VEM ID specified already exists.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/VemCreateException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "VemCreateException": {
                    "value": {
                      "error": {
                        "code": 112101,
                        "message": "The VEM request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/vem/status/{id}": {
      "get": {
        "operationId": "eth-vem-status",
        "summary": "Get VEM Request Status",
        "description": "Check the status of the VEM request.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the VEM request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/VemResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/VemNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "VemNotFoundException": {
                    "value": {
                      "error": {
                        "code": 112102,
                        "message": "The VEM request ID provided could not be found. Please specify the correct UUID.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/VemGetException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "VemGetException": {
                    "value": {
                      "error": {
                        "code": 112104,
                        "message": "The status of the VEM request could not be obtained because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/eigenlayer/operator": {
      "get": {
        "operationId": "eth-eigen-operator-list",
        "summary": "Get Operator List",
        "description": "Get the list of all EigenLayer node operators.",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetListEigenOperatorResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/EigenOperatorGetListException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "EigenOperatorGetListException": {
                    "value": {
                      "error": {
                        "code": 103120,
                        "message": "The list of node operators could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "EigenLayer"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/eigenlayer/tx/delegate-to": {
      "post": {
        "operationId": "eth-eigen-delegate-to",
        "summary": "Prepare Delegate Restake Transaction",
        "description": "Construct a serialized transaction to delegate the restaked amount of tokens to a node operator.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateToRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Web3CreateTransactionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Web3CreateTransactionException": {
                    "value": {
                      "error": {
                        "code": 103104,
                        "message": "The Web3 transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "EigenLayer"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/eigenlayer/tx/verify-withdrawal-credentials": {
      "post": {
        "operationId": "eth-eigen-verify-withdrawal-credentials",
        "summary": "Verify Withdrawal Credentials",
        "description": "Construct a serialized transaction to verify that the withdrawal credentials have been pointed at the EigenPod address.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyWithdrawalCredentialsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/WithdrawalCredentialsNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "WithdrawalCredentialsNotFoundException": {
                    "value": {
                      "error": {
                        "code": 103201,
                        "message": "The verify withdrawal credentials transaction could not be obtained because the activate restake request is not found. Please create an activate restake request by calling https://docs.p2p.org/reference/eth-eigen-verify-withdrawal-credentials-request.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/WithdrawalCredentialsException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "WithdrawalCredentialsException": {
                    "value": {
                      "error": {
                        "code": 103200,
                        "message": "The activate restake request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "EigenLayer"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/eigenlayer/tx/create-pod": {
      "post": {
        "operationId": "eth-eigen-create-pod",
        "summary": "Create EigenPod",
        "description": "Construct a serialized transaction to initiate the process of creating the EigenPod address.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Web3CreateTransactionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Web3CreateTransactionException": {
                    "value": {
                      "error": {
                        "code": 103104,
                        "message": "The Web3 transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "EigenLayer"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/eigenlayer/tx/start-checkpoint": {
      "post": {
        "operationId": "eth-eigen-start-checkpoint",
        "summary": "Start Checkpoint",
        "description": "Construct a serialized transaction to start a checkpoint, initiating the process of proving the validator with verified withdrawal credentials is still active.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EigenPodOwnerAddressRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Web3CreateTransactionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Web3CreateTransactionException": {
                    "value": {
                      "error": {
                        "code": 103104,
                        "message": "The Web3 transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "EigenLayer"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/eigenlayer/tx/verify-checkpoint-proofs": {
      "post": {
        "operationId": "eth-eigen-verify-checkpoint-proofs",
        "summary": "Verify Checkpoint Proofs",
        "description": "Construct a serialized transaction to verify the proofs of a checkpoint.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyCheckpointProofsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Web3CreateTransactionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Web3CreateTransactionException": {
                    "value": {
                      "error": {
                        "code": 103104,
                        "message": "The Web3 transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "EigenLayer"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/eigenlayer/tx/undelegate": {
      "post": {
        "operationId": "eth-eigen-undelegate",
        "summary": "Prepare Undelegate Transaction",
        "description": "Construct a serialized transaction to undelegate the restaked amount of tokens from a node operator.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EigenPodOwnerAddressRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Web3CreateTransactionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Web3CreateTransactionException": {
                    "value": {
                      "error": {
                        "code": 103104,
                        "message": "The Web3 transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "EigenLayer"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/eigenlayer/tx/queue-withdrawals": {
      "post": {
        "operationId": "eth-eigen-queue-withdrawals",
        "summary": "Queue Withdrawals",
        "description": "Construct a serialized transaction to queue withdrawals.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueueWithdrawalsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Web3CreateTransactionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Web3CreateTransactionException": {
                    "value": {
                      "error": {
                        "code": 103104,
                        "message": "The Web3 transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "EigenLayer"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/eigenlayer/tx/complete-queued-withdrawals": {
      "post": {
        "operationId": "eth-eigen-complete-queued-withdrawals",
        "summary": "Complete Queued Withdrawals",
        "description": "Construct a serialized transaction to complete queued withdrawals.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteQueuedWithdrawalsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Web3CreateTransactionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Web3CreateTransactionException": {
                    "value": {
                      "error": {
                        "code": 103104,
                        "message": "The Web3 transaction could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "EigenLayer"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/tx/status/{blockHash}/{transactionHash}": {
      "get": {
        "operationId": "polkadot-transaction-status",
        "summary": "Get Transaction Status",
        "description": "Check the status of the transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          },
          {
            "name": "blockHash",
            "required": true,
            "in": "path",
            "description": "Block hash in which the transaction was included.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionHash",
            "required": true,
            "in": "path",
            "description": "Extrinsic transaction hash.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/SignTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 107119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TransactionNotFoundException": {
                    "value": {
                      "error": {
                        "code": 107108,
                        "message": "The transaction could not be found. Please specify the correct transaction data.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/StatusException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "StatusException": {
                    "value": {
                      "error": {
                        "code": 107122,
                        "message": "The transaction status could not be obtained because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/tx/send": {
      "post": {
        "operationId": "polkadot-transaction-send",
        "summary": "Broadcast Transaction",
        "description": "Broadcast transaction to the Polkadot network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/SignTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/ExtrinsicCouldNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/ExtrinsicCouldNotDryRunException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 107119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "ExtrinsicCouldNotFoundException": {
                    "value": {
                      "error": {
                        "code": 107116,
                        "message": "The extrinsic could not be found. Please specify the correct transaction data.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "ExtrinsicCouldNotDryRunException": {
                    "value": {
                      "error": {
                        "code": 107125,
                        "message": "The transaction has not been run in dry mode.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SendException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionUsurpedException"
                        },
                        {
                          "$ref": "#/components/schemas/CouldNotGetStateException"
                        },
                        {
                          "$ref": "#/components/schemas/ExtrinsicCouldNotSendException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionFinalityTimeoutException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionDroppedException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SendException": {
                    "value": {
                      "error": {
                        "code": 107123,
                        "message": "The transaction could not be broadcasted because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TransactionUsurpedException": {
                    "value": {
                      "error": {
                        "code": 107113,
                        "message": "The transaction has not been broadcasted because it was rejected by the network as usurped.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "CouldNotGetStateException": {
                    "value": {
                      "error": {
                        "code": 107117,
                        "message": "The transaction has not been broadcasted because the status of the extrinsic could not be obtained.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "ExtrinsicCouldNotSendException": {
                    "value": {
                      "error": {
                        "code": 107118,
                        "message": "The transaction has not been broadcasted because it was rejected by the server.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TransactionInvalidException": {
                    "value": {
                      "error": {
                        "code": 107112,
                        "message": "The transaction has not been broadcasted because it was rejected by the network as invalid.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TransactionFinalityTimeoutException": {
                    "value": {
                      "error": {
                        "code": 107114,
                        "message": "The transaction has not been broadcasted because it was rejected by the network due to timeout.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TransactionDroppedException": {
                    "value": {
                      "error": {
                        "code": 107115,
                        "message": "The transaction has not been broadcasted because it was rejected by the network as dropped.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/tx": {
      "get": {
        "operationId": "polkadot-transaction-list",
        "summary": "List Broadcasted Transactions",
        "description": "Return a list of all broadcasted transactions.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetListTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TransactionGetListException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TransactionGetListException": {
                    "value": {
                      "error": {
                        "code": 107124,
                        "message": "The list of broadcasted transactions could not be obtained because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/account/add": {
      "post": {
        "operationId": "polkadot-account-add",
        "summary": "Add Staking Proxy Account",
        "description": "Adding a staking proxy account allows users to utilize an account less frequently while maintaining active participation in the Polkadot network based on the weight of tokens held within that account.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 107101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Polkadot address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 107119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/AddException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "AddException": {
                    "value": {
                      "error": {
                        "code": 107120,
                        "message": "The proxy account address could not be added because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "error": {
                        "code": 107102,
                        "message": "The request could not be performed because the amount of tokens on account is insufficient. Please check that the balance is more than undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/account/remove": {
      "post": {
        "operationId": "polkadot-account-remove",
        "summary": "Remove Staking Proxy Account",
        "description": "Removing a proxy account involves discontinuing the delegation of staking responsibilities from one account to another. This action allows users to regain direct control over their staking activities and tokens in the Polkadot network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/ProxyNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 107101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Polkadot address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 107119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "ProxyNotFoundException": {
                    "value": {
                      "error": {
                        "code": 107107,
                        "message": "The proxy account address provided could not be found. Please specify the correct address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/RemoveException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "RemoveException": {
                    "value": {
                      "error": {
                        "code": 107121,
                        "message": "The proxy account address could not be removed because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/bond": {
      "post": {
        "operationId": "polkadot-staking-bond",
        "summary": "Create Bond Request",
        "description": "Creating a bond request in exchange for some other benefit.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BondRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PolkadotUnsignedBondTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/StakeAmountTooSmallException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 107101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Polkadot address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 107119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "StakeAmountTooSmallException": {
                    "value": {
                      "error": {
                        "code": 107106,
                        "message": "The request could not be performed because the bond amount is too small. Please check that the bond amount is more than undefined and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "error": {
                        "code": 107102,
                        "message": "The request could not be performed because the amount of tokens on account is insufficient. Please check that the balance is more than undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/BondException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "BondException": {
                    "value": {
                      "error": {
                        "code": 107126,
                        "message": "The bond request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/bond-extra": {
      "post": {
        "operationId": "polkadot-staking-bondExtra",
        "summary": "Create Extra Bond Request",
        "description": "Creating an extra bond request in exchange for some other benefit.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BondExtraRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PolkadotUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 107101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Polkadot address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 107119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "error": {
                        "code": 107102,
                        "message": "The request could not be performed because the amount of tokens on account is insufficient. Please check that the balance is more than undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/BondExtraException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "BondExtraException": {
                    "value": {
                      "error": {
                        "code": 107127,
                        "message": "The extra bond request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/rebond": {
      "post": {
        "operationId": "polkadot-staking-rebond",
        "summary": "Create Rebond Request",
        "description": "Rebonding tokens within the Polkadot network involves the process of re-staking or redelegating tokens that were previously withdrawn from the staking mechanism.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RebondRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PolkadotUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/LedgerNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/NotEnoughPendingAmountException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongControllerException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 107101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Polkadot address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 107119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "LedgerNotFoundException": {
                    "value": {
                      "error": {
                        "code": 107104,
                        "message": "The request could not be performed because the ledger address could not be found.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NotEnoughPendingAmountException": {
                    "value": {
                      "error": {
                        "code": 107109,
                        "message": "The request could not be performed because the requested amount exceeds the unbonded amount.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "WrongControllerException": {
                    "value": {
                      "error": {
                        "code": 107105,
                        "message": "The request could not be performed because the controller address does not correspond to the provided one.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/RebondException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "RebondException": {
                    "value": {
                      "error": {
                        "code": 107129,
                        "message": "The rebond request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/nominate": {
      "get": {
        "operationId": "polkadot-staking-nominate-list",
        "summary": "Get List Validators",
        "description": "Return a list of P2P.org public validators to nominate.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetListNominateResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "polkadot-staking-nominate",
        "summary": "Create Nomination Request",
        "description": "Submitting nomination is the action of choosing validators within the Polkadot network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NominateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/NominateTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 107101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Polkadot address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 107119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NominateException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NominateException": {
                    "value": {
                      "error": {
                        "code": 107128,
                        "message": "The nomination request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/unbond": {
      "post": {
        "operationId": "polkadot-staking-unbond",
        "summary": "Create Unbond Request",
        "description": "Unbonding tokens within the Polkadot network refers to the process of withdrawing or releasing tokens that were previously staked or bonded.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnbondRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PolkadotUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/NotEnoughBonedAmountException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 107101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Polkadot address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 107119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NotEnoughBonedAmountException": {
                    "value": {
                      "error": {
                        "code": 107110,
                        "message": "The request could not be performed because the requested amount of tokens to unbond exceeds the bonded amount. Please specify the correct amount.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/UnbondException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "UnbondException": {
                    "value": {
                      "error": {
                        "code": 107130,
                        "message": "The unbond request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/withdraw-unbonded": {
      "post": {
        "operationId": "polkadot-staking-withdrawUnbonded",
        "summary": "Withdraw Unbonded Request",
        "description": "Withdrawing tokens within the Polkadot network that were previously unbonded.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawUnbondedRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/WithdrawalTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/BondNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongControllerException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 107101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Polkadot address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 107119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "BondNotFoundException": {
                    "value": {
                      "error": {
                        "code": 107103,
                        "message": "The transaction could not be found. Please specify the correct transaction data.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "WrongControllerException": {
                    "value": {
                      "error": {
                        "code": 107105,
                        "message": "The request could not be performed because the controller address does not correspond to the provided one.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/WithdrawUnbondedException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "WithdrawUnbondedException": {
                    "value": {
                      "error": {
                        "code": 107131,
                        "message": "The withdrawal request could not be performed because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/pool/bond": {
      "post": {
        "operationId": "polkadot-pool-bond",
        "summary": "Create Bond Request",
        "description": "Creating a bond request on the Polkadot nomination pool where a user has membership in exchange for some other benefit.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PoolBondRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PolkadotUnsignedPoolBondTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        },
                        {
                          "$ref": "#/components/schemas/PolkadotPoolDoesNotExistsException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 107101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Polkadot address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 107119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "error": {
                        "code": 107102,
                        "message": "The request could not be performed because the amount of tokens on account is insufficient. Please check that the balance is more than undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "PolkadotPoolDoesNotExistsException": {
                    "value": {
                      "error": {
                        "code": 107139,
                        "message": "The request could not be performed because the ID provided is not found. Please specify the correct ID of the nomination pool.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/BondException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "BondException": {
                    "value": {
                      "error": {
                        "code": 107132,
                        "message": "The bond request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/pool/set-claim-permission": {
      "post": {
        "operationId": "polkadot-pool-set-claim-permission",
        "summary": "Create Claim Permission Request",
        "description": "Creating a claim permission request allows users having membership in the Polkadot nomination pool to grant permission to any other pool member account for claiming, bonding or withdrawing rewards on behalf of the user.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetClaimPermissionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 107101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Polkadot address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 107119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "error": {
                        "code": 107102,
                        "message": "The request could not be performed because the amount of tokens on account is insufficient. Please check that the balance is more than undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SetClaimPermissionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SetClaimPermissionException": {
                    "value": {
                      "error": {
                        "code": 107138,
                        "message": "The set claim permission request could not be performed because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/pool/bond-extra": {
      "post": {
        "operationId": "polkadot-pool-bond-extra",
        "summary": "Create Extra Bond Request",
        "description": "Creating an extra bond request on the Polkadot nomination pool where a user has membership in exchange for some other benefit.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PoolBondExtraRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PolkadotUnsignedPoolTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 107101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Polkadot address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 107119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "error": {
                        "code": 107102,
                        "message": "The request could not be performed because the amount of tokens on account is insufficient. Please check that the balance is more than undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/BondExtraException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "BondExtraException": {
                    "value": {
                      "error": {
                        "code": 107133,
                        "message": "The extra bond request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/pool/unbond": {
      "post": {
        "operationId": "polkadot-pool-unbond",
        "summary": "Create Unbond Request",
        "description": "Unbonding tokens within a Polkadot nomination pool where a user has membership refers to the process of withdrawing or releasing tokens that were previously staked or bonded.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PoolUnbondRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PolkadotUnsignedPoolTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/NotEnoughBonedAmountException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 107101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Polkadot address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 107119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NotEnoughBonedAmountException": {
                    "value": {
                      "error": {
                        "code": 107110,
                        "message": "The request could not be performed because the requested amount of tokens to unbond exceeds the bonded amount. Please specify the correct amount.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/UnbondException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "UnbondException": {
                    "value": {
                      "error": {
                        "code": 107135,
                        "message": "The unbond request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/pool/withdraw-unbonded": {
      "post": {
        "operationId": "polkadot-pool-withdraw-unbonded",
        "summary": "Withdraw Unbonded Request",
        "description": "Withdrawing tokens within the Polkadot network that were previously unbonded and the following exiting the nomination pool.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PoolWithdrawUnbondedRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PoolWithdrawalTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/BondNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongControllerException"
                        },
                        {
                          "$ref": "#/components/schemas/PolkadotPoolDoesNotExistsException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 107101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Polkadot address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 107119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "BondNotFoundException": {
                    "value": {
                      "error": {
                        "code": 107103,
                        "message": "The transaction could not be found. Please specify the correct transaction data.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "WrongControllerException": {
                    "value": {
                      "error": {
                        "code": 107105,
                        "message": "The request could not be performed because the controller address does not correspond to the provided one.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "PolkadotPoolDoesNotExistsException": {
                    "value": {
                      "error": {
                        "code": 107139,
                        "message": "The request could not be performed because the ID provided is not found. Please specify the correct ID of the nomination pool.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/WithdrawUnbondedException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "WithdrawUnbondedException": {
                    "value": {
                      "error": {
                        "code": 107136,
                        "message": "The withdrawal request could not be performed because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/pool/claim-payout": {
      "post": {
        "operationId": "polkadot-pool-claim-payout",
        "summary": "Create Claim Payout Request",
        "description": "Creating a claim payout request refers to the process of issuing a payout from the validator to the nomination pool members for further rewards claiming.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimPayoutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/BondNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongControllerException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 107101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Polkadot address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 107119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "BondNotFoundException": {
                    "value": {
                      "error": {
                        "code": 107103,
                        "message": "The transaction could not be found. Please specify the correct transaction data.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "WrongControllerException": {
                    "value": {
                      "error": {
                        "code": 107105,
                        "message": "The request could not be performed because the controller address does not correspond to the provided one.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ClaimPayoutException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ClaimPayoutException": {
                    "value": {
                      "error": {
                        "code": 107137,
                        "message": "The claim payout request could not be performed because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/avail/{network}/transaction/status/{blockHash}/{transactionHash}": {
      "get": {
        "operationId": "avail-transaction-status",
        "summary": "Get Transaction Status",
        "description": "Check the status of the transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          },
          {
            "name": "blockHash",
            "required": true,
            "in": "path",
            "description": "Block hash in which the transaction was included.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionHash",
            "required": true,
            "in": "path",
            "description": "Extrinsic transaction hash.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AvailSignTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 119119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TransactionNotFoundException": {
                    "value": {
                      "error": {
                        "code": 119108,
                        "message": "The transaction could not be found. Please specify the correct transaction data.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/StatusException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "StatusException": {
                    "value": {
                      "error": {
                        "code": 119122,
                        "message": "The transaction status could not be obtained because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Avail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/avail/{network}/transaction/send": {
      "post": {
        "operationId": "avail-transaction-send",
        "summary": "Broadcast Transaction",
        "description": "Broadcast transaction to the Avail network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailSendRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AvailSignTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/ExtrinsicCouldNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/ExtrinsicCouldNotDryRunException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 119119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "ExtrinsicCouldNotFoundException": {
                    "value": {
                      "error": {
                        "code": 119116,
                        "message": "The extrinsic could not be found. Please specify the correct transaction data.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "ExtrinsicCouldNotDryRunException": {
                    "value": {
                      "error": {
                        "code": 119125,
                        "message": "The transaction has not been run in dry mode",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SendException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionUsurpedException"
                        },
                        {
                          "$ref": "#/components/schemas/CouldNotGetStateException"
                        },
                        {
                          "$ref": "#/components/schemas/ExtrinsicCouldNotSendException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionFinalityTimeoutException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionDroppedException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SendException": {
                    "value": {
                      "error": {
                        "code": 119123,
                        "message": "The transaction could not be broadcasted because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TransactionUsurpedException": {
                    "value": {
                      "error": {
                        "code": 119113,
                        "message": "The transaction has not been broadcasted because it was rejected by the network as usurped.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "CouldNotGetStateException": {
                    "value": {
                      "error": {
                        "code": 119117,
                        "message": "The transaction has not been broadcasted because the status of the extrinsic could not be obtained.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "ExtrinsicCouldNotSendException": {
                    "value": {
                      "error": {
                        "code": 119118,
                        "message": "The transaction has not been broadcasted because it was rejected by the server.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TransactionInvalidException": {
                    "value": {
                      "error": {
                        "code": 119112,
                        "message": "The transaction has not been broadcasted because it was rejected by the network as invalid.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TransactionFinalityTimeoutException": {
                    "value": {
                      "error": {
                        "code": 119114,
                        "message": "The transaction has not been broadcasted because it was rejected by the network due to timeout.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TransactionDroppedException": {
                    "value": {
                      "error": {
                        "code": 119115,
                        "message": "The transaction has not been broadcasted because it was rejected by the network as dropped.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Avail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/avail/{network}/transaction": {
      "get": {
        "operationId": "avail-transaction-list",
        "summary": "List Broadcasted Transactions",
        "description": "Return a list of all broadcasted transactions.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AvailGetListTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TransactionGetListException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TransactionGetListException": {
                    "value": {
                      "error": {
                        "code": 119124,
                        "message": "The list of broadcasted transactions could not be obtained because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Avail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/avail/{network}/account/add": {
      "post": {
        "operationId": "avail-account-add",
        "summary": "Add Staking Proxy Account",
        "description": "Adding a staking proxy account allows users to utilize an account less frequently while maintaining active participation in the Avail network based on the weight of tokens held within that account.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailAddRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AvailTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 119101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Avail address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 119119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/AddException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "AddException": {
                    "value": {
                      "error": {
                        "code": 119120,
                        "message": "The proxy account address could not be added because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "error": {
                        "code": 119102,
                        "message": "The request could not be performed because the amount of tokens on account is insufficient. Please check that the balance is more than undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Avail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/avail/{network}/account/remove": {
      "post": {
        "operationId": "avail-account-remove",
        "summary": "Remove Staking Proxy Account",
        "description": "Removing a proxy account involves discontinuing the delegation of staking responsibilities from one account to another. This action allows users to regain direct control over their staking activities and tokens in the Avail network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailRemoveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AvailTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/ProxyNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 119101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Avail address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 119119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "ProxyNotFoundException": {
                    "value": {
                      "error": {
                        "code": 119107,
                        "message": "The proxy account address provided could not be found. Please specify the correct address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/RemoveException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "RemoveException": {
                    "value": {
                      "error": {
                        "code": 119121,
                        "message": "The proxy account address could not be removed because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Avail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/avail/{network}/staking/direct/stake": {
      "post": {
        "operationId": "avail-staking-stake",
        "summary": "Create Stake Request",
        "description": "Creating a stake request in exchange for some other benefit.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailStakeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AvailUnsignedStakeTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/StakeAmountTooSmallException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 119101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Avail address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 119119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "StakeAmountTooSmallException": {
                    "value": {
                      "error": {
                        "code": 119106,
                        "message": "The request could not be performed because the bond amount is too small. Please check that the bond amount is more than undefined and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "error": {
                        "code": 119102,
                        "message": "The request could not be performed because the amount of tokens on account is insufficient. Please check that the balance is more than undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/StakeException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "StakeException": {
                    "value": {
                      "error": {
                        "code": 119126,
                        "message": "The bond request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Avail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/avail/{network}/staking/direct/bond-extra": {
      "post": {
        "operationId": "avail-staking-bondExtra",
        "summary": "Create Extra Bond Request",
        "description": "Creating an extra bond request in exchange for some other benefit.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailBondExtraRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AvailUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 119101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Avail address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 119119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "error": {
                        "code": 119102,
                        "message": "The request could not be performed because the amount of tokens on account is insufficient. Please check that the balance is more than undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/BondExtraException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "BondExtraException": {
                    "value": {
                      "error": {
                        "code": 119127,
                        "message": "The extra bond request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Avail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/avail/{network}/staking/direct/rebond": {
      "post": {
        "operationId": "avail-staking-rebond",
        "summary": "Create Rebond Request",
        "description": "Rebonding tokens within the Avail network involves the process of re-staking or redelegating tokens that were previously withdrawn from the staking mechanism.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailRebondRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AvailUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/LedgerNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/NotEnoughPendingAmountException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongControllerException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 119101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Avail address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 119119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "LedgerNotFoundException": {
                    "value": {
                      "error": {
                        "code": 119104,
                        "message": "The request could not be performed because the ledger address could not be found.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NotEnoughPendingAmountException": {
                    "value": {
                      "error": {
                        "code": 119109,
                        "message": "The request could not be performed because the requested amount exceeds the unbonded amount.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "WrongControllerException": {
                    "value": {
                      "error": {
                        "code": 119105,
                        "message": "The request could not be performed because the controller address does not correspond to the provided one.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/RebondException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "RebondException": {
                    "value": {
                      "error": {
                        "code": 119129,
                        "message": "The rebond request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Avail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/avail/{network}/staking/direct/validators": {
      "get": {
        "operationId": "avail-staking-nominate-list",
        "summary": "Get List Validators",
        "description": "Return a list of P2P.org public validators to nominate.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetListNominateResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Avail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/avail/{network}/staking/direct/unbond": {
      "post": {
        "operationId": "avail-staking-unbond",
        "summary": "Create Unbond Request",
        "description": "Unbonding tokens within the Avail network refers to the process of withdrawing or releasing tokens that were previously staked or bonded.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailUnbondRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AvailUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/NotEnoughBonedAmountException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 119101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Avail address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 119119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NotEnoughBonedAmountException": {
                    "value": {
                      "error": {
                        "code": 119110,
                        "message": "The request could not be performed because the requested amount of tokens to unbond exceeds the bonded amount. Please specify the correct amount.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/UnbondException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "UnbondException": {
                    "value": {
                      "error": {
                        "code": 119130,
                        "message": "The unbond request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Avail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/avail/{network}/staking/direct/withdraw-unbonded": {
      "post": {
        "operationId": "avail-staking-withdrawUnbonded",
        "summary": "Withdraw Unbonded Request",
        "description": "Withdrawing tokens within the Avail network that were previously unbonded.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailWithdrawUnbondedRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AvailWithdrawalTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/BondNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongControllerException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 119101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Avail address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 119119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "BondNotFoundException": {
                    "value": {
                      "error": {
                        "code": 119103,
                        "message": "The transaction could not be found. Please specify the correct transaction data.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "WrongControllerException": {
                    "value": {
                      "error": {
                        "code": 119105,
                        "message": "The request could not be performed because the controller address does not correspond to the provided one.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/WithdrawUnbondedException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "WithdrawUnbondedException": {
                    "value": {
                      "error": {
                        "code": 119131,
                        "message": "The withdrawal request could not be performed because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Avail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/avail/{network}/staking/pool/bond": {
      "post": {
        "operationId": "avail-pool-bond",
        "summary": "Create Bond Request",
        "description": "Creating a bond request on the Avail nomination pool where a user has membership in exchange for some other benefit.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailPoolBondRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AvailUnsignedPoolBondTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        },
                        {
                          "$ref": "#/components/schemas/AvailPoolDoesNotExistsException"
                        },
                        {
                          "$ref": "#/components/schemas/StakeAmountTooSmallException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 119101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Avail address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 119119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "error": {
                        "code": 119102,
                        "message": "The request could not be performed because the amount of tokens on account is insufficient. Please check that the balance is more than undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AvailPoolDoesNotExistsException": {
                    "value": {
                      "error": {
                        "code": 119139,
                        "message": "The request could not be performed because the ID provided is not found. Please specify the correct ID of the nomination pool.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "StakeAmountTooSmallException": {
                    "value": {
                      "error": {
                        "code": 119106,
                        "message": "The request could not be performed because the bond amount is too small. Please check that the bond amount is more than undefined and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/BondException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "BondException": {
                    "value": {
                      "error": {
                        "code": 119132,
                        "message": "The bond request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Avail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/avail/{network}/staking/pool/set-claim-permission": {
      "post": {
        "operationId": "avail-pool-set-claim-permission",
        "summary": "Create Claim Permission Request",
        "description": "Creating a claim permission request allows users having membership in the Avail nomination pool to grant permission to any other pool member account for claiming, bonding or withdrawing rewards on behalf of the user.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailSetClaimPermissionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AvailTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 119101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Avail address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 119119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "error": {
                        "code": 119102,
                        "message": "The request could not be performed because the amount of tokens on account is insufficient. Please check that the balance is more than undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SetClaimPermissionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SetClaimPermissionException": {
                    "value": {
                      "error": {
                        "code": 119138,
                        "message": "The set claim permission request could not be performed because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Avail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/avail/{network}/staking/pool/bond-extra": {
      "post": {
        "operationId": "avail-pool-bond-extra",
        "summary": "Create Extra Bond Request",
        "description": "Creating an extra bond request on the Avail nomination pool where a user has membership in exchange for some other benefit.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailPoolBondExtraRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AvailUnsignedPoolTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 119101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Avail address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 119119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "error": {
                        "code": 119102,
                        "message": "The request could not be performed because the amount of tokens on account is insufficient. Please check that the balance is more than undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/BondExtraException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "BondExtraException": {
                    "value": {
                      "error": {
                        "code": 119133,
                        "message": "The extra bond request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Avail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/avail/{network}/staking/pool/unbond": {
      "post": {
        "operationId": "avail-pool-unbond",
        "summary": "Create Unbond Request",
        "description": "Unbonding tokens within a Avail nomination pool where a user has membership refers to the process of withdrawing or releasing tokens that were previously staked or bonded.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailPoolUnbondRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AvailUnsignedPoolTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/NotEnoughBonedAmountException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 119101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Avail address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 119119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NotEnoughBonedAmountException": {
                    "value": {
                      "error": {
                        "code": 119110,
                        "message": "The request could not be performed because the requested amount of tokens to unbond exceeds the bonded amount. Please specify the correct amount.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/UnbondException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "UnbondException": {
                    "value": {
                      "error": {
                        "code": 119135,
                        "message": "The unbond request could not be created because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Avail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/avail/{network}/staking/pool/withdraw-unbonded": {
      "post": {
        "operationId": "avail-pool-withdraw-unbonded",
        "summary": "Withdraw Unbonded Request",
        "description": "Withdrawing tokens within the Avail network that were previously unbonded and the following exiting the nomination pool.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailPoolWithdrawUnbondedRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AvailPoolWithdrawalTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/BondNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongControllerException"
                        },
                        {
                          "$ref": "#/components/schemas/AvailPoolDoesNotExistsException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 119101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Avail address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 119119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "BondNotFoundException": {
                    "value": {
                      "error": {
                        "code": 119103,
                        "message": "The transaction could not be found. Please specify the correct transaction data.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "WrongControllerException": {
                    "value": {
                      "error": {
                        "code": 119105,
                        "message": "The request could not be performed because the controller address does not correspond to the provided one.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AvailPoolDoesNotExistsException": {
                    "value": {
                      "error": {
                        "code": 119139,
                        "message": "The request could not be performed because the ID provided is not found. Please specify the correct ID of the nomination pool.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/WithdrawUnbondedException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "WithdrawUnbondedException": {
                    "value": {
                      "error": {
                        "code": 119136,
                        "message": "The withdrawal request could not be performed because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Avail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/avail/{network}/staking/pool/claim-payout": {
      "post": {
        "operationId": "avail-pool-claim-payout",
        "summary": "Create Claim Payout Request",
        "description": "Creating a claim payout request refers to the process of issuing a payout from the validator to the nomination pool members for further rewards claiming.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailPoolClaimPayoutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AvailTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/BondNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongControllerException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "error": {
                        "code": 119101,
                        "message": "The request could not be performed because the address undefined provided is invalid. Please specify the correct Avail address.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 119119,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "BondNotFoundException": {
                    "value": {
                      "error": {
                        "code": 119103,
                        "message": "The transaction could not be found. Please specify the correct transaction data.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "WrongControllerException": {
                    "value": {
                      "error": {
                        "code": 119105,
                        "message": "The request could not be performed because the controller address does not correspond to the provided one.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ClaimPayoutException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ClaimPayoutException": {
                    "value": {
                      "error": {
                        "code": 119137,
                        "message": "The claim payout request could not be performed because the internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Avail"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/tx/send": {
      "post": {
        "operationId": "solana-staking-send",
        "summary": "Send Transaction",
        "description": "Send the signed transaction to the Solana network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet-beta",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/SendResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/account/staking": {
      "get": {
        "operationId": "solana-staking-get-staking-account",
        "summary": "Get Staking Account",
        "description": "Return information about staking accounts.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet-beta",
                "testnet"
              ],
              "type": "string"
            }
          },
          {
            "name": "stakeAuthorities",
            "required": false,
            "in": "query",
            "description": "List of account addresses that can perform staking operations with staking accounts.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC,AaMC5y1RofbY3unyrahRzyCzsesp7rfGuaGegbAg1Hxb",
            "schema": {
              "minItems": 1,
              "maxItems": 30,
              "type": "string"
            }
          },
          {
            "name": "stakeAccounts",
            "required": false,
            "in": "query",
            "description": "List of staking account addresses.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC,AaMC5y1RofbY3unyrahRzyCzsesp7rfGuaGegbAg1Hxb",
            "schema": {
              "minItems": 1,
              "maxItems": 30,
              "type": "string"
            }
          },
          {
            "name": "withdrawAuthorities",
            "required": false,
            "in": "query",
            "description": "List of account addresses that can perform withdrawal operation with staking accounts.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC,AaMC5y1RofbY3unyrahRzyCzsesp7rfGuaGegbAg1Hxb",
            "schema": {
              "minItems": 1,
              "maxItems": 30,
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Staking account status: `active`, `inactive`, `activating`, `deactivating`.",
            "example": "active",
            "schema": {
              "enum": [
                "active",
                "inactive",
                "activating",
                "deactivating"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakingResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/account/create-nonce-account": {
      "post": {
        "operationId": "solana-create-nonce-account",
        "summary": "Create Nonce Account",
        "description": "Create a nonce account.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet-beta",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNonceAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakingResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/validator/status": {
      "get": {
        "operationId": "solana-validator-status",
        "summary": "Get Validator Status",
        "description": "Check the status of the validator's vote account.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet-beta",
                "testnet"
              ],
              "type": "string"
            }
          },
          {
            "name": "votePubkeys",
            "required": true,
            "in": "query",
            "description": "List of the validator's vote account public keys.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC,AaMC5y1RofbY3unyrahRzyCzsesp7rfGuaGegbAg1Hxb",
            "schema": {
              "minItems": 1,
              "maxItems": 30,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StatusesResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/staking/stake": {
      "post": {
        "operationId": "solana-staking-stake",
        "summary": "Create Staking Request",
        "description": "Create staking request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet-beta",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StakeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakeResult"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/staking/deactivate": {
      "post": {
        "operationId": "solana-staking-deactivate",
        "summary": "Create Deactivate Stake Request",
        "description": "Create deactivate stake request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet-beta",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeactivateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/DeactivateResult"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/staking/withdraw": {
      "post": {
        "operationId": "solana-staking-withdraw",
        "summary": "Create Withdrawal Request",
        "description": "Create withdrawal request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet-beta",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/WithdrawResult"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/staking/split": {
      "post": {
        "operationId": "solana-staking-split",
        "summary": "Create Split Request",
        "description": "Create split request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet-beta",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SplitRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakeResult"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/staking/merge": {
      "post": {
        "operationId": "solana-staking-merge",
        "summary": "Create Merge Request",
        "description": "Create merge request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet-beta",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/DeactivateResult"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/staking/delegate": {
      "post": {
        "operationId": "solana-staking-delegate",
        "summary": "Create Delegate Request",
        "description": "Create delegate request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet-beta",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/DeactivateResult"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polygon/staking/approve": {
      "post": {
        "operationId": "polygon-staking-approve",
        "summary": "Create Approve Request",
        "description": "Allow the Polygon smart contract to manage tokens.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polygon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polygon/staking/delegate": {
      "post": {
        "operationId": "polygon-staking-delegate",
        "summary": "Create Delegate Request",
        "description": "Delegate tokens to a P2P validator for staking.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polygon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polygon/staking/undelegate": {
      "post": {
        "operationId": "polygon-staking-undelegate",
        "summary": "Create Undelegate Request",
        "description": "Prepare previously staked tokens for unstaking.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UndelegateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polygon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polygon/staking/unstake": {
      "post": {
        "operationId": "polygon-staking-unstake",
        "summary": "Create Unstake Request",
        "description": "Unstake tokens.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnstakeRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polygon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polygon/staking/withdraw": {
      "post": {
        "operationId": "polygon-staking-withdraw",
        "summary": "Create Withdraw Request",
        "description": "Withdraw unstaked tokens.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polygon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polygon/staking/restake": {
      "post": {
        "operationId": "polygon-staking-restake",
        "summary": "Create Restake Request",
        "description": "Withdraw rewards in tokens and then stake them.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestakeRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polygon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polygon/staking/redelegate": {
      "post": {
        "operationId": "polygon-staking-redelegate",
        "summary": "Create Redelegate Request",
        "description": "Redelegate tokens from another validator.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedelegateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polygon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polygon/transaction/send": {
      "post": {
        "operationId": "polygon-transaction-send",
        "summary": "Broadcast Transaction",
        "description": "Broadcast a signed transaction to the Polygon network.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendTransactionDtoRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polygon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/babylon-btc/{network}/staking/stake": {
      "post": {
        "operationId": "babylon-stake",
        "summary": "Create Staking Request",
        "description": "Create staking request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Babylon network:</p><ul><li>`mainnet` — Babylon main production environment and Bitcoin mainnet (only locking BTC is currently available).</li><li>`testnet` — Babylon testing environment and Bitcoin testnet called sigNet.</li></ul>",
            "schema": {
              "enum": [
                "testnet",
                "mainnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StakeRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakeResponseDto"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidAddressException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 120100,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidAddressException": {
                    "value": {
                      "error": {
                        "code": 120104,
                        "message": "The provided address undefined is invalid.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Babylon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/babylon-btc/{network}/staking/withdrawal": {
      "post": {
        "operationId": "babylon-withdrawal",
        "summary": "Create Withdrawal Request",
        "description": "Withdraw staked assets within the Bitcoin network, the time-lock period for those has expired or those that were previously unbonded for early withdrawal.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Babylon network:</p><ul><li>`mainnet` — Babylon main production environment and Bitcoin mainnet (only locking BTC is currently available).</li><li>`testnet` — Babylon testing environment and Bitcoin testnet called sigNet.</li></ul>",
            "schema": {
              "enum": [
                "testnet",
                "mainnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawalRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/WithdrawalResponseDto"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 120100,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "TransactionNotFoundException": {
                    "value": {
                      "error": {
                        "code": 120100,
                        "message": "The requested transaction was not found.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Babylon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/babylon-btc/{network}/staking/unstake": {
      "post": {
        "operationId": "babylon-unstake",
        "summary": "Create Unstake Request",
        "description": "Unstake locked assets within the Bitcoin network before the expiration of their time-lock period.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Babylon network:</p><ul><li>`mainnet` — Babylon main production environment and Bitcoin mainnet (only locking BTC is currently available).</li><li>`testnet` — Babylon testing environment and Bitcoin testnet called sigNet.</li></ul>",
            "schema": {
              "enum": [
                "testnet",
                "mainnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnstakeRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UnstakeResponseDto"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionIsNotStake"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 120100,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "TransactionIsNotStake": {
                    "value": {
                      "error": {
                        "code": 120102,
                        "message": "The requested transaction is not a stake transaction",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "TransactionNotFoundException": {
                    "value": {
                      "error": {
                        "code": 120100,
                        "message": "The requested transaction was not found.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Babylon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/babylon-btc/{network}/transaction/send": {
      "post": {
        "operationId": "babylon-transaction-send",
        "summary": "Broadcast Transaction",
        "description": "Broadcast a signed transaction to the Bitcoin network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Babylon network:</p><ul><li>`mainnet` — Babylon main production environment and Bitcoin mainnet (only locking BTC is currently available).</li><li>`testnet` — Babylon testing environment and Bitcoin testnet called sigNet.</li></ul>",
            "schema": {
              "enum": [
                "testnet",
                "mainnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/SendResponseDto"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 120100,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Babylon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/babylon-btc/{network}/transaction/unbonding": {
      "post": {
        "operationId": "babylon-transaction-unbonding",
        "summary": "Broadcast Unbonding Transaction",
        "description": "Broadcast the unstaking transaction to the Bitcoin network to release the unbonded assets for early withdrawal.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Babylon network:</p><ul><li>`mainnet` — Babylon main production environment and Bitcoin mainnet (only locking BTC is currently available).</li><li>`testnet` — Babylon testing environment and Bitcoin testnet called sigNet.</li></ul>",
            "schema": {
              "enum": [
                "testnet",
                "mainnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnbondingRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UnbondingResponseDto"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 120100,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Babylon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/babylon-btc/{network}/transaction/get-by-address/{address}": {
      "get": {
        "operationId": "babylon-transaction-get-by-address",
        "summary": "Get List Transactions",
        "description": "Retrieve a list of all Babylon transactions on the Bitcoin network for a specific staker address.",
        "parameters": [
          {
            "name": "address",
            "description": "Staker address.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Babylon network:</p><ul><li>`mainnet` — Babylon main production environment and Bitcoin mainnet (only locking BTC is currently available).</li><li>`testnet` — Babylon testing environment and Bitcoin testnet called sigNet.</li></ul>",
            "schema": {
              "enum": [
                "testnet",
                "mainnet"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetByAddressResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidAddressException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 120100,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidAddressException": {
                    "value": {
                      "error": {
                        "code": 120104,
                        "message": "The provided address undefined is invalid.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Babylon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/babylon-btc/{network}/transaction/get-by-tx-hash/{txHash}": {
      "get": {
        "operationId": "babylon-transaction-get-by-tx-hash",
        "summary": "Check Transaction Status",
        "description": "Retrieve a specific transaction from the Bitcoin network by its hash to check the status.",
        "parameters": [
          {
            "name": "txHash",
            "description": "Transaction hash.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "testnet",
            "description": "<p>Babylon network:</p><ul><li>`mainnet` — Babylon main production environment and Bitcoin mainnet (only locking BTC is currently available).</li><li>`testnet` — Babylon testing environment and Bitcoin testnet called sigNet.</li></ul>",
            "schema": {
              "enum": [
                "testnet",
                "mainnet"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetByHashResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionIsNotStake"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "error": {
                        "code": 120100,
                        "message": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: undefined.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "InvalidAddressException": {
                    "value": {
                      "error": {
                        "code": 120104,
                        "message": "The provided address undefined is invalid.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "TransactionNotFoundException": {
                    "value": {
                      "error": {
                        "code": 120100,
                        "message": "The requested transaction was not found.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "TransactionIsNotStake": {
                    "value": {
                      "error": {
                        "code": 120102,
                        "message": "The requested transaction is not a stake transaction",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Babylon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/tx/remove-validator/{id}": {
      "get": {
        "operationId": "transaction-remove-validator",
        "summary": "Prepare removeValidator Transaction",
        "description": "Construct a serialized transaction to remove a validator from the cluster.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the SSV request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SsvRequestNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SsvRequestNotFoundException": {
                    "value": {
                      "error": {
                        "code": 111104,
                        "message": "The SSV ID undefined provided could not be found. Please specify the correct UUID.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/RemoveValidatorException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidEncryptedShardesCountException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "RemoveValidatorException": {
                    "value": {
                      "error": {
                        "code": 111121,
                        "message": "The remove validator transaction could not be created because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "InvalidEncryptedShardesCountException": {
                    "value": {
                      "error": {
                        "code": 111127,
                        "message": "The request could not be performed because the number of encrypted shardes is not valid. Please try again.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/tx/exit-validator/{id}": {
      "get": {
        "operationId": "transaction-exit-validator",
        "summary": "Prepare exitValidator Transaction",
        "description": "Construct a serialized transaction to initiate the validator exit from the cluster.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the SSV request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SsvRequestNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SsvRequestNotFoundException": {
                    "value": {
                      "error": {
                        "code": 111104,
                        "message": "The SSV ID undefined provided could not be found. Please specify the correct UUID.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/ExitValidatorException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidEncryptedShardesCountException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "ExitValidatorException": {
                    "value": {
                      "error": {
                        "code": 111125,
                        "message": "The exit validator transaction could not be created because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "InvalidEncryptedShardesCountException": {
                    "value": {
                      "error": {
                        "code": 111127,
                        "message": "The request could not be performed because the number of encrypted shardes is not valid. Please try again.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/tx/withdraw/{id}": {
      "get": {
        "operationId": "transaction-withdraw",
        "summary": "Prepare Withdraw Transaction",
        "description": "Construct a serialized transaction to withdraw a specified amount.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the SSV request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "required": true,
            "in": "query",
            "example": "1000",
            "description": "Amount to be withdrawn",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SsvRequestNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SsvRequestNotFoundException": {
                    "value": {
                      "error": {
                        "code": 111104,
                        "message": "The SSV ID undefined provided could not be found. Please specify the correct UUID.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/WithdrawException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "WithdrawException": {
                    "value": {
                      "error": {
                        "code": 111122,
                        "message": "The withdrawal transaction could not be created because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/tx/fee-recipient-address": {
      "get": {
        "operationId": "transaction-set-feeRecipientAddress",
        "summary": "Prepare Change feeRecipientAddress Transaction",
        "description": "Construct a serialized transaction to set the `feeRecipientAddress` on the SSV cluster.",
        "parameters": [
          {
            "name": "feeRecipientAddress",
            "required": true,
            "in": "query",
            "description": "Eth1 address that receives fee recipient rewards.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "schema": {
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SetFeeRecipientAddressException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SetFeeRecipientAddressException": {
                    "value": {
                      "error": {
                        "code": 111108,
                        "message": "The set fee recipient address transaction could not be created because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/tx/deposit/{id}": {
      "get": {
        "operationId": "transaction-deposit",
        "summary": "Prepare Top-Up Cluster Balance Transaction",
        "description": "Construct a serialized transaction to deposit SSV tokens in the cluster balance.",
        "parameters": [
          {
            "name": "operationPeriodInDays",
            "required": true,
            "in": "query",
            "example": 365,
            "description": "Operation period in days.",
            "schema": {
              "minimum": 1,
              "maximum": 3650,
              "default": 365,
              "type": "number"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the SSV request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SsvRequestNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SsvRequestNotFoundException": {
                    "value": {
                      "error": {
                        "code": 111104,
                        "message": "The SSV ID undefined provided could not be found. Please specify the correct UUID.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/DepositException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "DepositException": {
                    "value": {
                      "error": {
                        "code": 111120,
                        "message": "The deposit transaction could not be created because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/tx/operator-fee": {
      "get": {
        "operationId": "transaction-get-operator-fee",
        "summary": "Get Operator Fee",
        "description": "Check the operator on the SSV cluster.",
        "parameters": [
          {
            "name": "operatorId",
            "required": true,
            "in": "query",
            "example": 1,
            "description": "ID of the SSV operator.",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetOperatorFeeResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetOperatorFeeException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetOperatorFeeException": {
                    "value": {
                      "error": {
                        "code": 111109,
                        "message": "The amount of fee charged by the operator could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/tx/balance/{id}": {
      "get": {
        "operationId": "transaction-get-balance",
        "summary": "Get Cluster Fee Balance",
        "description": "Check the total SSV cluster balance.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the SSV request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetBalanceResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/ClusterIsLiquidatedException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  },
                  "ClusterIsLiquidatedException": {
                    "value": {
                      "error": {
                        "code": 111123,
                        "message": "The request could not be performed because the SSV cluster was liquidated. Please register a new cluster and then try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SsvRequestNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SsvRequestNotFoundException": {
                    "value": {
                      "error": {
                        "code": 111104,
                        "message": "The SSV ID undefined provided could not be found. Please specify the correct UUID.",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/GetBalanceException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "GetBalanceException": {
                    "value": {
                      "error": {
                        "code": 111110,
                        "message": "The cluster balance could not be obtained because an internal server error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/p2p/deposit": {
      "get": {
        "operationId": "p2p-transaction-deposit",
        "summary": "Prepare SSV Proxy Staking Transaction",
        "description": "Construct a serialized transaction to deposit ETH to the SSV proxy smart contract.",
        "parameters": [
          {
            "name": "amount",
            "required": true,
            "in": "query",
            "description": "Amount of ETH to deposit. The amount must be in multiples of 32 ETH.",
            "example": 32,
            "schema": {
              "minimum": 32,
              "type": "number"
            }
          },
          {
            "name": "withdrawalAddress",
            "required": true,
            "in": "query",
            "description": "Withdrawal address for the validators.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "schema": {
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "type": "string"
            }
          },
          {
            "name": "controllerAddress",
            "required": false,
            "in": "query",
            "description": "Controller address for the validators.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "schema": {
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "type": "string"
            }
          },
          {
            "name": "feeRecipientAddress",
            "required": false,
            "in": "query",
            "description": "Fee recipient address.",
            "example": "0x53da3c92fCCEb0CFE1764f65DDfF1564A2b15585",
            "schema": {
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/DepositException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "DepositException": {
                    "value": {
                      "error": {
                        "code": 111140,
                        "message": "Failed to create P2P SSV deposit transaction",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "P2P SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/p2p/claim": {
      "get": {
        "operationId": "p2p-transaction-claim",
        "summary": "Prepare SSV Proxy Claim Transaction",
        "description": "Construct a serialized transaction to claim ETH from the SSV proxy smart contract.",
        "parameters": [
          {
            "name": "withdrawalAddress",
            "required": true,
            "in": "query",
            "description": "Withdrawal address for the validators.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "schema": {
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ClaimNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ClaimNotFoundException": {
                    "value": {
                      "error": {
                        "code": 111146,
                        "message": "Claim not found",
                        "type": "not_found"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/ClaimException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "ClaimException": {
                    "value": {
                      "error": {
                        "code": 111145,
                        "message": "Failed to claim P2P SSV deposit",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "P2P SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/p2p/deposits": {
      "get": {
        "operationId": "p2p-transaction-deposit-list",
        "summary": "Get List of Deposits With Validators",
        "description": "Get a list of deposits with validators.",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "query",
            "description": "Type of the request",
            "example": {
              "WITHDRAWAL_ADDRESS": "withdrawalAddress",
              "TRANSACTION_HASH": "transactionHash",
              "DEPOSIT_IDS": "depositIds"
            },
            "schema": {
              "enum": [
                "withdrawalAddress",
                "transactionHash",
                "depositIds"
              ],
              "type": "string"
            }
          },
          {
            "name": "withdrawalAddress",
            "required": false,
            "in": "query",
            "description": "Withdrawal address for the validators.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "schema": {
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "type": "string"
            }
          },
          {
            "name": "transactionHash",
            "required": false,
            "in": "query",
            "description": "Tx hash of the deposit transaction.",
            "example": "0x2b1c6bbdeadb0b23ca8260a819fde1c0b0347b0fd42c33a9b2513b36d6521dc6",
            "schema": {
              "pattern": "^0x([A-Fa-f0-9])+$",
              "nullable": false,
              "type": "string"
            }
          },
          {
            "name": "depositIds",
            "required": false,
            "in": "query",
            "description": "Deposit ID list",
            "schema": {
              "minimum": 1,
              "format": "uuid",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/SsvDepositListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/DepositListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "DepositListException": {
                    "value": {
                      "error": {
                        "code": 111144,
                        "message": "Failed to get list of deposits",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "P2P SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/p2p/withdraw": {
      "post": {
        "operationId": "p2p-transaction-withdraw",
        "summary": "Prepare SSV Proxy Withdrawal Transaction",
        "description": "Construct a serialized transaction to withdraw ETH from the SSV proxy smart contract.",
        "parameters": [
          {
            "name": "pubkeys",
            "required": true,
            "in": "query",
            "description": "List of validator public keys.",
            "example": [
              "0xffC08FcD7cFeF5c70fB2b0e1f2A8EaA690AaE2bDFfa5dBEc4dEef31DcC0B19eB1f9Cebe3E2fe9eefBD9a1BDF6FD89b39"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{96}$"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/WithdrawException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "WithdrawException": {
                    "value": {
                      "error": {
                        "code": 111142,
                        "message": "Failed to create P2P SSV withdraw transaction",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "P2P SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/p2p/validators": {
      "get": {
        "operationId": "p2p-transaction-validator",
        "summary": "Get List of Validators",
        "description": "Get a list of validators by address.",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          },
          {
            "name": "withdrawalAddress",
            "required": true,
            "in": "query",
            "description": "Withdrawal address for the validators.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "schema": {
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/SsvValidatorListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/ValidatorsException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  },
                  "ValidatorsException": {
                    "value": {
                      "error": {
                        "code": 111143,
                        "message": "Failed to get list of validators",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "P2P SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/unified/staking/stake": {
      "post": {
        "operationId": "unified-create-stake-transaction",
        "summary": "Create Staking Request",
        "description": "Create a stake request transaction.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnifiedStakeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UnifiedStakeResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Unified"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/unified/staking/unstake": {
      "post": {
        "operationId": "unified-create-unstake-transaction",
        "summary": "Create Unstake Request",
        "description": "Create an unstake request transaction to unstake the locked assets within the network.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnifiedUnstakeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UnifiedStakeResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Unified"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/unified/staking/withdraw": {
      "post": {
        "operationId": "unified-create-withdraw-transaction",
        "summary": "Create Withdrawal Request",
        "description": "Create a withdrawal request to withdraw previously unstaked assets within the network.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnifiedWithdrawRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UnifiedStakeResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Unified"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/unified/transaction/broadcast": {
      "post": {
        "operationId": "unified-transaction-send",
        "summary": "Broadcast Transaction",
        "description": "Prepare an encoded transaction in the hexadecimal format for signing within a third-party service.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnifiedTxBroadcastRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UnifiedTxBroadcastResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Unified"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ton/{network}/staking/single-nominator/stake": {
      "post": {
        "operationId": "ton-staking-single-nominator-stake",
        "summary": "Create Stake Request",
        "description": "Create the stake request transaction in the single nominator pool.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>TON network:</p><ul><li>`mainnet` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleNominatorStakeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/SingleNominatorStakeResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "TON"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ton/{network}/staking/single-nominator/unstake": {
      "post": {
        "operationId": "ton-staking-single-nominator-unstake",
        "summary": "Create Unstake Request",
        "description": "Create the unstake request transaction in the single nominator pool.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>TON network:</p><ul><li>`mainnet` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleNominatorUnstakeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/SingleNominatorUnstakeResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "TON"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ton/{network}/staking/ton-whales/stake": {
      "post": {
        "operationId": "ton-staking-ton-whales-stake",
        "summary": "Create Stake Request",
        "description": "Create the stake request transaction in the TON Whales pool.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>TON network:</p><ul><li>`mainnet` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TonWhalesStakeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TonWhalesStakeResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "TON"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ton/{network}/staking/ton-whales/unstake": {
      "post": {
        "operationId": "ton-staking-ton-whales-unstake",
        "summary": "Create Unstake Request",
        "description": "Create the unstake request transaction in the TON Whales pool.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>TON network:</p><ul><li>`mainnet` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TonWhalesUnstakeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TonWhalesUnstakeRequest"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "TON"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ton/{network}/transactions/status/{transactionHash}": {
      "get": {
        "operationId": "ton-staking-transaction-status",
        "summary": "Get Transaction Status",
        "description": "Retrieve a specific transaction from the TON network by its hash.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>TON network:</p><ul><li>`mainnet` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          },
          {
            "name": "transactionHash",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StatusResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "TON"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ton/{network}/transactions": {
      "get": {
        "operationId": "ton-transaction-list",
        "summary": "List Broadcasted Transactions",
        "description": "Return a list of all broadcasted transactions.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>TON network:</p><ul><li>`mainnet` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "Number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "Number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          },
          {
            "name": "stakerAddress",
            "required": true,
            "in": "query",
            "description": "Staker account address.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetListTonTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "error": {
                        "code": 100101,
                        "message": "The data provided is not valid. Please check the request parameters and try again.",
                        "type": "client"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "error": {
                        "code": 101111,
                        "message": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "error": {
                        "code": 101109,
                        "message": "An invalid Bearer token has been provided. Please specify the correct authentication token.",
                        "type": "authentication"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "error": {
                        "code": 101110,
                        "message": "The request could not be performed because the server authorization error occurred.",
                        "type": "server"
                      },
                      "result": null
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "TON"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/ton/{network}/transactions/broadcast": {
      "post": {
        "operationId": "ton-staking-broadcast",
        "summary": "Broadcast Transaction",
        "description": "Broadcast a signed transaction to the TON network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>TON network:</p><ul><li>`mainnet` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "enum": [
                "mainnet",
                "testnet"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BroadcastRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/BroadcastResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "TON"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Staking API",
    "description": "API used for staking",
    "version": "1.0.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "https://api.p2p.org",
      "description": "Staking API"
    },
    {
      "url": "https://api-test.p2p.org",
      "description": "Testnet Staking API"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "ExceptionResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object"
          },
          "result": {
            "type": "object",
            "nullable": true,
            "default": null
          }
        },
        "required": [
          "error",
          "result"
        ]
      },
      "NoTokenException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 101111
          },
          "message": {
            "type": "string",
            "default": "No Bearer token has been provided. To obtain an authentication token, follow the instructions at https://docs.p2p.org/docs/authentication."
          },
          "name": {
            "type": "string",
            "default": "NoTokenException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "WrongTokenException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 101109
          },
          "message": {
            "type": "string",
            "default": "An invalid Bearer token has been provided. Please specify the correct authentication token."
          },
          "name": {
            "type": "string",
            "default": "WrongTokenException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidationErrorResponse": {
        "type": "object",
        "properties": {
          "property": {
            "type": "string"
          },
          "constraints": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "property",
          "constraints"
        ]
      },
      "ValidationException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100101
          },
          "message": {
            "type": "string",
            "default": "The data provided is not valid. Please check the request parameters and try again."
          },
          "name": {
            "type": "string",
            "default": "ValidationException"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationErrorResponse"
            }
          }
        },
        "required": [
          "code",
          "message",
          "name",
          "errors"
        ]
      },
      "SsvRequestIdAlreadyExistException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111103
          },
          "message": {
            "type": "string",
            "default": "The request could not be created because this SSV request ID already exists. Please specify the correct UUID."
          },
          "name": {
            "type": "string",
            "default": "SsvRequestIdAlreadyExistException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ClusterIsLiquidatedException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111123
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the SSV cluster was liquidated. Please register a new cluster and then try again."
          },
          "name": {
            "type": "string",
            "default": "ClusterIsLiquidatedException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SsvRequestCreateException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111100
          },
          "message": {
            "type": "string",
            "default": "The SSV request could not be created because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "SsvRequestCreateException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TokenGuardException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 101110
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the server authorization error occurred."
          },
          "name": {
            "type": "string",
            "default": "TokenGuardException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "OperatorsNotEnoughException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111124
          },
          "message": {
            "type": "string",
            "default": "The SSV request could not be created because there are not enough available node operators."
          },
          "name": {
            "type": "string",
            "default": "OperatorsNotEnoughException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "nullable": true,
            "default": null
          },
          "result": {
            "type": "object"
          }
        },
        "required": [
          "error",
          "result"
        ]
      },
      "CreateSsvRequestRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "Arbitrary UUID. You can later use that UUID to check the status of the set-up operation."
          },
          "validatorsCount": {
            "type": "number",
            "description": "Number of validators. One validator is equal to 32 ETH.",
            "default": 1,
            "minimum": 1,
            "maximum": 50,
            "example": 1
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address of the client.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "feeRecipientAddress": {
            "type": "string",
            "description": "Eth1 address that receives fee recipient rewards.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "ssvOwnerAddress": {
            "type": "string",
            "description": "An ETH1 address from which registerValidator method of SSV contract will be called.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "type": {
            "type": "string",
            "enum": [
              "with-encrypt-key",
              "without-encrypt-key"
            ],
            "example": "without-encrypt-key",
            "default": "without-encrypt-key",
            "description": "Request type: with or without an encrypted key. If `with-encrypt-key` is selected, fill the `ecdhPublicKey` field."
          },
          "operationPeriodInDays": {
            "type": "number",
            "example": 365,
            "description": "Operation period in days.",
            "minimum": 1,
            "maximum": 3650,
            "default": 365
          },
          "ecdhPublicKey": {
            "type": "string",
            "example": null,
            "description": "Your ECDH public key for getting the encrypted validator private key."
          }
        },
        "required": [
          "id",
          "validatorsCount",
          "withdrawalAddress",
          "feeRecipientAddress",
          "ssvOwnerAddress",
          "type",
          "operationPeriodInDays"
        ]
      },
      "SsvRequestNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111104
          },
          "message": {
            "type": "string",
            "default": "The SSV ID %s provided could not be found. Please specify the correct UUID."
          },
          "name": {
            "type": "string",
            "default": "SsvRequestNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "InvalidEncryptedShardesCountException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111127
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the number of encrypted shardes is not valid. Please try again."
          },
          "name": {
            "type": "string",
            "default": "InvalidEncryptedShardesCountException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SsvRequestGetException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111102
          },
          "message": {
            "type": "string",
            "default": "The status of the SSV request could not be obtained because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "SsvRequestGetException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "EncryptedShareResponse": {
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string",
            "description": "Validator public key."
          },
          "nonce": {
            "type": "string",
            "description": "Nonce used for signature in `sharesData`."
          },
          "sharesData": {
            "type": "string",
            "description": "Data used in the `registerValidator` Ethereum transaction from the SSV contract to create a validator."
          },
          "ecdhEncryptedPrivateKey": {
            "type": "string",
            "description": "Encrypted validator private key."
          }
        },
        "required": [
          "publicKey",
          "nonce",
          "sharesData"
        ]
      },
      "ClusterResponse": {
        "type": "object",
        "properties": {
          "operators": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "operators"
        ]
      },
      "SsvRequestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "UUID that was specified in the SSV set-up request."
          },
          "status": {
            "type": "string",
            "enum": [
              "init",
              "processing",
              "ready",
              "validator-ready",
              "validator-error",
              "cancel"
            ],
            "description": "<p>Current status of the SSV request:</p><ul><li><i>init</i> — request is stored.</li><li><i>processing</i> — request in progress, please wait.</li><li><i>ready</i> — request is ready.</li><li><i>validator-ready</i> — validator is registered on the SSV network.</li><li><i>validator-error</i> — validator data is not valid.</li><li><i>cancel</i> — request canceled due to an error or timeout.</li></ul>",
            "example": "processing"
          },
          "validatorsCount": {
            "type": "number",
            "description": "Number of validators.",
            "default": 1,
            "minimum": 1,
            "maximum": 1,
            "example": 1
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address of the cluster owner.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "feeRecipientAddress": {
            "type": "string",
            "description": "Eth1 address that receives fee recipient rewards.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "ssvOwnerAddress": {
            "type": "string",
            "description": "An ETH1 address from which registerValidator method of SSV contract will be called.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "type": {
            "type": "string",
            "enum": [
              "with-encrypt-key",
              "without-encrypt-key"
            ],
            "example": "without-encrypt-key",
            "default": "without-encrypt-key",
            "description": "Request type: with or without an encrypted key. If `with-encrypt-key` is selected, fill the `ecdhPublicKey` field."
          },
          "operationPeriodInDays": {
            "type": "number",
            "example": 31556952,
            "description": "Operation period in days."
          },
          "liquidationPeriodInDays": {
            "type": "number",
            "example": 2629746,
            "description": "Liquidation threshold period in days."
          },
          "ecdhPublicKey": {
            "type": "string",
            "example": null,
            "description": "Your ECDH public key for getting the encrypted validator private key."
          },
          "validatorRegistrationTxs": {
            "example": null,
            "description": "Array of transactions related to validator registration.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "feeRecipientTx": {
            "example": null,
            "description": "Array of transaction for setting the fee recipient address.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "approveTx": {
            "example": null,
            "description": "Array of transaction to approve SSV transfer.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "encryptedShares": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EncryptedShareResponse"
            }
          },
          "clusters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClusterResponse"
            }
          }
        },
        "required": [
          "id",
          "status",
          "validatorsCount",
          "withdrawalAddress",
          "feeRecipientAddress",
          "ssvOwnerAddress",
          "type",
          "operationPeriodInDays",
          "liquidationPeriodInDays",
          "encryptedShares",
          "clusters"
        ]
      },
      "SsvValidatorErrorException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111129
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the validator was not correctly registered on SSV. Please remove the validator from the cluster by calling https://docs.p2p.org/reference/transaction-remove-validator."
          },
          "name": {
            "type": "string",
            "default": "SsvValidatorErrorException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SsvValidatorNotReadyException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111130
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the validator registration on SSV is not confirmed due to invalid registration or an issue with the SSV API. Please ensure you have correctly broadcasted the validatorRegistrationTxs and try again."
          },
          "name": {
            "type": "string",
            "default": "SsvValidatorNotReadyException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SsvRequestGetDepositdataException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111131
          },
          "message": {
            "type": "string",
            "default": "The request deposit data could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "SsvRequestGetDepositdataException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "DepositDataResponse": {
        "type": "object",
        "properties": {
          "pubkey": {
            "type": "string",
            "description": "Validator public key.",
            "example": [
              "0xbe5E9c3Bb9eba1BF4C5eC1c1cbcF85ee2CE2fEC66Ce5460C23eF82332A044FDCabF7011F588CCbD77E73CCe6c4accDF0"
            ],
            "pattern": "^0x[a-fA-F0-9]{96}$"
          },
          "signature": {
            "type": "string",
            "description": "Validator signature.",
            "example": "0x15C9D0Bf74BE4ef12b0008Ed53825Da647E0C0FE21c0EfAE2B36E066bf44A5a9b5De0B70cE19F73D8eC5E7237Dde667FE8a99Ad607BddDC4b2aDd4c4Bc57b10ddfe7f0bFb925b48f4d37Cee8f894cEA365CeeA6c4B25a9Ca7DAbDfFdB2EDd6eB",
            "pattern": "^0x[a-fA-F0-9]{192}$"
          },
          "depositDataRoot": {
            "type": "string",
            "description": "Hash of the deposit data.",
            "example": "0xFEDdcB470eAA856c57f466e2f4d4F6971efEA1ED38fdB91bD913EEFFb52C8E24",
            "pattern": "^0x[a-fA-F0-9]{64}$"
          },
          "withdrawalCredentials": {
            "type": "string",
            "description": "Public key for withdrawing balance."
          },
          "amount": {
            "type": "string",
            "description": "Deposit amount."
          },
          "depositMessageRoot": {
            "type": "string",
            "description": "Cryptographic hash of the Merkle tree’s root."
          },
          "forkVersion": {
            "type": "string",
            "description": "Version of the Ethereum fork that the deposit is for."
          },
          "eth2NetworkName": {
            "type": "string",
            "description": "Eth2 network name."
          },
          "depositCliVersion": {
            "type": "string",
            "description": "Version of the deposit command-line interface."
          }
        },
        "required": [
          "pubkey",
          "signature",
          "depositDataRoot"
        ]
      },
      "SsvDepositDataResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "UUID that was specified in the SSV set-up request."
          },
          "status": {
            "type": "string",
            "enum": [
              "init",
              "processing",
              "ready",
              "validator-ready",
              "validator-error",
              "cancel"
            ],
            "description": "<p>Current status of the SSV request:</p><ul><li><i>init</i> — request is stored.</li><li><i>processing</i> — request in progress, please wait.</li><li><i>ready</i> — request is ready.</li><li><i>validator-ready</i> — validator is registered on the SSV network.</li><li><i>validator-error</i> — validator data is not valid.</li><li><i>cancel</i> — request canceled due to an error or timeout.</li></ul>",
            "example": "processing"
          },
          "depositData": {
            "minItems": 1,
            "maxItems": 400,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepositDataResponse"
            }
          }
        },
        "required": [
          "id",
          "status",
          "depositData"
        ]
      },
      "SsvRequestGetListException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111101
          },
          "message": {
            "type": "string",
            "default": "The list of SSV requests could not be obtained because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "SsvRequestGetListException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetListSsvRequestResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SsvRequestResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "NodesRequestIdAlreadyExistException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103121
          },
          "message": {
            "type": "string",
            "default": "The nodes set-up request could not be performed because the node ID specified already exists."
          },
          "name": {
            "type": "string",
            "default": "NodesRequestIdAlreadyExistException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "CannotGetPodAddressException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103128
          },
          "message": {
            "type": "string",
            "default": "The transaction could not be created because the withdrawal address '%s' provided is invalid. For the restaking flow, the withdrawal address corresponds to the EigenPod address set by default or explicitly. Please check the request parameters."
          },
          "name": {
            "type": "string",
            "default": "CannotGetPodAddressException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NodesRequestCreateException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103116
          },
          "message": {
            "type": "string",
            "default": "The nodes set-up request could not be created because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "NodesRequestCreateException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NodesOptionsRequest": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "enum": [
              "any"
            ],
            "example": "any",
            "description": "Nodes location. Currently, only `any` is supported.",
            "default": "any"
          },
          "relaysSet": {
            "type": "string",
            "description": "MEV Relay selection.",
            "example": null
          }
        },
        "required": [
          "location"
        ]
      },
      "CreateNodesRequestRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "Arbitrary UUID. You can later use that UUID to check the status of the set-up operation."
          },
          "type": {
            "type": "string",
            "enum": [
              "REGULAR",
              "RESTAKING"
            ],
            "description": "Type of the nodes request.",
            "example": "REGULAR"
          },
          "validatorsCount": {
            "type": "number",
            "description": "Number of validators. One validator is equal to 32 ETH.",
            "default": 1,
            "minimum": 1,
            "maximum": 3125,
            "example": 1
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address for the validators.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "eigenPodOwnerAddress": {
            "type": "string",
            "description": "EigenPod owner address.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "controllerAddress": {
            "type": "string",
            "description": "Controller address for the validators.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "feeRecipientAddress": {
            "type": "string",
            "description": "Fee recipient address.",
            "example": "0x53da3c92fCCEb0CFE1764f65DDfF1564A2b15585",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "nodesOptions": {
            "$ref": "#/components/schemas/NodesOptionsRequest"
          }
        },
        "required": [
          "id",
          "validatorsCount",
          "nodesOptions"
        ]
      },
      "NodesRequestNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103114
          },
          "message": {
            "type": "string",
            "default": "The node request ID provided could not be found. Please specify the correct UUID."
          },
          "name": {
            "type": "string",
            "default": "NodesRequestNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NodesRequestGetException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103117
          },
          "message": {
            "type": "string",
            "default": "The status of the node request could not be obtained because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "NodesRequestGetException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NodesRequestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "UUID that was specified in the node set-up request."
          },
          "type": {
            "type": "string",
            "enum": [
              "REGULAR",
              "RESTAKING"
            ],
            "description": "Type of the nodes request.",
            "example": "REGULAR"
          },
          "status": {
            "type": "string",
            "enum": [
              "init",
              "processing",
              "ready",
              "cancel"
            ],
            "description": "<p>Current status of the nodes request:</p><ul><li><i>init</i> — node request was created.</li><li><i>processing</i> — node request is in work.</li><li><i>ready</i> — backend has deposit data for the node request.</li><li><i>cancel</i> — something went wrong and the deposit data did not create.</li></ul>",
            "example": "processing"
          },
          "validatorsCount": {
            "type": "number",
            "description": "Number of validators.",
            "default": 1,
            "minimum": 1,
            "maximum": 3125,
            "example": 1
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address of the validator.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "eigenPodAddress": {
            "type": "string",
            "description": "EigenPod address.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "eigenPodOwnerAddress": {
            "type": "string",
            "description": "EigenPod owner address.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "controllerAddress": {
            "type": "string",
            "description": "Controller address of the validator.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "feeRecipientAddress": {
            "type": "string",
            "description": "Fee recipient address of the validator.",
            "example": "0x53da3c92fCCEb0CFE1764f65DDfF1564A2b15585",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "depositData": {
            "minItems": 1,
            "maxItems": 400,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepositDataResponse"
            }
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "validatorsCount",
          "feeRecipientAddress",
          "createdAt"
        ]
      },
      "NodesRequestGetListException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103120
          },
          "message": {
            "type": "string",
            "default": "The list of nodes requests statuses could not be obtained because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "NodesRequestGetListException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetListNodesRequestResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodesRequestResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "GetRelaysSetsException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103125
          },
          "message": {
            "type": "string",
            "default": "The list of relay sets could not be obtained because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetRelaysSetsException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RelaysSetResponse": {
        "type": "object",
        "properties": {
          "relaysSet": {
            "type": "string",
            "description": "Name of the MEV relay set."
          }
        },
        "required": [
          "relaysSet"
        ]
      },
      "GetRelaysSetsRequestResponse": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelaysSetResponse"
            }
          }
        },
        "required": [
          "list"
        ]
      },
      "NetworkIsNotIncludedInListException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 120100
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the network provided is not supported. Please specify the network from the list of available ones: [ 'testnet', 'mainnet' ]."
          },
          "name": {
            "type": "string",
            "default": "NetworkIsNotIncludedInListException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SimulationTransactionOnCosmosException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110113
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the simulation transaction failed."
          },
          "name": {
            "type": "string",
            "default": "SimulationTransactionOnCosmosException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "InsufficientFundsOnCosmosAccountException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110101
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the amount of tokens in the stash account is insufficient. Please check the balance and specify the correct request parameters."
          },
          "name": {
            "type": "string",
            "default": "InsufficientFundsOnCosmosAccountException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "CreateStakeTransactionException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110103
          },
          "message": {
            "type": "string",
            "default": "The staking request transaction could not be created because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "CreateStakeTransactionException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "Coin": {
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "Currency of the tokens."
          },
          "amount": {
            "type": "string",
            "description": "Amount of tokens."
          }
        },
        "required": [
          "denom",
          "amount"
        ]
      },
      "MsgDelegate": {
        "type": "object",
        "properties": {
          "delegatorAddress": {
            "type": "string",
            "description": "Delegator address.",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "validatorAddress": {
            "type": "string",
            "description": "Validator address.",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          },
          "amount": {
            "$ref": "#/components/schemas/Coin"
          }
        },
        "required": [
          "delegatorAddress",
          "validatorAddress"
        ]
      },
      "MsgUndelegate": {
        "type": "object",
        "properties": {
          "delegatorAddress": {
            "type": "string",
            "description": "Delegator address.",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "validatorAddress": {
            "type": "string",
            "description": "Validator address.",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          },
          "amount": {
            "$ref": "#/components/schemas/Coin"
          }
        },
        "required": [
          "delegatorAddress",
          "validatorAddress"
        ]
      },
      "MsgBeginRedelegate": {
        "type": "object",
        "properties": {
          "delegatorAddress": {
            "type": "string",
            "description": "Delegator address.",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "validatorSrcAddress": {
            "type": "string",
            "description": "Source validator address.",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          },
          "validatorDstAddress": {
            "type": "string",
            "description": "Destination validator address.",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          },
          "amount": {
            "$ref": "#/components/schemas/Coin"
          }
        },
        "required": [
          "delegatorAddress",
          "validatorSrcAddress",
          "validatorDstAddress"
        ]
      },
      "MsgWithdrawDelegatorReward": {
        "type": "object",
        "properties": {
          "delegatorAddress": {
            "type": "string",
            "description": "Delegator address.",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "validatorAddress": {
            "type": "string",
            "description": "Validator address.",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "delegatorAddress",
          "validatorAddress"
        ]
      },
      "Message": {
        "type": "object",
        "properties": {
          "typeUrl": {
            "type": "string",
            "enum": [
              "/cosmos.staking.v1beta1.MsgDelegate",
              "/cosmos.staking.v1beta1.MsgUndelegate",
              "/cosmos.staking.v1beta1.MsgBeginRedelegate",
              "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward",
              "/cosmos.crypto.secp256k1.PubKey"
            ],
            "example": "/cosmos.staking.v1beta1.Tx",
            "description": "Cosmos-based network operation type."
          },
          "value": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MsgDelegate"
              },
              {
                "$ref": "#/components/schemas/MsgUndelegate"
              },
              {
                "$ref": "#/components/schemas/MsgBeginRedelegate"
              },
              {
                "$ref": "#/components/schemas/MsgWithdrawDelegatorReward"
              }
            ],
            "example": {
              "delegatorAddress": "string"
            }
          }
        },
        "required": [
          "typeUrl",
          "value"
        ]
      },
      "Amount": {
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "enum": [
              "atom",
              "uatom",
              "matom"
            ],
            "description": "<p>Currency of the tokens:</p><ul><li>`atom` — Cosmos native staking token.</li><li>`uatom` — 1 ATOM = 10^-6 UATOM.</li><li>`matom` — 1 ATOM = 10^-3 MATOM.</li></ul>"
          },
          "amount": {
            "type": "string",
            "description": "Amount of tokens."
          }
        },
        "required": [
          "denom",
          "amount"
        ]
      },
      "TransactionFee": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Amount"
            }
          },
          "gas": {
            "type": "string",
            "description": "Amount of gas spent for the transaction."
          }
        },
        "required": [
          "amount",
          "gas"
        ]
      },
      "TransactionData": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "fee": {
            "description": "Amount of fee charged for the transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionFee"
              }
            ]
          },
          "memo": {
            "type": "string",
            "description": "Arbitrary text data to add to the transactions."
          },
          "encodedBody": {
            "type": "string",
            "description": "Processable transaction data encoded in the hexadecimal format."
          },
          "encodedAuthInfo": {
            "type": "string",
            "description": "Authorization data, including fee, encoded in the hexadecimal format."
          }
        },
        "required": [
          "messages",
          "fee",
          "encodedBody",
          "encodedAuthInfo"
        ]
      },
      "StakeOrUnstakeTransactionStakingCosmosResponse": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator stash account address which keeps tokens.",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "transactionData": {
            "description": "List of data fields to be used to construct the staking transactions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionData"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the transaction in the ISO 8601 format."
          },
          "amount": {
            "type": "number",
            "format": "decimal",
            "description": "Amount of tokens."
          },
          "currency": {
            "type": "string",
            "enum": [
              "atom",
              "uatom",
              "matom"
            ],
            "description": "<p>Currency of the tokens:</p><ul><li>`atom` — Cosmos native staking token.</li><li>`uatom` — 1 ATOM = 10^-6 UATOM.</li><li>`matom` — 1 ATOM = 10^-3 MATOM.</li></ul>"
          },
          "validatorAddress": {
            "type": "string",
            "description": "Validator address to which tokens are delegated.",
            "example": "cosmosvaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          },
          "rewardDestinationAddress": {
            "type": "string",
            "description": "Reward destination account address.",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "stashAccountAddress",
          "transactionData",
          "createdAt",
          "amount",
          "currency",
          "validatorAddress",
          "rewardDestinationAddress"
        ]
      },
      "StakeOrUnstakeStakingCosmosRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator account address which keeps tokens.",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "memo": {
            "type": "string",
            "example": "This is your memo message",
            "description": "Arbitrary text data to add to the transactions."
          },
          "amount": {
            "type": "number",
            "format": "decimal",
            "description": "Amount of tokens to stake in ATOM."
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "InsufficientFundsOnCosmosValidatorException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110102
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the amount of tokens staked in the Validator account is insufficient. Please check the balance and specify the correct request parameters."
          },
          "name": {
            "type": "string",
            "default": "InsufficientFundsOnCosmosValidatorException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "CreateUnstakeTransactionException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110104
          },
          "message": {
            "type": "string",
            "default": "The unstake request transaction could not be created because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "CreateUnstakeTransactionException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RedelegationTransactionInProcessException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110114
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the redelegation to this validator is already in progress. Please try again after the redelegation process will be completed."
          },
          "name": {
            "type": "string",
            "default": "RedelegationTransactionInProcessException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "CreateRedelegateTransactionException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110105
          },
          "message": {
            "type": "string",
            "default": "The redelegate request transaction could not be created because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "CreateRedelegateTransactionException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RedelegateTransactionStakingCosmosResponse": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator stash account address which keeps tokens.",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "transactionData": {
            "description": "List of data fields to be used to construct the staking transactions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionData"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the transaction in the ISO 8601 format."
          },
          "amount": {
            "type": "number",
            "format": "decimal",
            "description": "Amount of tokens to stake."
          },
          "currency": {
            "type": "string",
            "enum": [
              "atom",
              "uatom",
              "matom"
            ],
            "description": "<p>Currency of the tokens:</p><ul><li>`atom` — Cosmos native staking token.</li><li>`uatom` — 1 ATOM = 10^-6 UATOM.</li><li>`matom` — 1 ATOM = 10^-3 MATOM.</li></ul>"
          },
          "sourceValidatorAddress": {
            "type": "string",
            "description": "Redelegate source validator address.",
            "example": "cosmosvaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          },
          "destinationValidatorAddress": {
            "type": "string",
            "description": "Redelegate destination validator address.",
            "example": "cosmosvaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "stashAccountAddress",
          "transactionData",
          "createdAt",
          "amount",
          "currency",
          "sourceValidatorAddress",
          "destinationValidatorAddress"
        ]
      },
      "RedelegateTransactionStakingCosmosRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator account address which keeps tokens.",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "memo": {
            "type": "string",
            "example": "This is your memo message",
            "description": "Arbitrary text data to add to the transactions."
          },
          "amount": {
            "type": "number",
            "format": "decimal",
            "description": "Amount of tokens to stake in ATOM."
          },
          "validatorAddress": {
            "type": "string",
            "description": "Validator address to perform the operation with.",
            "example": "cosmosvaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "stashAccountAddress",
          "amount",
          "validatorAddress"
        ]
      },
      "CreateClaimRewardsTransactionException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110106
          },
          "message": {
            "type": "string",
            "default": "The claiming rewards request transaction could not be created because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "CreateClaimRewardsTransactionException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ClaimRewardsTransactionStakingCosmosResponse": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator stash account address which keeps tokens.",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "transactionData": {
            "description": "List of data fields to be used to construct the staking transactions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionData"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the transaction in the ISO 8601 format."
          },
          "validatorAddress": {
            "type": "string",
            "description": "Validator address to which tokens are delegated.",
            "example": "cosmosvaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "stashAccountAddress",
          "transactionData",
          "createdAt",
          "validatorAddress"
        ]
      },
      "BaseStakingCosmosRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator account address which keeps tokens.",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "memo": {
            "type": "string",
            "example": "This is your memo message",
            "description": "Arbitrary text data to add to the transactions."
          }
        },
        "required": [
          "stashAccountAddress"
        ]
      },
      "TransactionNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 120101
          },
          "message": {
            "type": "string",
            "default": "The requested transaction was not found."
          },
          "name": {
            "type": "string",
            "default": "TransactionNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "EncodeTransactionFailedException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110115
          },
          "message": {
            "type": "string",
            "default": "The transaction could not be signed because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "EncodeTransactionFailedException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "EncodeTransactionResponse": {
        "type": "object",
        "properties": {
          "encodedTransaction": {
            "type": "string",
            "description": "Encoded transaction in the hexadecimal format that needs to be broadcast to the network."
          }
        },
        "required": [
          "encodedTransaction"
        ]
      },
      "EncodeTransactionRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator account address which keeps tokens.",
            "pattern": "^sei[a-zA-Z0-9]{39}$"
          },
          "signature": {
            "type": "string",
            "example": "Signature of the sender of the transaction."
          },
          "encodedBody": {
            "type": "string",
            "description": "Processable transaction data encoded in the hexadecimal format."
          },
          "encodedAuthInfo": {
            "type": "string",
            "description": "Authorization data, including fee, encoded in the hexadecimal format."
          }
        },
        "required": [
          "stashAccountAddress",
          "signature",
          "encodedBody",
          "encodedAuthInfo"
        ]
      },
      "BroadcastTransactionFailedException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110109
          },
          "message": {
            "type": "string",
            "default": "The transaction could not be broadcasted because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "BroadcastTransactionFailedException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "Gas": {
        "type": "object",
        "properties": {
          "used": {
            "type": "number",
            "description": "Amount of gas spent for the transaction."
          },
          "wanted": {
            "type": "number",
            "description": "Maximum gas limit for the transaction."
          }
        },
        "required": [
          "used",
          "wanted"
        ]
      },
      "TransactionStatusResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "failed"
            ],
            "description": "Transaction status."
          },
          "blockId": {
            "type": "number",
            "description": "Unique identifier of the block in which the transaction has been included."
          },
          "fee": {
            "type": "number",
            "description": "Total fee in the network native currency charged for processing the transaction."
          },
          "gas": {
            "description": "Computational effort required to execute the transaction measured in gas units.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Gas"
              }
            ]
          },
          "transactionHash": {
            "type": "string",
            "pattern": "[A-Z0-9]{64}",
            "description": "Hash of the transaction."
          }
        },
        "required": [
          "status",
          "blockId",
          "fee",
          "gas",
          "transactionHash"
        ]
      },
      "BroadcastTransactionRequest": {
        "type": "object",
        "properties": {
          "signedTransaction": {
            "type": "string",
            "description": "Signed transaction in Base64 encrypted format which needs to be broadcast to the network."
          }
        },
        "required": [
          "signedTransaction"
        ]
      },
      "InvalidTransactionHashException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110111
          },
          "message": {
            "type": "string",
            "default": "The transaction status could not be obtained because the transaction hash provided is invalid. Please check the transaction hash satisfies the regular expression /^[A-Z0-9]{64}$/ format and try again."
          },
          "name": {
            "type": "string",
            "default": "InvalidTransactionHashException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionAlreadyBroadcastException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110110
          },
          "message": {
            "type": "string",
            "default": "The transaction status could not be obtained because the transaction has been already broadcasted."
          },
          "name": {
            "type": "string",
            "default": "TransactionAlreadyBroadcastException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetTransactionStatusFailedException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110108
          },
          "message": {
            "type": "string",
            "default": "The transaction status could not be obtained because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetTransactionStatusFailedException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "StakeOrUnstakeTransactionStakingCelestiaResponse": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator stash account address which keeps tokens.",
            "pattern": "^celestia[a-zA-Z0-9]{39}$"
          },
          "transactionData": {
            "description": "List of data fields to be used to construct the staking transactions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionData"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the transaction in the ISO 8601 format."
          },
          "amount": {
            "type": "number",
            "format": "decimal",
            "description": "Amount of tokens."
          },
          "currency": {
            "type": "string",
            "enum": [
              "tia",
              "utia",
              "mtia"
            ],
            "description": "Currency of the tokens:</p><ul><li>`tia` — Celestia native staking token.</li><li>`utia` — 1 TIA = 10^-6 UTIA.</li><li>`mtia` — 1 TIA = 10^-3 MTIA.</li></ul>"
          },
          "validatorAddress": {
            "type": "string",
            "description": "Validator address to which tokens are delegated.",
            "example": "celestiavaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^celestiavaloper[a-zA-Z0-9]{39}$"
          },
          "rewardDestinationAddress": {
            "type": "string",
            "description": "Reward destination account address.",
            "pattern": "^celestia[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "stashAccountAddress",
          "transactionData",
          "createdAt",
          "amount",
          "currency",
          "validatorAddress",
          "rewardDestinationAddress"
        ]
      },
      "StakeOrUnstakeStakingCelestiaRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator account address which keeps tokens.",
            "pattern": "^celestia[a-zA-Z0-9]{39}$"
          },
          "memo": {
            "type": "string",
            "example": "This is your memo message",
            "description": "Arbitrary text data to add to the transactions."
          },
          "amount": {
            "type": "number",
            "format": "decimal",
            "description": "Amount of tokens to stake in TIA."
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "RedelegateTransactionStakingCelestiaResponse": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator stash account address which keeps tokens.",
            "pattern": "^celestia[a-zA-Z0-9]{39}$"
          },
          "transactionData": {
            "description": "List of data fields to be used to construct the staking transactions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionData"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the transaction in the ISO 8601 format."
          },
          "amount": {
            "type": "number",
            "format": "decimal",
            "description": "Amount of tokens to stake."
          },
          "currency": {
            "type": "string",
            "enum": [
              "tia",
              "utia",
              "mtia"
            ],
            "description": "<p>Currency of the tokens:</p><ul><li>`tia` — Celestia native staking token.</li><li>`utia` — 1 TIA = 10^-6 UTIA.</li><li>`mtia` — 1 TIA = 10^-3 MTIA.</li></ul>"
          },
          "sourceValidatorAddress": {
            "type": "string",
            "description": "Redelegate source validator address.",
            "example": "celestiavaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^celestiavaloper[a-zA-Z0-9]{39}$"
          },
          "destinationValidatorAddress": {
            "type": "string",
            "description": "Redelegate destination validator address.",
            "example": "celestiavaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^celestiavaloper[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "stashAccountAddress",
          "transactionData",
          "createdAt",
          "amount",
          "currency",
          "sourceValidatorAddress",
          "destinationValidatorAddress"
        ]
      },
      "RedelegateTransactionStakingCelestiaRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator account address which keeps tokens.",
            "pattern": "^celestia[a-zA-Z0-9]{39}$"
          },
          "memo": {
            "type": "string",
            "example": "This is your memo message",
            "description": "Arbitrary text data to add to the transactions."
          },
          "amount": {
            "type": "number",
            "format": "decimal",
            "description": "Amount of tokens to stake in TIA."
          },
          "validatorAddress": {
            "type": "string",
            "description": "Validator address to perform the operation with.",
            "example": "celestiavaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^celestiavaloper[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "stashAccountAddress",
          "amount",
          "validatorAddress"
        ]
      },
      "ClaimRewardsTransactionStakingCelestiaResponse": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator stash account address which keeps tokens.",
            "pattern": "^celestia[a-zA-Z0-9]{39}$"
          },
          "transactionData": {
            "description": "List of data fields to be used to construct the staking transactions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionData"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the transaction in the ISO 8601 format."
          },
          "validatorAddress": {
            "type": "string",
            "description": "Validator address to which tokens are delegated.",
            "example": "celestiavaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^celestiavaloper[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "stashAccountAddress",
          "transactionData",
          "createdAt",
          "validatorAddress"
        ]
      },
      "BaseStakingCelestiaRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator account address which keeps tokens.",
            "pattern": "^celestia[a-zA-Z0-9]{39}$"
          },
          "memo": {
            "type": "string",
            "example": "This is your memo message",
            "description": "Arbitrary text data to add to the transactions."
          }
        },
        "required": [
          "stashAccountAddress"
        ]
      },
      "StakeOrUnstakeTransactionStakingSeiResponse": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator stash account address which keeps tokens.",
            "pattern": "^sei[a-zA-Z0-9]{39}$"
          },
          "transactionData": {
            "description": "List of data fields to be used to construct the staking transactions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionData"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the transaction in the ISO 8601 format."
          },
          "amount": {
            "type": "number",
            "format": "decimal",
            "description": "Amount of tokens."
          },
          "currency": {
            "type": "string",
            "enum": [
              "sei",
              "usei",
              "msei"
            ],
            "description": "Currency of the tokens:</p><ul><li>`sei` — Sei native staking token.</li><li>`usei` — 1 SEI = 10⁻⁶ uSEI.</li><li>`msei` — 1 SEI = 10⁻³ mSEI.</li></ul>"
          },
          "validatorAddress": {
            "type": "string",
            "description": "Validator address to which tokens are delegated.",
            "example": "seivaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^seivaloper[a-zA-Z0-9]{39}$"
          },
          "rewardDestinationAddress": {
            "type": "string",
            "description": "Reward destination account address.",
            "pattern": "^sei[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "stashAccountAddress",
          "transactionData",
          "createdAt",
          "amount",
          "currency",
          "validatorAddress",
          "rewardDestinationAddress"
        ]
      },
      "StakeOrUnstakeStakingSeiRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator stash account address which keeps tokens.",
            "pattern": "^sei[a-zA-Z0-9]{39}$"
          },
          "memo": {
            "type": "string",
            "example": "This is your memo message",
            "description": "Arbitrary text data to add to the transactions."
          },
          "amount": {
            "type": "number",
            "format": "decimal",
            "description": "Amount of tokens to stake or unstake in SEI."
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "RedelegateTransactionStakingSeiResponse": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator stash account address which keeps tokens.",
            "pattern": "^sei[a-zA-Z0-9]{39}$"
          },
          "transactionData": {
            "description": "List of data fields to be used to construct the staking transactions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionData"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the transaction in the ISO 8601 format."
          },
          "amount": {
            "type": "number",
            "format": "decimal",
            "description": "Amount of tokens to stake."
          },
          "currency": {
            "type": "string",
            "enum": [
              "sei",
              "usei",
              "msei"
            ],
            "description": "Currency of the tokens:</p><ul><li>`sei` — Sei native staking token.</li><li>`usei` — 1 SEI = 10⁻⁶ uSEI.</li><li>`msei` — 1 SEI = 10⁻³ mSEI.</li></ul>"
          },
          "sourceValidatorAddress": {
            "type": "string",
            "description": "Redelegate source validator address.",
            "example": "seivaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^seivaloper[a-zA-Z0-9]{39}$"
          },
          "destinationValidatorAddress": {
            "type": "string",
            "description": "Redelegate destination validator address.",
            "example": "seivaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^seivaloper[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "stashAccountAddress",
          "transactionData",
          "createdAt",
          "amount",
          "currency",
          "sourceValidatorAddress",
          "destinationValidatorAddress"
        ]
      },
      "RedelegateTransactionStakingSeiRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator account address which keeps tokens.",
            "pattern": "^sei[a-zA-Z0-9]{39}$"
          },
          "memo": {
            "type": "string",
            "example": "This is your memo message",
            "description": "Arbitrary text data to add to the transactions."
          },
          "amount": {
            "type": "number",
            "format": "decimal",
            "description": "Amount of tokens to stake in SEI."
          },
          "validatorAddress": {
            "type": "string",
            "description": "Validator address to perform the operation with.",
            "example": "seivaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^seivaloper[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "stashAccountAddress",
          "amount",
          "validatorAddress"
        ]
      },
      "ClaimRewardsTransactionStakingSeiResponse": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator stash account address which keeps tokens.",
            "pattern": "^sei[a-zA-Z0-9]{39}$"
          },
          "transactionData": {
            "description": "List of data fields to be used to construct the staking transactions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionData"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the transaction in the ISO 8601 format."
          },
          "validatorAddress": {
            "type": "string",
            "description": "Validator address to which tokens are delegated.",
            "example": "seivaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^seivaloper[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "stashAccountAddress",
          "transactionData",
          "createdAt",
          "validatorAddress"
        ]
      },
      "BaseStakingSeiRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Delegator account address which keeps tokens.",
            "pattern": "^sei[a-zA-Z0-9]{39}$"
          },
          "memo": {
            "type": "string",
            "example": "This is your memo message",
            "description": "Arbitrary text data to add to the transactions."
          }
        },
        "required": [
          "stashAccountAddress"
        ]
      },
      "GetNetworkStatsNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115200
          },
          "message": {
            "type": "string",
            "default": "The data for the parameters provided could not be found."
          },
          "name": {
            "type": "string",
            "default": "GetNetworkStatsNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetNetworkExitQueueException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115201
          },
          "message": {
            "type": "string",
            "default": "The network exit queue could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetNetworkExitQueueException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetNetworkQueueResponse": {
        "type": "object",
        "properties": {
          "length": {
            "type": "number",
            "description": "Length of the queue.",
            "example": 0.1750427
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the last update to the queue.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "length",
          "updatedAt"
        ]
      },
      "GetNetworkStakingQueueException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115202
          },
          "message": {
            "type": "string",
            "default": "The network staking queue could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetNetworkStakingQueueException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetNetworkSupplyDataException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115203
          },
          "message": {
            "type": "string",
            "default": "The network supply data could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetNetworkSupplyDataException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetNetworkSupplyDataResponse": {
        "type": "object",
        "properties": {
          "percent": {
            "type": "number",
            "description": "Percentage of the total available supply that is currently staked.",
            "example": 18.645613
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the last update to the queue.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "percent",
          "updatedAt"
        ]
      },
      "GetNetworkLastStakingPeriodException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115204
          },
          "message": {
            "type": "string",
            "default": "The network last staking period could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetNetworkLastStakingPeriodException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetNetworkLastStakingPeriodResponse": {
        "type": "object",
        "properties": {
          "period": {
            "type": "number",
            "description": "Last staking period",
            "example": 244333
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the last update to the queue.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "period",
          "updatedAt"
        ]
      },
      "GetNetworkStatsHistoryException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115206
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetNetworkStatsHistoryException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetNetworkAPYResponse": {
        "type": "object",
        "properties": {
          "stakingPeriodNumber": {
            "type": "number",
            "description": "Unique identifier for the current staking period.",
            "example": 1227
          },
          "stakingPeriodStart": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "stakingPeriodEnd": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "networkApy": {
            "type": "number",
            "description": "Annual Percentage Yield (APY) for the entire network.",
            "example": 5.2
          },
          "consensusLayerApy": {
            "type": "number",
            "description": "Annual Percentage Yield (APY) specific to the consensus layer of the network.",
            "example": 3.8
          },
          "executionLayerApy": {
            "type": "number",
            "description": "Annual Percentage Yield (APY) specific to the execution layer of the network.",
            "example": 6.5
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the last update to this data.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "stakingPeriodNumber",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "networkApy",
          "consensusLayerApy",
          "executionLayerApy",
          "updatedAt"
        ]
      },
      "GetNetworkAPYListResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetNetworkAPYResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "list"
        ]
      },
      "GetNetworkStatsHistoryNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115207
          },
          "message": {
            "type": "string",
            "default": "The data for the parameters provided could not be found."
          },
          "name": {
            "type": "string",
            "default": "GetNetworkStatsHistoryNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetNetworkValidatorsCountResponse": {
        "type": "object",
        "properties": {
          "stakingPeriodNumber": {
            "type": "number",
            "description": "Unique identifier for the current staking period.",
            "example": 1227
          },
          "stakingPeriodStart": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "stakingPeriodEnd": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "validatorsCount": {
            "type": "number",
            "description": "Validators count for the current staking period.",
            "example": 297
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the last update to this data.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "stakingPeriodNumber",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "validatorsCount",
          "updatedAt"
        ]
      },
      "GetNetworkValidatorsCountListResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetNetworkValidatorsCountResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "list"
        ]
      },
      "GetNetworkDelegatorsCountResponse": {
        "type": "object",
        "properties": {
          "stakingPeriodNumber": {
            "type": "number",
            "description": "Unique identifier for the current staking period.",
            "example": 1227
          },
          "stakingPeriodStart": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "stakingPeriodEnd": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "delegatorsCount": {
            "type": "number",
            "description": "Delegators count for the current staking period.",
            "example": 21751
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the last update to this data.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "stakingPeriodNumber",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "delegatorsCount",
          "updatedAt"
        ]
      },
      "GetNetworkDelegatorsCountListResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetNetworkDelegatorsCountResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "list"
        ]
      },
      "GetNetworkStakeResponse": {
        "type": "object",
        "properties": {
          "stakingPeriodNumber": {
            "type": "number",
            "description": "Unique identifier for the current staking period.",
            "example": 1227
          },
          "stakingPeriodStart": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "stakingPeriodEnd": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "stake": {
            "type": "number",
            "description": "Stake for the current staking period",
            "example": 665113860
          },
          "currency": {
            "type": "string",
            "enum": [
              "ETH",
              "SOL",
              "DOT",
              "KSM",
              "GLMR",
              "VARA",
              "ATOM",
              "MATIC",
              "SUI",
              "AVAIL",
              "TON"
            ],
            "description": "Reward currency.",
            "example": "DOT"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the last update to this data.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "stakingPeriodNumber",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "stake",
          "currency",
          "updatedAt"
        ]
      },
      "GetNetworkStakeListResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetNetworkStakeResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "list"
        ]
      },
      "GetNetworkRewardsStatsHistoryException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115208
          },
          "message": {
            "type": "string",
            "default": "The list of network rewards could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetNetworkRewardsStatsHistoryException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetNetworkRewardsResponse": {
        "type": "object",
        "properties": {
          "stakingPeriodNumber": {
            "type": "number",
            "description": "Unique identifier for the current staking period.",
            "example": 12345
          },
          "stakingPeriodStart": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "stakingPeriodEnd": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "rewardType": {
            "type": "string",
            "description": "Reward type.",
            "example": "staking"
          },
          "rewards": {
            "type": "number",
            "description": "Reward amount for the current staking period",
            "example": 352843
          },
          "currency": {
            "type": "string",
            "enum": [
              "ETH",
              "SOL",
              "DOT",
              "KSM",
              "GLMR",
              "VARA",
              "ATOM",
              "MATIC",
              "SUI",
              "AVAIL",
              "TON"
            ],
            "description": "Reward currency.",
            "example": "DOT"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the last update to this data.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "stakingPeriodNumber",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "rewardType",
          "rewards",
          "currency",
          "updatedAt"
        ]
      },
      "GetNetworkRewardsListResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetNetworkRewardsResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "list"
        ]
      },
      "InvalidValidatorAddressException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115100
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the validator address provided is not valid on the specified network. Please check the request parameters and try again."
          },
          "name": {
            "type": "string",
            "default": "InvalidValidatorAddressException"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationErrorResponse"
            }
          }
        },
        "required": [
          "code",
          "message",
          "name",
          "errors"
        ]
      },
      "GetValidatorSummaryException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115309
          },
          "message": {
            "type": "string",
            "default": "The validator summary could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetValidatorSummaryException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "Reward": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Reward type.",
            "enum": [
              "consensus",
              "execution"
            ]
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "Amount of tokens in the stake."
          },
          "amountUsd": {
            "type": "number",
            "format": "float",
            "description": "Amount of tokens in the stake in USD."
          },
          "currency": {
            "type": "string",
            "enum": [
              "ETH",
              "SOL",
              "DOT",
              "KSM",
              "GLMR",
              "VARA",
              "ATOM",
              "MATIC",
              "SUI",
              "AVAIL",
              "TON"
            ],
            "description": "Currency of the tokens."
          },
          "recipient": {
            "type": "string",
            "description": "Rewards recipient address."
          }
        },
        "required": [
          "type",
          "amount",
          "amountUsd",
          "currency",
          "recipient"
        ]
      },
      "GetValidatorSummaryRecord": {
        "type": "object",
        "properties": {
          "stakingPeriod": {
            "type": "number",
            "description": "Number of the staking period."
          },
          "stakingPeriodStart": {
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format."
          },
          "stakingPeriodEnd": {
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format."
          },
          "stake": {
            "type": "number",
            "description": "Total stake balance of the validator."
          },
          "stakeUsd": {
            "type": "number",
            "description": "Total stake balance of the validator."
          },
          "rewards": {
            "description": "List of rewards for the staking period.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reward"
            }
          },
          "tokenPrice": {
            "type": "number",
            "description": "Token price in USD."
          },
          "apy": {
            "type": "number",
            "description": "Validator annual percentage yield (APY)."
          }
        },
        "required": [
          "stakingPeriod",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "stake",
          "stakeUsd",
          "rewards",
          "tokenPrice",
          "apy"
        ]
      },
      "GetValidatorSummaryResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetValidatorSummaryRecord"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "list"
        ]
      },
      "GetValidatorStakesException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115300
          },
          "message": {
            "type": "string",
            "default": "The list of validator stakes could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetValidatorStakesException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidatorStake": {
        "type": "object",
        "properties": {
          "stakingPeriod": {
            "type": "number",
            "description": "Number of the staking period."
          },
          "stakingPeriodStart": {
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format."
          },
          "stakingPeriodEnd": {
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format."
          },
          "stake": {
            "type": "number",
            "description": "Total stake balance of the validator."
          },
          "stakeUsd": {
            "type": "number",
            "description": "Total stake balance of the validator in USD."
          },
          "tokenPrice": {
            "type": "number",
            "description": "Token price in USD."
          }
        },
        "required": [
          "stakingPeriod",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "stake",
          "stakeUsd",
          "tokenPrice"
        ]
      },
      "GetValidatorStakesResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorStake"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "list"
        ]
      },
      "GetValidatorRewardsException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115301
          },
          "message": {
            "type": "string",
            "default": "The list of validator rewards could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetValidatorRewardsException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidatorRewards": {
        "type": "object",
        "properties": {
          "stakingPeriod": {
            "type": "number",
            "description": "Number of the staking period."
          },
          "stakingPeriodStart": {
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format."
          },
          "stakingPeriodEnd": {
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format."
          },
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reward"
            }
          },
          "tokenPrice": {
            "type": "number",
            "description": "Token price in USD."
          }
        },
        "required": [
          "stakingPeriod",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "rewards",
          "tokenPrice"
        ]
      },
      "GetValidatorRewardsResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorRewards"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "list"
        ]
      },
      "GetValidatorApyException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115302
          },
          "message": {
            "type": "string",
            "default": "The validator annual percentage yield could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetValidatorApyException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidatorAPY": {
        "type": "object",
        "properties": {
          "stakingPeriod": {
            "type": "number",
            "description": "Number of the staking period."
          },
          "stakingPeriodStart": {
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format."
          },
          "stakingPeriodEnd": {
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format."
          },
          "apy": {
            "type": "number",
            "description": "Validator annual percentage yield (APY)."
          }
        },
        "required": [
          "stakingPeriod",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "apy"
        ]
      },
      "GetValidatorAPYResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorAPY"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "list"
        ]
      },
      "GetValidatorFeeException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115302
          },
          "message": {
            "type": "string",
            "default": "The list of validator fee could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetValidatorFeeException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidatorFee": {
        "type": "object",
        "properties": {
          "stakingPeriod": {
            "type": "number",
            "description": "Number of the staking period."
          },
          "stakingPeriodStart": {
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format."
          },
          "stakingPeriodEnd": {
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format."
          },
          "fee": {
            "type": "number",
            "description": "Validator fee."
          }
        },
        "required": [
          "stakingPeriod",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "fee"
        ]
      },
      "GetValidatorFeeResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorFee"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "list"
        ]
      },
      "GetValidatorInfoException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115304
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetValidatorInfoException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetValidatorNameResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Validator name."
          }
        },
        "required": [
          "name"
        ]
      },
      "GetValidatorInfoNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115305
          },
          "message": {
            "type": "string",
            "default": "The validator could not be found. Please specify the correct validator address and the network."
          },
          "name": {
            "type": "string",
            "default": "GetValidatorInfoNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetValidatorStateResponse": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "Validator state."
          },
          "activatedAt": {
            "type": "string",
            "description": "Timestamp of the validator activated date in the ISO 8601 format."
          },
          "activatedStakingPeriodNum": {
            "type": "number",
            "description": "Timestamp of the validator activated staking period."
          }
        },
        "required": [
          "activatedAt",
          "activatedStakingPeriodNum"
        ]
      },
      "GetValidatorDelegatorsCountException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115306
          },
          "message": {
            "type": "string",
            "default": "The data could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetValidatorDelegatorsCountException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidatorDelegatorsCount": {
        "type": "object",
        "properties": {
          "stakingPeriod": {
            "type": "number",
            "description": "Number of the staking period."
          },
          "stakingPeriodStart": {
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format."
          },
          "stakingPeriodEnd": {
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format."
          },
          "count": {
            "type": "number",
            "description": "Validator annual percentage yield (APY)."
          }
        },
        "required": [
          "stakingPeriod",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "count"
        ]
      },
      "GetValidatorDelegatorsCountResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorDelegatorsCount"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "list"
        ]
      },
      "GetValidatorStatusesException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115308
          },
          "message": {
            "type": "string",
            "default": "The list of validator statuses could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetValidatorStatusesException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidatorStatuses": {
        "type": "object",
        "properties": {
          "pending_initialized": {
            "type": "number",
            "description": "Number of validators which are initialized but not yet in the queue for activation."
          },
          "pending_queued": {
            "type": "number",
            "description": "Number of validators that entered a queue for activation."
          },
          "active_ongoing": {
            "type": "number",
            "description": "Number of validators that were activated and currently participate in attesting and proposing blocks."
          },
          "active_slashed": {
            "type": "number",
            "description": "Number of validators that were slashed due to misbehaviors."
          },
          "exited_unslashed": {
            "type": "number",
            "description": "Number of validators that have exited the network without being slashed and are no longer acting as validators."
          },
          "exited_slashed": {
            "type": "number",
            "description": "Number of validators that have exited the network after being slashed and are no longer acting as validators."
          },
          "withdrawal_possible": {
            "type": "number",
            "description": "Number of validators having a non-zero balance."
          },
          "withdrawal_done": {
            "type": "number",
            "description": "Number of validators completed the withdrawal process."
          }
        }
      },
      "GetValidatorStatusesResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total count of provisioned validator statuses."
          },
          "by_status": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorStatuses"
            }
          }
        },
        "required": [
          "total",
          "by_status"
        ]
      },
      "ValidatorStatusesDetailed": {
        "type": "object",
        "properties": {
          "validator": {
            "type": "string",
            "description": "Validator address in the required network. For the Ethereum network, it is a public validator key."
          },
          "status": {
            "type": "string",
            "description": "Validator status."
          }
        }
      },
      "GetValidatorStatusesDetailedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total count of validators."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorStatusesDetailed"
            }
          }
        },
        "required": [
          "total",
          "list"
        ]
      },
      "InvalidDelegatorAddressException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115400
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the delegator address provided is not valid on the specified network. Please check the request parameters and try again."
          },
          "name": {
            "type": "string",
            "default": "InvalidDelegatorAddressException"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationErrorResponse"
            }
          }
        },
        "required": [
          "code",
          "message",
          "name",
          "errors"
        ]
      },
      "GetDelegatorSummaryException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115407
          },
          "message": {
            "type": "string",
            "default": "The delegator summary could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetDelegatorSummaryException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "DelegatorSummary": {
        "type": "object",
        "properties": {
          "stakingPeriod": {
            "type": "number",
            "description": "Number of the staking period."
          },
          "stakingPeriodStart": {
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format."
          },
          "stakingPeriodEnd": {
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format."
          },
          "grossApy": {
            "type": "number",
            "description": "Delegator gross annual percentage yield (APY)."
          },
          "netApy": {
            "type": "number",
            "description": "Delegator net annual percentage yield."
          },
          "stake": {
            "type": "number",
            "description": "Total stake balance of the delegator."
          },
          "stakeUsd": {
            "type": "number",
            "description": "Total USD stake balance of the delegator."
          },
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reward"
            }
          },
          "validator": {
            "type": "string",
            "description": "Validator address."
          },
          "recipient": {
            "type": "string",
            "description": "Rewards recipient address."
          },
          "tokenPrice": {
            "type": "number",
            "description": "Token price."
          },
          "currency": {
            "type": "string",
            "enum": [
              "ETH",
              "SOL",
              "DOT",
              "KSM",
              "GLMR",
              "VARA",
              "ATOM",
              "MATIC",
              "SUI",
              "AVAIL",
              "TON"
            ],
            "description": "Currency of the tokens."
          },
          "notFinalized": {
            "type": "boolean",
            "description": "Boolean flag indicating whether the rewards for the specified epoch have been finalized."
          }
        },
        "required": [
          "stakingPeriod",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "grossApy",
          "netApy",
          "stake",
          "stakeUsd",
          "rewards",
          "recipient",
          "tokenPrice",
          "currency"
        ]
      },
      "GetDelegatorSummaryResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DelegatorSummary"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "list"
        ]
      },
      "GetDelegatorStakesException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115402
          },
          "message": {
            "type": "string",
            "default": "The list of delegator stakes could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetDelegatorStakesException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "DelegatorStake": {
        "type": "object",
        "properties": {
          "stakingPeriod": {
            "type": "number",
            "description": "Number of the staking period."
          },
          "stakingPeriodStart": {
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format."
          },
          "stakingPeriodEnd": {
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format."
          },
          "stake": {
            "type": "number",
            "description": "Total stake balance of the delegator."
          },
          "stakeUsd": {
            "type": "number",
            "description": "Total stake balance of the delegator in USD."
          },
          "tokenPrice": {
            "type": "number",
            "description": "Token price in USD."
          },
          "currency": {
            "type": "string",
            "description": "Currency."
          },
          "validator": {
            "type": "string",
            "description": "Validator address"
          }
        },
        "required": [
          "stakingPeriod",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "stake",
          "stakeUsd",
          "tokenPrice",
          "currency"
        ]
      },
      "GetDelegatorStakesResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DelegatorStake"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "list"
        ]
      },
      "GetDelegatorRewardsException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115403
          },
          "message": {
            "type": "string",
            "default": "The list of delegator rewards could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetDelegatorRewardsException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "DelegatorRewards": {
        "type": "object",
        "properties": {
          "stakingPeriod": {
            "type": "number",
            "description": "Number of the staking period."
          },
          "stakingPeriodStart": {
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format."
          },
          "stakingPeriodEnd": {
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format."
          },
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reward"
            }
          },
          "validator": {
            "type": "string",
            "description": "Validator address."
          },
          "notFinalized": {
            "type": "boolean",
            "description": "Boolean flag indicating whether the rewards for the specified epoch have been finalized."
          }
        },
        "required": [
          "stakingPeriod",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "rewards"
        ]
      },
      "GetDelegatorRewardsResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DelegatorRewards"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "list"
        ]
      },
      "GetDelegatorApyException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115404
          },
          "message": {
            "type": "string",
            "default": "The delegator annual percentage yield could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetDelegatorApyException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "DelegatorAPY": {
        "type": "object",
        "properties": {
          "validator": {
            "type": "string",
            "description": "Validator address."
          },
          "stakingPeriod": {
            "type": "number",
            "description": "Number of the staking period."
          },
          "stakingPeriodStart": {
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format."
          },
          "stakingPeriodEnd": {
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format."
          },
          "grossApy": {
            "type": "number",
            "description": "Delegator gross annual percentage yield (APY)."
          },
          "netApy": {
            "type": "number",
            "description": "Delegator net annual percentage yield."
          }
        },
        "required": [
          "stakingPeriod",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "grossApy",
          "netApy"
        ]
      },
      "GetDelegatorAPYResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DelegatorAPY"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "list"
        ]
      },
      "GetDelegatorAutostakingDataException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115406
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetDelegatorAutostakingDataException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "Web3CreateTransactionException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103104
          },
          "message": {
            "type": "string",
            "default": "The Web3 transaction could not be created because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "Web3CreateTransactionException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "EthereumUnsignedTransactionResponse": {
        "type": "object",
        "properties": {
          "serializeTx": {
            "type": "string",
            "description": "Serialized unsigned transaction.",
            "example": "0x02f902d705808301674e8508530af16e830186a094681a1b3441c6bfb12f91651efd9f02c83c0702938901bc16d674ec800000b902a44f498c730000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030aa5f27070a21d79455c4a9b73c0aa4a8b1a65a1fb530d7fd8e6cd23aa16660679ac43ee4861098f6d9166aed3a4d8abb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002001000000000000000000000028c84612d37de9209018ad96167f12169b653e9a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060978c565cd915f4e885b4201093d1501697610eb9ee99b9b60b70434dc330e98d5b42927725304ded48483a8b8f39506d09bcb22ee18d4f6b50257946ac5ee360385308d95c0e2bc963902d42e985c29ee489aa3c989ac1561c952a6424f107a800000000000000000000000000000000000000000000000000000000000000014cb452f6e3f10ba2175c86a0284f53fcb61404b458393391abc3d5622e3e55cdc0",
            "pattern": "^0x([A-Fa-f0-9])+$",
            "nullable": false
          },
          "to": {
            "type": "string",
            "description": "Recipient address for this transaction.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "gasLimit": {
            "type": "string",
            "example": "0",
            "description": "Maximum gas limit for this block."
          },
          "data": {
            "type": "string",
            "example": "",
            "description": "Transaction data."
          },
          "value": {
            "type": "string",
            "example": "0",
            "description": "Amount of tokens to send in Wei."
          },
          "chainId": {
            "type": "string",
            "example": "0",
            "description": "Chain ID this transaction is authorized on, as specified by EIP-155."
          },
          "type": {
            "type": "string",
            "example": "0",
            "description": "EIP-2718 type of this transaction envelope."
          },
          "maxFeePerGas": {
            "type": "string",
            "example": "0",
            "description": "Maximum price per unit of gas this transaction will pay for the combined EIP-1559 block's base fee and this transaction's priority fee in Wei."
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "example": "0",
            "description": "Price per unit of gas in Wei, which is added to the EIP-1559 block's base fee. This added fee is used to incentivize miners to prioritize this transaction."
          }
        },
        "required": [
          "serializeTx",
          "to",
          "gasLimit",
          "data",
          "value",
          "chainId",
          "type",
          "maxFeePerGas",
          "maxPriorityFeePerGas"
        ]
      },
      "DepositDataRequest": {
        "type": "object",
        "properties": {
          "pubkey": {
            "type": "string",
            "description": "Validator public key.",
            "example": [
              "0x4Ef81c0018aB0DCbBdC8915D26efAcEa7CDef61eE9aBdddcBdAD2f2F04c5b6E4fBA6F5afD1Ad46267c1DC8544E690fE4"
            ],
            "pattern": "^0x[a-fA-F0-9]{96}$"
          },
          "signature": {
            "type": "string",
            "description": "Validator signature.",
            "example": "0x83D2E925AEAEdcB18db983Bd447db0BFc1Ee9a6Ead118E5BEfeBcb24BA8C0efd3BD19Cb1cE8e807Fc980a67bBbf8b11e039efe2DB71fcdF096fccac5B04dF80f6a1804cd8d492455D30abE27FcDbDA78AFE61856cad65ffF5cA48Ed4776edd88",
            "pattern": "^0x[a-fA-F0-9]{192}$"
          },
          "depositDataRoot": {
            "type": "string",
            "description": "Hash of the deposit data.",
            "example": "0x784bfffb4DfEFb457BA9187B38E49a1Bc0f4af50EDDDaca9581AA0aA7F98E96C",
            "pattern": "^0x[a-fA-F0-9]{64}$"
          }
        },
        "required": [
          "pubkey",
          "signature",
          "depositDataRoot"
        ]
      },
      "StakeEthereumRequest": {
        "type": "object",
        "properties": {
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address for direct staking or EigenPodAddress for restaking.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "depositData": {
            "minItems": 1,
            "maxItems": 400,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepositDataRequest"
            }
          }
        },
        "required": [
          "withdrawalAddress",
          "depositData"
        ]
      },
      "InvalidDepositDataSignException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103113
          },
          "message": {
            "type": "string",
            "default": "The withdrawal transaction could not be created because the signature of the deposit data is invalid. Please re-sign the serialized transaction by following https://docs.p2p.org/docs/signing-transaction-eth."
          },
          "name": {
            "type": "string",
            "default": "InvalidDepositDataSignException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "PubkeyDoNotExistsException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103105
          },
          "message": {
            "type": "string",
            "default": "The withdrawal transaction could not be created because the validator public keys provided are invalid or do not exist."
          },
          "name": {
            "type": "string",
            "default": "PubkeyDoNotExistsException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidatorNotActiveException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103106
          },
          "message": {
            "type": "string",
            "default": "The withdrawal transaction could not be created because one or more validators are not participating currently in the validator activities."
          },
          "name": {
            "type": "string",
            "default": "ValidatorNotActiveException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "WithdrawalTransactionException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103107
          },
          "message": {
            "type": "string",
            "default": "The withdrawal transaction could not be created because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "WithdrawalTransactionException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "UnstakeEthereumRequest": {
        "type": "object",
        "properties": {
          "pubkeys": {
            "description": "List of validators public keys.",
            "example": [
              "0xffC08FcD7cFeF5c70fB2b0e1f2A8EaA690AaE2bDFfa5dBEc4dEef31DcC0B19eB1f9Cebe3E2fe9eefBD9a1BDF6FD89b39"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "pubkeys"
        ]
      },
      "EthereumConvertTxDataRequestDto": {
        "type": "object",
        "properties": {
          "to": {
            "type": "string",
            "description": "Recipient address for this transaction.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb"
          },
          "value": {
            "type": "string",
            "description": "Value of Ether to send in Wei.",
            "example": "64000000000000000000"
          },
          "data": {
            "type": "string",
            "description": "Data for the transaction, typically for contract calls.",
            "example": "0x"
          }
        },
        "required": [
          "to",
          "value",
          "data"
        ]
      },
      "ValidatorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "unknown",
              "not_found",
              "pending_initialized",
              "pending_queued",
              "active_ongoing",
              "active_exiting",
              "active_slashed",
              "exited_unslashed",
              "exited_slashed",
              "withdrawal_possible",
              "withdrawal_done"
            ],
            "description": "<p>State of the validator:</p><ul><li>`not_found` — specified validator could not be located.</li><li>`pending_initialized` — validator is initialized but not yet in the queue for activation.</li><li>`pending_queued` — validator entered a queue for activation.</li><li>`active_ongoing` — validator was activated and currently participates in attesting and proposing blocks.</li><li>`active_exiting` — validator is in process of exiting the network while participating in the validator activities.</li><li>`active_slashed` — validator was slashed due to misbehaviors.</li><li>`exited_unslashed` — validator has exited the network without being slashed and is no longer acting as a validator.</li><li>`exited_slashed` — validator has exited the network after being slashed and is no longer acting as a validator.</li><li>`withdrawal_possible` — validator has a non-zero balance.</li><li>`withdrawal_done` — validator completed the withdrawal process.</li></ul>",
            "example": "active_ongoing"
          },
          "amount": {
            "type": "string",
            "example": "1",
            "description": "Total stake amount for the validator at the moment."
          },
          "pubkey": {
            "type": "string",
            "description": "Validator public key.",
            "example": [
              "0xbe5E9c3Bb9eba1BF4C5eC1c1cbcF85ee2CE2fEC66Ce5460C23eF82332A044FDCabF7011F588CCbD77E73CCe6c4accDF0"
            ],
            "pattern": "^0x[a-fA-F0-9]{96}$"
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address of the validator.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "status",
          "amount",
          "pubkey"
        ]
      },
      "ValidatorsResponse": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorResponse"
            }
          }
        },
        "required": [
          "list"
        ]
      },
      "ValidatorsRequest": {
        "type": "object",
        "properties": {
          "pubkeys": {
            "description": "List of validator public keys.",
            "example": [
              "0xffC08FcD7cFeF5c70fB2b0e1f2A8EaA690AaE2bDFfa5dBEc4dEef31DcC0B19eB1f9Cebe3E2fe9eefBD9a1BDF6FD89b39"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "pubkeys"
        ]
      },
      "VemIdAlreadyExistException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 112103
          },
          "message": {
            "type": "string",
            "default": "The VEM request could not be created because the VEM ID specified already exists."
          },
          "name": {
            "type": "string",
            "default": "VemIdAlreadyExistException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "VemCreateException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 112101
          },
          "message": {
            "type": "string",
            "default": "The VEM request could not be created because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "VemCreateException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "CreateVemRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "Arbitrary UUID. You can later use that UUID to check the status of the VEM request."
          },
          "type": {
            "type": "string",
            "enum": [
              "off_chain",
              "on_chain"
            ],
            "description": "<p>Type of the VEM request:</p><ul><li>`off_chain` — off-chain signature.</li><li>`on_chain` — on-chain signature.</li></ul>",
            "example": "off_chain",
            "default": "off_chain"
          },
          "vemRequest": {
            "type": "string",
            "description": "Prepared VEM request. Required if the type is `off_chain`.",
            "example": "{\"action\": \"vem_request\",\"pubkeys\": [\"0x867a9f95287decd74e076b8fefca3022fcb2c3c37de246e950ade0cc3609c74d4badda62657a64c2c4009f1b6625c647\", \"0x93e298f6ac5fb8f262a23450d1638aec1c45f77fd1ac86beb19b696b3b84fef3694e9b2166b337783911a3d7df13fbf1\"],\"ecdh_client_pubkey\": \"0xa16c2f1354a7a58abbf78172730595c4de8277962ebe92100793f99ea80f66abe5e75a14a52e86ce1c086c1ca2e1662b3900510346d848b425d34279ceea92661fb1166b9438589c0b57eb4ebb69e0c3844ebe5ad4c0e316b637d47148d69dc2387c2968c82d198114a6c0f14a605a9e85110d24a9db4f11963b9b13dc788c0538096cadffd258364c63621f6bb1a3e515d3741af4619e62452a394fab9d84be7cee255fdd7216401cafee6471b4adbb77e93f878f1bb4df633e0632522b51fe70fc154e7d3e60a69f815a4e2a84506f05b1ccfce01e873cd7dc51fba0b6eac66af1c0a7500f71af405a6c34ffd27a1239180c22fbddf8dc15d30c821c57307d\"}"
          },
          "vemRequestSignature": {
            "type": "string",
            "description": "Signature of `vem_request` by either `withdrawalAddress` or `controllerAddress`. Required if the type is `off_chain`.",
            "example": "0x5d64827430e3d2fc1f4C9293709B13fc2af45c8eed295f96a4195d2c9224b5e344a969279ff437139868fc7e534191217ef3fe4d9c9b71d1bfeeDASbfb26d118243"
          },
          "vemRequestSignedBy": {
            "type": "string",
            "description": "`withdrawalAddress` or `controllerAddress` that signed the request. Required if the type is `off_chain`.",
            "example": "0x78ADAeE48151b2E42de20f42b1a1980871314Ef5"
          },
          "vemRequestTxId": {
            "type": "string",
            "description": "Hash of the successful `vem_request` transaction. Required if the type is `on_chain`.",
            "example": null
          },
          "vemRequestProof": {
            "type": "string",
            "description": "Hash of the signed `vemRequestTxId` transaction. Required if the type is `on_chain`.",
            "example": null
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "VemNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 112102
          },
          "message": {
            "type": "string",
            "default": "The VEM request ID provided could not be found. Please specify the correct UUID."
          },
          "name": {
            "type": "string",
            "default": "VemNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "VemGetException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 112104
          },
          "message": {
            "type": "string",
            "default": "The status of the VEM request could not be obtained because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "VemGetException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "VemResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "UUID that was specified in the VEM request."
          },
          "status": {
            "type": "string",
            "enum": [
              "processing",
              "success",
              "error",
              "fault"
            ],
            "description": "<p>Current status of the VEM request:</p><ul><li>`processing` — requst is in progress.</li><li>`success` — answer is ready.</li><li>`error` — there is an issue with the data, unable to create VEM.</li><li>`fault` — error occurred on the server side.</li></ul>",
            "example": "processing"
          },
          "type": {
            "type": "string",
            "enum": [
              "off_chain",
              "on_chain"
            ],
            "description": "<p>Type of the VEM request:</p><ul><li>`off_chain` — off-chain signature.</li><li>`on_chain` — on-chain signature.</li></ul>",
            "example": "off_chain"
          },
          "vemRequest": {
            "type": "string",
            "description": "Prepared VEM request.",
            "example": "{\"action\": \"vem_request\",\"pubkeys\": [\"0x867a9f95287decd74e076b8fefca3022fcb2c3c37de246e950ade0cc3609c74d4badda62657a64c2c4009f1b6625c647\", \"0x93e298f6ac5fb8f262a23450d1638aec1c45f77fd1ac86beb19b696b3b84fef3694e9b2166b337783911a3d7df13fbf1\"],\"ecdh_client_pubkey\": \"0xa16c2f1354a7a58abbf78172730595c4de8277962ebe92100793f99ea80f66abe5e75a14a52e86ce1c086c1ca2e1662b3900510346d848b425d34279ceea92661fb1166b9438589c0b57eb4ebb69e0c3844ebe5ad4c0e316b637d47148d69dc2387c2968c82d198114a6c0f14a605a9e85110d24a9db4f11963b9b13dc788c0538096cadffd258364c63621f6bb1a3e515d3741af4619e62452a394fab9d84be7cee255fdd7216401cafee6471b4adbb77e93f878f1bb4df633e0632522b51fe70fc154e7d3e60a69f815a4e2a84506f05b1ccfce01e873cd7dc51fba0b6eac66af1c0a7500f71af405a6c34ffd27a1239180c22fbddf8dc15d30c821c57307d\"}"
          },
          "vemRequestSignature": {
            "type": "string",
            "description": "Signature of `vem_request` by either `withdrawalAddress` or `controllerAddress`.",
            "example": "0x5d64827430e3d2fc1f4C9293709B13fc2af45c8eed295f96a4195d2c9224b5e344a969279ff437139868fc7e534191217ef3fe4d9c9b71d1bfeeDASbfb26d118243"
          },
          "vemRequestSignedBy": {
            "type": "string",
            "description": "`withdrawalAddress` or `controllerAddress` that signed the request.",
            "example": "0x78ADAeE48151b2E42de20f42b1a1980871314Ef5"
          },
          "vemRequestTxId": {
            "type": "string",
            "description": "Hash of the successful `vem_request` transaction.",
            "example": null
          },
          "vemRequestProof": {
            "type": "string",
            "description": "Hash of the signed `vemRequestTxId` transaction.",
            "example": null
          },
          "error": {
            "type": "string",
            "description": "Error message.",
            "example": ""
          },
          "vemResult": {
            "type": "string",
            "description": "Encrypted VEM result.",
            "example": ""
          },
          "forkVersion": {
            "type": "string",
            "description": "Version of the Ethereum fork."
          }
        },
        "required": [
          "id",
          "status",
          "type"
        ]
      },
      "EigenOperatorGetListException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103130
          },
          "message": {
            "type": "string",
            "default": "The list of node operators could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "EigenOperatorGetListException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "EigenOperatorResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "UUID specified in the node set-up request."
          },
          "address": {
            "type": "string",
            "description": "EigenLayer node operator address.",
            "example": "0xb1bd1266ec811048161424f534e74c76c48e6ce2",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "name": {
            "type": "string",
            "example": "P2P",
            "description": "Node operator's name."
          }
        },
        "required": [
          "id",
          "address",
          "name"
        ]
      },
      "GetListEigenOperatorResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total number of validators relevant to the current request, based on filters applied."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EigenOperatorResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "DelegateToRequest": {
        "type": "object",
        "properties": {
          "operatorAddress": {
            "type": "string",
            "description": "Аddress of the EigenLayer node operator where the restaked assets are delegated.",
            "example": "0xb1bd1266ec811048161424f534e74c76c48e6ce2",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "operatorAddress"
        ]
      },
      "WithdrawalCredentialsNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103201
          },
          "message": {
            "type": "string",
            "default": "The verify withdrawal credentials transaction could not be obtained because the activate restake request is not found. Please create an activate restake request by calling https://docs.p2p.org/reference/eth-eigen-verify-withdrawal-credentials-request."
          },
          "name": {
            "type": "string",
            "default": "WithdrawalCredentialsNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "WithdrawalCredentialsException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103200
          },
          "message": {
            "type": "string",
            "default": "The activate restake request could not be created because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "WithdrawalCredentialsException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "VerifyWithdrawalCredentialsRequest": {
        "type": "object",
        "properties": {
          "eigenPodOwnerAddress": {
            "type": "string",
            "description": "Owner of the EigenPod address.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "pubkey": {
            "type": "string",
            "description": "Validator public keys."
          }
        },
        "required": [
          "eigenPodOwnerAddress",
          "pubkey"
        ]
      },
      "EigenPodOwnerAddressRequest": {
        "type": "object",
        "properties": {
          "eigenPodOwnerAddress": {
            "type": "string",
            "description": "Owner of the EigenPod address.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "eigenPodOwnerAddress"
        ]
      },
      "VerifyCheckpointProofsRequest": {
        "type": "object",
        "properties": {
          "eigenPodOwnerAddress": {
            "type": "string",
            "description": "Owner of the EigenPod address.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "activateTx": {
            "type": "string",
            "description": "Hash of the start checkpoint transaction."
          }
        },
        "required": [
          "eigenPodOwnerAddress",
          "activateTx"
        ]
      },
      "QueueWithdrawalsRequest": {
        "type": "object",
        "properties": {
          "eigenPodOwnerAddress": {
            "type": "string",
            "description": "Owner of the EigenPod address.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to unstake.",
            "minimum": 1,
            "example": 1
          }
        },
        "required": [
          "eigenPodOwnerAddress",
          "amount"
        ]
      },
      "CompleteQueuedWithdrawalsRequest": {
        "type": "object",
        "properties": {
          "eigenPodOwnerAddress": {
            "type": "string",
            "description": "Owner of the EigenPod address.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "queueWithdrawalsTx": {
            "type": "string",
            "description": "Hash of the queue withdrawal transaction."
          }
        },
        "required": [
          "eigenPodOwnerAddress",
          "queueWithdrawalsTx"
        ]
      },
      "StatusException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119122
          },
          "message": {
            "type": "string",
            "default": "The transaction status could not be obtained because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "StatusException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SignTransactionResponse": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "mainnet",
              "kusama",
              "westend"
            ],
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>"
          },
          "signedTransaction": {
            "type": "string",
            "description": "Signed transaction in Base64 encrypted format which needs to be broadcast to the network.",
            "example": "0xbd018400cc7cb7325ad1208212e2d8ee41a7572e816d53ac1bcac1be5df433486819213c011a6fc75a4d779e13a789ce9fe03d5cbb090b1e9833ae38c2c873571b73e2d7393f30bf097d93ca1692d426196f263d609e4d421cef3e017ad8bd388604e47e839502a80006010700e40b5402",
            "pattern": "^0x([A-Fa-f0-9])+$",
            "nullable": false
          },
          "status": {
            "type": "string",
            "enum": [
              "success",
              "failed"
            ],
            "description": "Transaction status.",
            "example": "success"
          },
          "blockHash": {
            "type": "string",
            "description": "Block hash in which the transaction was included.",
            "example": "0x0628743b05ffb4c9d5ea2144b359af38910f0ae439a685f57d85b50b9481ba3f"
          },
          "blockId": {
            "type": "number",
            "description": "Unique block identifier.",
            "example": "17168395"
          },
          "extrinsicId": {
            "type": "number",
            "description": "Unique extrinsic identifier.",
            "example": "17177570-2"
          },
          "transactionHash": {
            "type": "string",
            "description": "Signed extrinsic transaction in hex format.",
            "example": "0xbd018400cc7cb7325ad1208212e2d8ee41a7572e816d53ac1bcac1be5df433486819213c011a6fc75a4d779e13a789ce9fe03d5cbb090b1e9833ae38c2c873571b73e2d7393f30bf097d93ca1692d426196f263d609e4d421cef3e017ad8bd388604e47e839502a80006010700e40b5402"
          },
          "signerAccount": {
            "type": "string",
            "description": "Account that signed the transaction.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "data": {
            "type": "string",
            "description": "Method data."
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "network",
          "signedTransaction",
          "status",
          "blockHash",
          "blockId",
          "extrinsicId",
          "transactionHash",
          "signerAccount",
          "data",
          "createdAt"
        ]
      },
      "ExtrinsicCouldNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119116
          },
          "message": {
            "type": "string",
            "default": "The extrinsic could not be found. Please specify the correct transaction data."
          },
          "name": {
            "type": "string",
            "default": "ExtrinsicCouldNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ExtrinsicCouldNotDryRunException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119125
          },
          "message": {
            "type": "string",
            "default": "The transaction has not been run in dry mode"
          },
          "name": {
            "type": "string",
            "default": "ExtrinsicCouldNotDryRunException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SendException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119123
          },
          "message": {
            "type": "string",
            "default": "The transaction could not be broadcasted because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "SendException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionUsurpedException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119113
          },
          "message": {
            "type": "string",
            "default": "The transaction has not been broadcasted because it was rejected by the network as usurped."
          },
          "name": {
            "type": "string",
            "default": "TransactionUsurpedException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "CouldNotGetStateException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119117
          },
          "message": {
            "type": "string",
            "default": "The transaction has not been broadcasted because the status of the extrinsic could not be obtained."
          },
          "name": {
            "type": "string",
            "default": "CouldNotGetStateException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ExtrinsicCouldNotSendException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119118
          },
          "message": {
            "type": "string",
            "default": "The transaction has not been broadcasted because it was rejected by the server."
          },
          "name": {
            "type": "string",
            "default": "ExtrinsicCouldNotSendException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionInvalidException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119112
          },
          "message": {
            "type": "string",
            "default": "The transaction has not been broadcasted because it was rejected by the network as invalid."
          },
          "name": {
            "type": "string",
            "default": "TransactionInvalidException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionFinalityTimeoutException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119114
          },
          "message": {
            "type": "string",
            "default": "The transaction has not been broadcasted because it was rejected by the network due to timeout."
          },
          "name": {
            "type": "string",
            "default": "TransactionFinalityTimeoutException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionDroppedException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119115
          },
          "message": {
            "type": "string",
            "default": "The transaction has not been broadcasted because it was rejected by the network as dropped."
          },
          "name": {
            "type": "string",
            "default": "TransactionDroppedException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SendRequest": {
        "type": "object",
        "properties": {
          "signedTransaction": {
            "type": "string",
            "description": "Signed transaction in Base64 encrypted format which needs to be broadcast to the network.",
            "example": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAcJjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+jagnMHpK8BDHt0PpssHwXGD2fBxS6MWBoxptD2u9TvrgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1NjSeWM5+GSJdoQd43Al9SVVXC9FfWGwbe7icpomwAUGodgXkTdUKpg0N73+KnqyVX9TXIp4citopJ3AAAAAAAah2BelAgULaAeR5s5tuI4eW3FQ9h/GeQpOtNEAAAAABqfVFxjHdMkoVmOYaR1etoteuKObS21cc1VbIQAAAAAGp9UXGSxcUSGMyUw9SvF/WNruCJuh/UTj29mKAAAAAAan1RcZNYTQ/u2bs0MdEyBr5UQoG1e4VmzFN1/0AAAAijW940iwWddz25ZC37fI0ue5fa+eTbC2ynBM3b0t4pcDAgMAAQBgAwAAAI5ELeF3F+N1ZPBWe0G1FV0heaKPY7e8dg5tBPbrf8voBAAAAAAAAABzZWVkgJaYAAAAAADIAAAAAAAAAAah2BeRN1QqmDQ3vf4qerJVf1NcinhyK2ikncAAAAAABAIBB3QAAAAAjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+iORC3hdxfjdWTwVntBtRVdIXmij2O3vHYObQT263/L6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQGAQMGCAUABAIAAAA="
          }
        },
        "required": [
          "signedTransaction"
        ]
      },
      "TransactionGetListException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119124
          },
          "message": {
            "type": "string",
            "default": "The list of broadcasted transactions could not be obtained because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "TransactionGetListException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "PolkadotTransactionResponse": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "mainnet",
              "kusama",
              "westend"
            ],
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — Kusama mainnet.</li><li>`westend` — Polkadot testnet.</li></ul>"
          },
          "signedTransaction": {
            "type": "string",
            "description": "Signed transaction in Base64 encrypted format which needs to be broadcast to the network.",
            "example": "0xbd018400cc7cb7325ad1208212e2d8ee41a7572e816d53ac1bcac1be5df433486819213c011a6fc75a4d779e13a789ce9fe03d5cbb090b1e9833ae38c2c873571b73e2d7393f30bf097d93ca1692d426196f263d609e4d421cef3e017ad8bd388604e47e839502a80006010700e40b5402",
            "pattern": "^0x([A-Fa-f0-9])+$",
            "nullable": false
          },
          "status": {
            "type": "string",
            "enum": [
              "success",
              "failed"
            ],
            "description": "Transaction status.",
            "example": "success"
          },
          "blockHash": {
            "type": "string",
            "description": "Block hash in which the transaction was included.",
            "example": "0x0628743b05ffb4c9d5ea2144b359af38910f0ae439a685f57d85b50b9481ba3f"
          },
          "blockId": {
            "type": "number",
            "description": "Unique block identifier.",
            "example": "17168395"
          },
          "extrinsicId": {
            "type": "number",
            "description": "Unique extrinsic identifier.",
            "example": "17177570-2"
          },
          "transactionHash": {
            "type": "string",
            "description": "Signed extrinsic transaction in hex format.",
            "example": "0xbd018400cc7cb7325ad1208212e2d8ee41a7572e816d53ac1bcac1be5df433486819213c011a6fc75a4d779e13a789ce9fe03d5cbb090b1e9833ae38c2c873571b73e2d7393f30bf097d93ca1692d426196f263d609e4d421cef3e017ad8bd388604e47e839502a80006010700e40b5402"
          },
          "signerAccount": {
            "type": "string",
            "description": "Account that signed the transaction.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "data": {
            "type": "string",
            "description": "Method data."
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "network",
          "signedTransaction",
          "status",
          "blockHash",
          "blockId",
          "extrinsicId",
          "transactionHash",
          "signerAccount",
          "data",
          "createdAt"
        ]
      },
      "GetListTransactionResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolkadotTransactionResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "AddressIsInvalidException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119101
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the address %s provided is invalid. Please specify the correct Avail address."
          },
          "name": {
            "type": "string",
            "default": "AddressIsInvalidException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "AddException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119120
          },
          "message": {
            "type": "string",
            "default": "The proxy account address could not be added because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "AddException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "InsufficientBalanceException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119102
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the amount of tokens on account is insufficient. Please check that the balance is more than %s."
          },
          "name": {
            "type": "string",
            "default": "InsufficientBalanceException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "0xa404160200165874de804160c3cd013d9b6f4bba864657c4c2168a542f78ff14a0253873190200000000"
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "createdAt"
        ]
      },
      "AddRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Proxied account is an address that transfers rights to a proxy account. The original account retains all of its rights, and the proxy account can be removed at any time.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "proxyAccountAddress": {
            "type": "string",
            "description": "Proxy account is an address that receives proxied account rights.",
            "example": "5Ggpg3JepXM3ZrktNpoc5QA1sKaFVpUPWMRr7jppiMxTuU75"
          }
        },
        "required": [
          "stashAccountAddress",
          "proxyAccountAddress"
        ]
      },
      "ProxyNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119107
          },
          "message": {
            "type": "string",
            "default": "The proxy account address provided could not be found. Please specify the correct address."
          },
          "name": {
            "type": "string",
            "default": "ProxyNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RemoveException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119121
          },
          "message": {
            "type": "string",
            "default": "The proxy account address could not be removed because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "RemoveException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RemoveRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Proxied account is an address that transfers rights to a proxy account. The original account retains all of its rights, and the proxy account can be removed at any time.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "proxyAccountAddress": {
            "type": "string",
            "description": "Proxy account is an address that receives proxied account rights.",
            "example": "5Ca1Bqfzc4DdU6zMXLu5UhpRtdX5EzCseDXW9YisVm25ATeJ"
          }
        },
        "required": [
          "stashAccountAddress",
          "proxyAccountAddress"
        ]
      },
      "StakeAmountTooSmallException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119106
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the bond amount is too small. Please check that the bond amount is more than %s and try again."
          },
          "name": {
            "type": "string",
            "default": "StakeAmountTooSmallException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "BondException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119132
          },
          "message": {
            "type": "string",
            "default": "The bond request could not be created because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "BondException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "PolkadotUnsignedBondTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "0xac0406000b0030ef7dba0203ded255321b86f5f975cf04fd0e9d2b1d941469d469dcc93b89441cdfe6c39f7b"
          },
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "rewardDestinationType": {
            "type": "string",
            "enum": [
              "staked",
              "stash",
              "controller",
              "account"
            ],
            "description": "<p>Rewards destination type:</p><ul><li>`staked` — rewards will be sent to your Stash account and added to your current bond (compounding rewards).</li><li>`stash` — rewards will be sent to your Stash account as transferrable balance (not compounding rewards).</li><li>`controller` — rewards will be sent to the controller account.</li><li>`account` — rewards will be sent to any account you specify as transferrable balance.</li></ul>"
          },
          "rewardDestination": {
            "type": "string",
            "description": "Rewards destination account address.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond (in usual DOTs/KSMs/WNDs).",
            "example": 3
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "stashAccountAddress",
          "rewardDestinationType",
          "rewardDestination",
          "amount",
          "createdAt"
        ]
      },
      "BondRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "rewardDestinationType": {
            "type": "string",
            "enum": [
              "staked",
              "stash",
              "controller",
              "account"
            ],
            "example": "account",
            "description": "<p>Rewards destination type:</p><ul><li>`staked` — rewards will be sent to your Stash account and added to your current bond (compounding rewards).</li><li>`stash` — rewards will be sent to your Stash account as transferrable balance (not compounding rewards).</li><li>`controller` — rewards will be sent to the controller account.</li><li>`account` — rewards will be sent to any account you specify as transferrable balance.</li></ul>"
          },
          "rewardDestination": {
            "type": "string",
            "description": "Rewards destination account address.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond (in usual DOTs/KSMs/WNDs).",
            "example": 3
          }
        },
        "required": [
          "stashAccountAddress",
          "rewardDestinationType",
          "amount"
        ]
      },
      "BondExtraException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119133
          },
          "message": {
            "type": "string",
            "default": "The extra bond request could not be created because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "BondExtraException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "PolkadotUnsignedTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "0xac0406000b0030ef7dba0203ded255321b86f5f975cf04fd0e9d2b1d941469d469dcc93b89441cdfe6c39f7b"
          },
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens for bond operations (in usual DOTs/KSMs/WNDs).",
            "example": 3
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "stashAccountAddress",
          "amount",
          "createdAt"
        ]
      },
      "BondExtraRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond (in usual DOTs/KSMs/WNDs).",
            "example": 1
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "LedgerNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119104
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the ledger address could not be found."
          },
          "name": {
            "type": "string",
            "default": "LedgerNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NotEnoughPendingAmountException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119109
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the requested amount exceeds the unbonded amount."
          },
          "name": {
            "type": "string",
            "default": "NotEnoughPendingAmountException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "WrongControllerException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119105
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the controller address does not correspond to the provided one."
          },
          "name": {
            "type": "string",
            "default": "WrongControllerException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RebondException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119129
          },
          "message": {
            "type": "string",
            "default": "The rebond request could not be created because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "RebondException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RebondRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond (in usual DOTs/KSMs/WNDs).",
            "example": 3
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "NominateResponse": {
        "type": "object",
        "properties": {
          "nominate": {
            "type": "string",
            "description": "Validator address."
          }
        },
        "required": [
          "nominate"
        ]
      },
      "GetListNominateResponse": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailNominateResponse"
            }
          }
        },
        "required": [
          "list"
        ]
      },
      "NominateException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107128
          },
          "message": {
            "type": "string",
            "default": "The nomination request could not be created because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "NominateException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NominateTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action."
          },
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "targets": {
            "description": "Selected validators in the targets.",
            "example": [
              "5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY",
              "5HpG9w8EBLe5XCrbczpwq5TSXvedjrBGCwqxK1iQ7qUsSWFc"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:26.593Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "stashAccountAddress",
          "targets",
          "createdAt"
        ]
      },
      "NominateRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          }
        },
        "required": [
          "stashAccountAddress"
        ]
      },
      "NotEnoughBonedAmountException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119110
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the requested amount of tokens to unbond exceeds the bonded amount. Please specify the correct amount."
          },
          "name": {
            "type": "string",
            "default": "NotEnoughBonedAmountException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "UnbondException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119135
          },
          "message": {
            "type": "string",
            "default": "The unbond request could not be created because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "UnbondException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "UnbondRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to unbond (in usual DOTs/KSMs/WNDs).",
            "example": 3
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "BondNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119103
          },
          "message": {
            "type": "string",
            "default": "The transaction could not be found. Please specify the correct transaction data."
          },
          "name": {
            "type": "string",
            "default": "BondNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "WithdrawUnbondedException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119136
          },
          "message": {
            "type": "string",
            "default": "The withdrawal request could not be performed because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "WithdrawUnbondedException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "WithdrawalTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action."
          },
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding."
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format."
          }
        },
        "required": [
          "unsignedTransaction",
          "stashAccountAddress",
          "createdAt"
        ]
      },
      "WithdrawUnbondedRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          }
        },
        "required": [
          "stashAccountAddress"
        ]
      },
      "PolkadotPoolDoesNotExistsException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107139
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the ID provided is not found. Please specify the correct ID of the nomination pool."
          },
          "name": {
            "type": "string",
            "default": "PolkadotPoolDoesNotExistsException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "PolkadotUnsignedPoolBondTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "0xac0406000b0030ef7dba0203ded255321b86f5f975cf04fd0e9d2b1d941469d469dcc93b89441cdfe6c39f7b"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond (in usual DOTs/KSMs/WNDs).",
            "example": 3
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "amount",
          "createdAt"
        ]
      },
      "PoolBondRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "poolId": {
            "type": "number",
            "description": "ID of the nomination pool.",
            "example": 1
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond (in usual DOTs/KSMs/WNDs).",
            "example": 3
          }
        },
        "required": [
          "stashAccountAddress",
          "poolId",
          "amount"
        ]
      },
      "SetClaimPermissionException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119138
          },
          "message": {
            "type": "string",
            "default": "The set claim permission request could not be performed because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "SetClaimPermissionException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SetClaimPermissionRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "permission": {
            "type": "string",
            "enum": [
              "Permissioned",
              "PermissionlessCompound",
              "PermissionlessWithdraw",
              "PermissionlessAll"
            ],
            "example": "PermissionlessAll",
            "default": "PermissionlessAll",
            "description": "<p>State of the permission to claim rewards:</p><ul><li>`Permissioned` — user needs to claim, bond or withdraw rewards by themselves.</li><li>`PermissionlessCompound` — claiming and bonding rewards on behalf of the user are permitted.</li><li>`PermissionlessWithdraw` — claiming and withdrawing rewards on behalf of the user are permitted.</li><li>`PermissionlessAll` — claiming, bonding and withdrawing rewards on behalf of the user are permitted.</li></ul>"
          }
        },
        "required": [
          "stashAccountAddress",
          "permission"
        ]
      },
      "PolkadotUnsignedPoolTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "0xac0406000b0030ef7dba0203ded255321b86f5f975cf04fd0e9d2b1d941469d469dcc93b89441cdfe6c39f7b"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens for bond operations (in usual DOTs/KSMs/WNDs).",
            "example": 3
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "amount",
          "createdAt"
        ]
      },
      "PoolBondExtraRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount to bond (in usual DOTs/KSMs/WNDs).",
            "example": 1,
            "minimum": 0
          },
          "amountType": {
            "type": "string",
            "enum": [
              "rewards",
              "freeBalance"
            ],
            "description": "<p>Type of tokens to bond (in usual DOTs/KSMs/WNDs):</p><ul><li>`freeBalance` — portion of a balance that is not reserved for any operations.</li><li>`rewards` — claimed rewards tokens.</li></ul>",
            "example": "freeBalance",
            "default": "freeBalance"
          }
        },
        "required": [
          "stashAccountAddress",
          "amount",
          "amountType"
        ]
      },
      "PoolUnbondRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to unbond (in usual DOTs/KSMs/WNDs).",
            "example": 3
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "PoolWithdrawalTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action."
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format."
          }
        },
        "required": [
          "unsignedTransaction",
          "createdAt"
        ]
      },
      "PoolWithdrawUnbondedRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "poolId": {
            "type": "number",
            "description": "ID of the nomination pool.",
            "example": 1
          }
        },
        "required": [
          "stashAccountAddress",
          "poolId"
        ]
      },
      "ClaimPayoutException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119137
          },
          "message": {
            "type": "string",
            "default": "The claim payout request could not be performed because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "ClaimPayoutException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ClaimPayoutRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          }
        },
        "required": [
          "stashAccountAddress"
        ]
      },
      "AvailSignTransactionResponse": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "mainnet",
              "testnet"
            ],
            "example": "testnet",
            "description": "<p>Avail network:</p><ul><li>`mainnet` — Avail mainnet.</li><li>`testnet` — Avail testnet.</li></ul>"
          },
          "signedTransaction": {
            "type": "string",
            "description": "Signed transaction in Base64 encrypted format which needs to be broadcast to the network.",
            "example": "0xbd018400cc7cb7325ad1208212e2d8ee41a7572e816d53ac1bcac1be5df433486819213c011a6fc75a4d779e13a789ce9fe03d5cbb090b1e9833ae38c2c873571b73e2d7393f30bf097d93ca1692d426196f263d609e4d421cef3e017ad8bd388604e47e839502a80006010700e40b5402",
            "pattern": "^0x([A-Fa-f0-9])+$",
            "nullable": false
          },
          "status": {
            "type": "string",
            "enum": [
              "success",
              "failed"
            ],
            "description": "Transaction status.",
            "example": "success"
          },
          "blockHash": {
            "type": "string",
            "description": "Block hash in which the transaction was included.",
            "example": "0x0628743b05ffb4c9d5ea2144b359af38910f0ae439a685f57d85b50b9481ba3f"
          },
          "blockId": {
            "type": "number",
            "description": "Unique block identifier.",
            "example": "17168395"
          },
          "extrinsicId": {
            "type": "number",
            "description": "Unique extrinsic identifier.",
            "example": "17177570-2"
          },
          "transactionHash": {
            "type": "string",
            "description": "Signed extrinsic transaction in hex format.",
            "example": "0xbd018400cc7cb7325ad1208212e2d8ee41a7572e816d53ac1bcac1be5df433486819213c011a6fc75a4d779e13a789ce9fe03d5cbb090b1e9833ae38c2c873571b73e2d7393f30bf097d93ca1692d426196f263d609e4d421cef3e017ad8bd388604e47e839502a80006010700e40b5402"
          },
          "signerAccount": {
            "type": "string",
            "description": "Account that signed the transaction.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "network",
          "signedTransaction",
          "status",
          "blockHash",
          "blockId",
          "extrinsicId",
          "transactionHash",
          "signerAccount",
          "createdAt"
        ]
      },
      "AvailSendRequest": {
        "type": "object",
        "properties": {
          "signedTransaction": {
            "type": "string",
            "description": "Signed transaction in Base64 encrypted format which needs to be broadcast to the network.",
            "example": "0xbd018400cc7cb7325ad1208212e2d8ee41a7572e816d53ac1bcac1be5df433486819213c011a6fc75a4d779e13a789ce9fe03d5cbb090b1e9833ae38c2c873571b73e2d7393f30bf097d93ca1692d426196f263d609e4d421cef3e017ad8bd388604e47e839502a80006010700e40b5402",
            "pattern": "^0x([A-Fa-f0-9])+$",
            "nullable": false
          }
        },
        "required": [
          "signedTransaction"
        ]
      },
      "AvailTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "0xa404160200165874de804160c3cd013d9b6f4bba864657c4c2168a542f78ff14a0253873190200000000"
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "createdAt"
        ]
      },
      "AvailGetListTransactionResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailTransactionResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "AvailAddRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Proxied account is an address that transfers rights to a proxy account. The original account retains all of its rights, and the proxy account can be removed at any time.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "proxyAccountAddress": {
            "type": "string",
            "description": "Proxy account is an address that receives proxied account rights.",
            "example": "5Ggpg3JepXM3ZrktNpoc5QA1sKaFVpUPWMRr7jppiMxTuU75"
          }
        },
        "required": [
          "stashAccountAddress",
          "proxyAccountAddress"
        ]
      },
      "AvailRemoveRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Proxied account is an address that transfers rights to a proxy account. The original account retains all of its rights, and the proxy account can be removed at any time.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "proxyAccountAddress": {
            "type": "string",
            "description": "Proxy account is an address that receives proxied account rights.",
            "example": "5Ca1Bqfzc4DdU6zMXLu5UhpRtdX5EzCseDXW9YisVm25ATeJ"
          }
        },
        "required": [
          "stashAccountAddress",
          "proxyAccountAddress"
        ]
      },
      "StakeException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119126
          },
          "message": {
            "type": "string",
            "default": "The bond request could not be created because the internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "StakeException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "AvailUnsignedStakeTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "0xac0406000b0030ef7dba0203ded255321b86f5f975cf04fd0e9d2b1d941469d469dcc93b89441cdfe6c39f7b"
          },
          "targets": {
            "description": "Selected validators in the targets.",
            "example": [
              "5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY",
              "5HpG9w8EBLe5XCrbczpwq5TSXvedjrBGCwqxK1iQ7qUsSWFc"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "rewardDestinationType": {
            "type": "string",
            "enum": [
              "staked",
              "stash",
              "controller",
              "account"
            ],
            "description": "<p>Rewards destination type:</p><ul><li>`staked` — rewards will be sent to your stash account and added to your current bond (compounding rewards).</li><li>`stash` — rewards will be sent to your stash account as transferable balance (not compounding rewards).</li><li>`controller` — rewards will be sent to the controller account.</li><li>`account` — rewards will be sent to any account you specify as transferable balance.</li></ul>"
          },
          "rewardDestination": {
            "type": "string",
            "description": "Rewards destination account address.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond. AVAIL is used for the mainnet network.",
            "example": 3
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "targets",
          "stashAccountAddress",
          "rewardDestinationType",
          "rewardDestination",
          "amount",
          "createdAt"
        ]
      },
      "AvailStakeRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "rewardDestinationType": {
            "type": "string",
            "enum": [
              "staked",
              "stash",
              "controller",
              "account"
            ],
            "example": "account",
            "description": "<p>Rewards destination type:</p><ul><li>`staked` — rewards will be sent to your stash account and added to your current bond (compounding rewards).</li><li>`stash` — rewards will be sent to your stash account as transferrable balance (not compounding rewards).</li><li>`controller` — rewards will be sent to the controller account.</li><li>`account` — rewards will be sent to any account you specify as transferable balance.</li></ul>"
          },
          "rewardDestination": {
            "type": "string",
            "description": "Rewards destination account address.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond. AVAIL is used for the mainnet network.",
            "example": 3
          }
        },
        "required": [
          "stashAccountAddress",
          "rewardDestinationType",
          "amount"
        ]
      },
      "AvailUnsignedTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "0xac0406000b0030ef7dba0203ded255321b86f5f975cf04fd0e9d2b1d941469d469dcc93b89441cdfe6c39f7b"
          },
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens for bond operations (in usual DOTs/KSMs/WNDs).",
            "example": 3
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "stashAccountAddress",
          "amount",
          "createdAt"
        ]
      },
      "AvailBondExtraRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond. AVAIL is used for the mainnet network.",
            "example": 1
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "AvailRebondRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond. AVAIL is used for the mainnet network.",
            "example": 3
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "AvailNominateResponse": {
        "type": "object",
        "properties": {
          "nominate": {
            "type": "string",
            "description": "Validator address."
          }
        },
        "required": [
          "nominate"
        ]
      },
      "AvailUnbondRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to unbond. AVAIL is used for the mainnet network.",
            "example": 3
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "AvailWithdrawalTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action."
          },
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding."
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format."
          }
        },
        "required": [
          "unsignedTransaction",
          "stashAccountAddress",
          "createdAt"
        ]
      },
      "AvailWithdrawUnbondedRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          }
        },
        "required": [
          "stashAccountAddress"
        ]
      },
      "AvailPoolDoesNotExistsException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 119139
          },
          "message": {
            "type": "string",
            "default": "The request could not be performed because the ID provided is not found. Please specify the correct ID of the nomination pool."
          },
          "name": {
            "type": "string",
            "default": "AvailPoolDoesNotExistsException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "AvailUnsignedPoolBondTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "0xac0406000b0030ef7dba0203ded255321b86f5f975cf04fd0e9d2b1d941469d469dcc93b89441cdfe6c39f7b"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond. AVAIL is used for the mainnet network.",
            "example": 3
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "amount",
          "createdAt"
        ]
      },
      "AvailPoolBondRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "poolId": {
            "type": "number",
            "description": "ID of the nomination pool.",
            "example": 1
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond. AVAIL is used for the mainnet network.",
            "example": 3
          }
        },
        "required": [
          "stashAccountAddress",
          "poolId",
          "amount"
        ]
      },
      "AvailSetClaimPermissionRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "permission": {
            "type": "string",
            "enum": [
              "Permissioned",
              "PermissionlessCompound",
              "PermissionlessWithdraw",
              "PermissionlessAll"
            ],
            "example": "PermissionlessAll",
            "default": "PermissionlessAll",
            "description": "<p>State of the permission to claim rewards:</p><ul><li>`Permissioned` — user needs to claim, bond or withdraw rewards by themselves.</li><li>`PermissionlessCompound` — claiming and bonding rewards on behalf of the user are permitted.</li><li>`PermissionlessWithdraw` — claiming and withdrawing rewards on behalf of the user are permitted.</li><li>`PermissionlessAll` — claiming, bonding and withdrawing rewards on behalf of the user are permitted.</li></ul>"
          }
        },
        "required": [
          "stashAccountAddress",
          "permission"
        ]
      },
      "AvailUnsignedPoolTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "0xac0406000b0030ef7dba0203ded255321b86f5f975cf04fd0e9d2b1d941469d469dcc93b89441cdfe6c39f7b"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens for bond operations (in usual DOTs/KSMs/WNDs).",
            "example": 3
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "amount",
          "createdAt"
        ]
      },
      "AvailPoolBondExtraRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount to bond (in usual DOTs/KSMs/WNDs).",
            "example": 1,
            "minimum": 0
          },
          "amountType": {
            "type": "string",
            "enum": [
              "rewards",
              "freeBalance"
            ],
            "description": "<p>Type of tokens to bond (in usual DOTs/KSMs/WNDs):</p><ul><li>`freeBalance` — portion of a balance that is not reserved for any operations.</li><li>`rewards` — claimed rewards tokens.</li></ul>",
            "example": "freeBalance",
            "default": "freeBalance"
          }
        },
        "required": [
          "stashAccountAddress",
          "amount",
          "amountType"
        ]
      },
      "AvailPoolUnbondRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to unbond. AVAIL is used for the mainnet network.",
            "example": 3
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "AvailPoolWithdrawalTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action."
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format."
          }
        },
        "required": [
          "unsignedTransaction",
          "createdAt"
        ]
      },
      "AvailPoolWithdrawUnbondedRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "poolId": {
            "type": "number",
            "description": "ID of the nomination pool.",
            "example": 1
          }
        },
        "required": [
          "stashAccountAddress",
          "poolId"
        ]
      },
      "AvailPoolClaimPayoutRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          }
        },
        "required": [
          "stashAccountAddress"
        ]
      },
      "SendResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "Block hash in which the transaction was included.",
            "example": "0x0628743b05ffb4c9d5ea2144b359af38910f0ae439a685f57d85b50b9481ba3f"
          },
          "slot": {
            "type": "number",
            "description": "Period of time during which each leader collects transactions and creates a block in the Solana network.",
            "example": "17168395"
          },
          "signerAccounts": {
            "type": "string",
            "description": "Account addresses that signed the transaction.",
            "example": [
              "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
            ]
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "transactionId",
          "slot",
          "signerAccounts",
          "createdAt"
        ]
      },
      "GetStakingResponse": {
        "type": "object",
        "properties": {
          "stakeAccount": {
            "type": "string",
            "description": "Account address that stores tokens for staking.",
            "example": "Fw82VhehY4yazX6tcZfNQWTsqHDSXaGmwVkbJYegDMbG"
          },
          "stakeAuthority": {
            "type": "string",
            "description": "Account address that can perform staking operations with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "withdrawAuthority": {
            "type": "string",
            "description": "Account address that can perform withdrawal operation with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "voteAccount": {
            "type": "string",
            "description": "Vote account address.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "activating",
              "deactivating"
            ],
            "description": "Stake account status: `active`, `inactive`, `activating`, `deactivating`.",
            "example": "active"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to stake in lamports (1 SOl = 10^9 lamports).",
            "minimum": 1,
            "example": 1
          }
        },
        "required": [
          "stakeAccount",
          "stakeAuthority",
          "withdrawAuthority",
          "voteAccount",
          "status",
          "amount"
        ]
      },
      "StakingResponse": {
        "type": "object",
        "properties": {
          "accounts": {
            "description": "List of stake accounts.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetStakingResponse"
            }
          }
        },
        "required": [
          "accounts"
        ]
      },
      "CreateNonceAccountRequest": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "nonceAccount": {
            "type": "string",
            "description": "Account address that keeps the value of the nonce.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "computeUnitLimit": {
            "type": "number",
            "description": "Maximum computational effort limit for the transaction measured in compute units.",
            "minimum": 1,
            "example": 300
          },
          "computeUnitPrice": {
            "type": "number",
            "description": "Price of a compute unit for the transaction in micro-lamports (1 microLamport = 0.000001 lamports).",
            "minimum": 1,
            "example": 20000
          },
          "basePubkey": {
            "type": "string",
            "description": "Account address from which the nonce account is created.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "authorizePubkey": {
            "type": "string",
            "description": "Authority address that controls the nonce account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          }
        },
        "required": [
          "feePayer",
          "basePubkey",
          "authorizePubkey"
        ]
      },
      "StatusesResponse": {
        "type": "object",
        "properties": {
          "statuses": {
            "type": "string",
            "description": "Status of the vote account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          }
        },
        "required": [
          "statuses"
        ]
      },
      "StakeResult": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "fromPublicKey": {
            "type": "string",
            "description": "Account address from which the staking account will be created.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAccount": {
            "type": "string",
            "description": "Account address that stores tokens for staking.",
            "example": "6ZuLUCwVTvuQJrN1HrpoHJheQUw9Zk8CtiD3CEpHiA9E"
          },
          "stakeAuthority": {
            "type": "string",
            "description": "Account address that can perform staking operations with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "withdrawAuthority": {
            "type": "string",
            "description": "Account address that can perform withdrawal operation with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to stake in lamports (1 SOl = 10^9 lamports). Min amount is `1002282880`.",
            "minimum": 1,
            "example": 1
          },
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in Base64 encrypted format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAcJjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+jagnMHpK8BDHt0PpssHwXGD2fBxS6MWBoxptD2u9TvrgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1NjSeWM5+GSJdoQd43Al9SVVXC9FfWGwbe7icpomwAUGodgXkTdUKpg0N73+KnqyVX9TXIp4citopJ3AAAAAAAah2BelAgULaAeR5s5tuI4eW3FQ9h/GeQpOtNEAAAAABqfVFxjHdMkoVmOYaR1etoteuKObS21cc1VbIQAAAAAGp9UXGSxcUSGMyUw9SvF/WNruCJuh/UTj29mKAAAAAAan1RcZNYTQ/u2bs0MdEyBr5UQoG1e4VmzFN1/0AAAAijW940iwWddz25ZC37fI0ue5fa+eTbC2ynBM3b0t4pcDAgMAAQBgAwAAAI5ELeF3F+N1ZPBWe0G1FV0heaKPY7e8dg5tBPbrf8voBAAAAAAAAABzZWVkgJaYAAAAAADIAAAAAAAAAAah2BeRN1QqmDQ3vf4qerJVf1NcinhyK2ikncAAAAAABAIBB3QAAAAAjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+iORC3hdxfjdWTwVntBtRVdIXmij2O3vHYObQT263/L6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQGAQMGCAUABAIAAAA="
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "feePayer",
          "fromPublicKey",
          "stakeAccount",
          "stakeAuthority",
          "withdrawAuthority",
          "amount",
          "unsignedTransaction",
          "createdAt"
        ]
      },
      "StakeRequest": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "fromPublicKey": {
            "type": "string",
            "description": "Account address from which the staking account will be created.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "nonceAccount": {
            "type": "string",
            "description": "Account address for nonce.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "computeUnitLimit": {
            "type": "number",
            "description": "Maximum computational effort limit for the transaction measured in compute units.",
            "minimum": 1,
            "example": 300
          },
          "computeUnitPrice": {
            "type": "number",
            "description": "Price of a compute unit for the transaction in micro-lamports (1 microLamport = 0.000001 lamports).",
            "minimum": 1,
            "example": 20000
          },
          "stakeAuthority": {
            "type": "string",
            "description": "Account address that can perform staking operations with staking account. If not specified, rights will be taken from the `fromPublicKey` parameter.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "withdrawAuthority": {
            "type": "string",
            "description": "Account address that can perform withdrawal operation with staking account. If not specified, rights will be taken from the `fromPublicKey` parameter.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to stake in lamports (1 SOl = 10^9 lamports). Min amount is `1002282880`.",
            "minimum": 1,
            "example": 1
          }
        },
        "required": [
          "feePayer",
          "fromPublicKey",
          "amount"
        ]
      },
      "DeactivateResult": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAccount": {
            "type": "string",
            "description": "Account address that stores tokens for staking.",
            "example": "Fw82VhehY4yazX6tcZfNQWTsqHDSXaGmwVkbJYegDMbG"
          },
          "stakeAuthority": {
            "type": "string",
            "description": "Account address that can perform staking operations with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in Base64 encrypted format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAcJjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+jagnMHpK8BDHt0PpssHwXGD2fBxS6MWBoxptD2u9TvrgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1NjSeWM5+GSJdoQd43Al9SVVXC9FfWGwbe7icpomwAUGodgXkTdUKpg0N73+KnqyVX9TXIp4citopJ3AAAAAAAah2BelAgULaAeR5s5tuI4eW3FQ9h/GeQpOtNEAAAAABqfVFxjHdMkoVmOYaR1etoteuKObS21cc1VbIQAAAAAGp9UXGSxcUSGMyUw9SvF/WNruCJuh/UTj29mKAAAAAAan1RcZNYTQ/u2bs0MdEyBr5UQoG1e4VmzFN1/0AAAAijW940iwWddz25ZC37fI0ue5fa+eTbC2ynBM3b0t4pcDAgMAAQBgAwAAAI5ELeF3F+N1ZPBWe0G1FV0heaKPY7e8dg5tBPbrf8voBAAAAAAAAABzZWVkgJaYAAAAAADIAAAAAAAAAAah2BeRN1QqmDQ3vf4qerJVf1NcinhyK2ikncAAAAAABAIBB3QAAAAAjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+iORC3hdxfjdWTwVntBtRVdIXmij2O3vHYObQT263/L6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQGAQMGCAUABAIAAAA="
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "feePayer",
          "unsignedTransaction",
          "createdAt"
        ]
      },
      "DeactivateRequest": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "nonceAccount": {
            "type": "string",
            "description": "Account address for nonce.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "computeUnitLimit": {
            "type": "number",
            "description": "Maximum computational effort limit for the transaction measured in compute units.",
            "minimum": 1,
            "example": 300
          },
          "computeUnitPrice": {
            "type": "number",
            "description": "Price of a compute unit for the transaction in micro-lamports (1 microLamport = 0.000001 lamports).",
            "minimum": 1,
            "example": 20000
          },
          "stakeAccount": {
            "type": "string",
            "description": "Account address that stores tokens for staking.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAuthority": {
            "type": "string",
            "description": "Account address that can perform staking operations with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          }
        },
        "required": [
          "feePayer",
          "stakeAccount",
          "stakeAuthority"
        ]
      },
      "WithdrawResult": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAccount": {
            "type": "string",
            "description": "Account address that stores tokens for staking.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "withdrawAuthority": {
            "type": "string",
            "description": "Account address that can perform withdrawal operation with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "recipient": {
            "type": "string",
            "description": "Account address to which tokens will be sent.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to withdraw in lamports (1 SOl = 10^9 lamports).",
            "minimum": 1,
            "example": 1
          },
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAcJjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+jagnMHpK8BDHt0PpssHwXGD2fBxS6MWBoxptD2u9TvrgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1NjSeWM5+GSJdoQd43Al9SVVXC9FfWGwbe7icpomwAUGodgXkTdUKpg0N73+KnqyVX9TXIp4citopJ3AAAAAAAah2BelAgULaAeR5s5tuI4eW3FQ9h/GeQpOtNEAAAAABqfVFxjHdMkoVmOYaR1etoteuKObS21cc1VbIQAAAAAGp9UXGSxcUSGMyUw9SvF/WNruCJuh/UTj29mKAAAAAAan1RcZNYTQ/u2bs0MdEyBr5UQoG1e4VmzFN1/0AAAAijW940iwWddz25ZC37fI0ue5fa+eTbC2ynBM3b0t4pcDAgMAAQBgAwAAAI5ELeF3F+N1ZPBWe0G1FV0heaKPY7e8dg5tBPbrf8voBAAAAAAAAABzZWVkgJaYAAAAAADIAAAAAAAAAAah2BeRN1QqmDQ3vf4qerJVf1NcinhyK2ikncAAAAAABAIBB3QAAAAAjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+iORC3hdxfjdWTwVntBtRVdIXmij2O3vHYObQT263/L6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQGAQMGCAUABAIAAAA="
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "feePayer",
          "amount",
          "unsignedTransaction",
          "createdAt"
        ]
      },
      "WithdrawRequest": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAccount": {
            "type": "string",
            "description": "Account address that stores tokens for staking.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "withdrawAuthority": {
            "type": "string",
            "description": "Account address that can perform withdrawal operations with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "recipient": {
            "type": "string",
            "description": "Account address to which tokens will be sent.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to withdraw in lamports (1 SOl = 10^9 lamports).",
            "minimum": 1,
            "example": 1
          },
          "nonceAccount": {
            "type": "string",
            "description": "Account address for nonce.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "computeUnitLimit": {
            "type": "number",
            "description": "Maximum computational effort limit for the transaction measured in compute units.",
            "minimum": 1,
            "example": 300
          },
          "computeUnitPrice": {
            "type": "number",
            "description": "Price of a compute unit for the transaction in micro-lamports (1 microLamport = 0.000001 lamports).",
            "minimum": 1,
            "example": 20000
          }
        },
        "required": [
          "feePayer",
          "amount"
        ]
      },
      "SplitRequestDto": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "baseAccount": {
            "type": "string",
            "description": "Account address to split tokens from.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAccount": {
            "type": "string",
            "description": "Account address that will receive split tokens for staking.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "authority": {
            "type": "string",
            "description": "Account address that can perform withdrawal operations with `stakeAccount` and `baseAccount`.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to move in lamports (1 SOl = 10^9 lamports).",
            "minimum": 1,
            "example": 1
          },
          "nonceAccount": {
            "type": "string",
            "description": "Account address that keeps the value of the nonce.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "computeUnitLimit": {
            "type": "number",
            "description": "Maximum computational effort limit for the transaction measured in compute units.",
            "minimum": 1,
            "example": 300
          },
          "computeUnitPrice": {
            "type": "number",
            "description": "Price of a compute unit for the transaction in micro-lamports (1 microLamport = 0.000001 lamports).",
            "minimum": 1,
            "example": 20000
          }
        },
        "required": [
          "feePayer",
          "baseAccount",
          "stakeAccount",
          "amount"
        ]
      },
      "MergeRequest": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAccount": {
            "type": "string",
            "description": "Account address that will merge split tokens for staking.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "sourceStakeAccount": {
            "type": "string",
            "description": "Account address to merge tokens from.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "authority": {
            "type": "string",
            "description": "Account address that can perform withdrawal operations with `stakeAccount` and `sourseStakeAccount`.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "nonceAccount": {
            "type": "string",
            "description": "Account address that keeps the value of the nonce.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "computeUnitLimit": {
            "type": "number",
            "description": "Maximum computational effort limit for the transaction measured in compute units.",
            "minimum": 1,
            "example": 300
          },
          "computeUnitPrice": {
            "type": "number",
            "description": "Price of a compute unit for the transaction in micro-lamports (1 microLamport = 0.000001 lamports).",
            "minimum": 1,
            "example": 20000
          }
        },
        "required": [
          "feePayer",
          "stakeAccount",
          "sourceStakeAccount",
          "authority"
        ]
      },
      "DelegateRequest": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAccount": {
            "type": "string",
            "description": "Account address that will be delegated.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAuthority": {
            "type": "string",
            "description": "Account address that can perform staking operations with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "nonceAccount": {
            "type": "string",
            "description": "Account address that keeps the value of the nonce.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "computeUnitLimit": {
            "type": "number",
            "description": "Maximum computational effort limit for the transaction measured in compute units.",
            "minimum": 1,
            "example": 300
          },
          "computeUnitPrice": {
            "type": "number",
            "description": "Price of a compute unit for the transaction in micro-lamports (1 microLamport = 0.000001 lamports).",
            "minimum": 1,
            "example": 20000
          }
        },
        "required": [
          "feePayer",
          "stakeAccount",
          "stakeAuthority"
        ]
      },
      "ApproveRequestDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Amount of tokens to delegate, specified in 10^(-18) MATIC.",
            "example": "100000000000000000"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Staker account address.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "amount",
          "stakerAddress"
        ]
      },
      "DelegateRequestDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Amount of tokens to delegate, specified in 10^(-18) MATIC.",
            "example": "100000000000000000"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Staker account address.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "amount",
          "stakerAddress"
        ]
      },
      "UndelegateRequestDto": {
        "type": "object",
        "properties": {
          "claimAmount": {
            "type": "string",
            "description": "Amount of tokens to undelegate, specified in 10^(-18) MATIC.",
            "example": "100000000000000000"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Staker account address.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "claimAmount",
          "stakerAddress"
        ]
      },
      "UnstakeRequestDto": {
        "type": "object",
        "properties": {
          "stakerPublicKey": {
            "type": "string",
            "description": "Staker public key.",
            "example": "02be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4"
          },
          "stakeTransactionHash": {
            "type": "string",
            "description": "Hash of the initial staking transaction.",
            "example": "80410b51dabc9d31edab7fbdff26ac3bda70d3131830239ac0e3e9c8c1fc4028"
          }
        },
        "required": [
          "stakerPublicKey",
          "stakeTransactionHash"
        ]
      },
      "WithdrawRequestDto": {
        "type": "object",
        "properties": {
          "stakerAddress": {
            "type": "string",
            "description": "Staker account address.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "stakerAddress"
        ]
      },
      "RestakeRequestDto": {
        "type": "object",
        "properties": {
          "stakerAddress": {
            "type": "string",
            "description": "Staker account address.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "stakerAddress"
        ]
      },
      "RedelegateRequestDto": {
        "type": "object",
        "properties": {
          "fromValidatorId": {
            "type": "string",
            "description": "From validator ID.",
            "example": "12"
          },
          "toValidatorId": {
            "type": "string",
            "description": "To validator ID.",
            "example": "18"
          },
          "amount": {
            "type": "string",
            "description": "Amount of tokens to delegate, specified in 10^(-18) MATIC",
            "example": "100000000000000000"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Staker account address.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "fromValidatorId",
          "toValidatorId",
          "amount",
          "stakerAddress"
        ]
      },
      "SendTransactionDtoRequest": {
        "type": "object",
        "properties": {
          "signedTransaction": {
            "type": "string",
            "description": "Serialized signed transaction.",
            "example": "0x02f902d705808301674e8508530af16e830186a094681a1b3441c6bfb12f91651efd9f02c83c0702938901bc16d674ec800000b902a44f498c730000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030aa5f27070a21d79455c4a9b73c0aa4a8b1a65a1fb530d7fd8e6cd23aa16660679ac43ee4861098f6d9166aed3a4d8abb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002001000000000000000000000028c84612d37de9209018ad96167f12169b653e9a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060978c565cd915f4e885b4201093d1501697610eb9ee99b9b60b70434dc330e98d5b42927725304ded48483a8b8f39506d09bcb22ee18d4f6b50257946ac5ee360385308d95c0e2bc963902d42e985c29ee489aa3c989ac1561c952a6424f107a800000000000000000000000000000000000000000000000000000000000000014cb452f6e3f10ba2175c86a0284f53fcb61404b458393391abc3d5622e3e55cdc0",
            "pattern": "^0x([A-Fa-f0-9])+$",
            "nullable": false
          },
          "stakerAddress": {
            "type": "string",
            "description": "Stacker account address.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "signedTransaction",
          "stakerAddress"
        ]
      },
      "InvalidAddressException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 120104
          },
          "message": {
            "type": "string",
            "default": "The provided address [ 'testnet', 'mainnet' ] is invalid."
          },
          "name": {
            "type": "string",
            "default": "InvalidAddressException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "StakeResponseDto": {
        "type": "object",
        "properties": {
          "stakerPublicKey": {
            "type": "string",
            "description": "Staker public key.",
            "example": "02be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Staker taproot address.",
            "example": "tb1p3e5dfkaxxqgq4vgv4peujcg8dwqe7ry9ky9702hx7jfmvrk5a3yq4q5ua9"
          },
          "stakeAmount": {
            "type": "number",
            "description": "Amount to stake in SATOSHI (1 BTC = 10⁸ SATOSHI).",
            "example": 1000000
          },
          "stakingDuration": {
            "type": "number",
            "description": "Time-lock period for staking in Bitcoin blocks.",
            "example": 100
          },
          "finallyProviderPublicKey": {
            "type": "string",
            "description": "Finality provider public key produced by the Schnorr signature algorithm.",
            "example": "02be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4"
          },
          "stakeTransactionHex": {
            "type": "string",
            "description": "Unsigned stake transaction in the hexadecimal format. Sign the transaction and submit it to the Bitcoin blockchain to perform the called action.",
            "example": "70736274ff0100e402000000014f0d8e70d376cda7200bc900803d35dab2658fad9ce15454326b642523660ae90200000000fdffffff04b80b000000000000225120df0ec02350705a695b526f5c7662f33d8f8256cbd80cf8cda6d7c46d7d1578d00000000000000000496a4762626434002be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4bf609ba8977d3fbf4dee7f9d993c41f2fa584ccd27b3e4bf04a5376267e13c000c8025d0000000000002251208e68d4dba630100ab10ca873c961076b819f0c85b10be7aae6f493b60ed4ec48102700000000000000000000000001012bc5690000000000002251208e68d4dba630100ab10ca873c961076b819f0c85b10be7aae6f493b60ed4ec480000000000"
          },
          "fee": {
            "type": "number",
            "description": "Total fee in SATOSHI charged for processing the transaction (1 BTC = 10⁸ SATOSHI).",
            "example": 1000
          }
        },
        "required": [
          "stakerPublicKey",
          "stakerAddress",
          "stakeAmount",
          "stakingDuration",
          "finallyProviderPublicKey",
          "stakeTransactionHex",
          "fee"
        ]
      },
      "StakeRequestDto": {
        "type": "object",
        "properties": {
          "stakerPublicKey": {
            "type": "string",
            "description": "Staker public key.",
            "example": "02be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Staker taproot address.",
            "example": "tb1p3e5dfkaxxqgq4vgv4peujcg8dwqe7ry9ky9702hx7jfmvrk5a3yq4q5ua9"
          },
          "stakeAmount": {
            "type": "number",
            "description": "Amount to stake in SATOSHI (1 BTC = 10⁸ SATOSHI).",
            "example": 30000
          },
          "stakingDuration": {
            "type": "number",
            "description": "Time-lock period for staking in Bitcoin blocks.",
            "example": 150
          }
        },
        "required": [
          "stakerPublicKey",
          "stakerAddress",
          "stakeAmount",
          "stakingDuration"
        ]
      },
      "WithdrawalResponseDto": {
        "type": "object",
        "properties": {
          "withdrawalAddress": {
            "type": "string",
            "description": "Staker withdrawal address.",
            "example": "tb1p3e5dfkaxxqgq4vgv4peujcg8dwqe7ry9ky9702hx7jfmvrk5a3yq4q5ua9"
          },
          "stakerPublicKey": {
            "type": "string",
            "description": "Staker public key.",
            "example": "02be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4"
          },
          "stakeTransactionHash": {
            "type": "string",
            "description": "Hash of the initial staking transaction.",
            "example": "80410b51dabc9d31edab7fbdff26ac3bda70d3131830239ac0e3e9c8c1fc4028"
          },
          "withdrawalTransactionHex": {
            "type": "string",
            "description": "Unsigned transaction for withdrawal request in the hexadecimal format. Sign the transaction and submit it to the Bitcoin blockchain to perform the called action.",
            "example": "70736274ff0100e402000000014f0d8e70d376cda7200bc900803d35dab2658fad9ce15454326b642523660ae90200000000fdffffff04b80b000000000000225120df0ec02350705a695b526f5c7662f33d8f8256cbd80cf8cda6d7c46d7d1578d00000000000000000496a4762626434002be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4bf609ba8977d3fbf4dee7f9d993c41f2fa584ccd27b3e4bf04a5376267e13c000c8025d0000000000002251208e68d4dba630100ab10ca873c961076b819f0c85b10be7aae6f493b60ed4ec48102700000000000000000000000001012bc5690000000000002251208e68d4dba630100ab10ca873c961076b819f0c85b10be7aae6f493b60ed4ec480000000000"
          },
          "fee": {
            "type": "number",
            "description": "Total fee in SATOSHI charged for processing the transaction (1 BTC = 10⁸ SATOSHI).",
            "example": 1000
          }
        },
        "required": [
          "withdrawalAddress",
          "stakerPublicKey",
          "stakeTransactionHash",
          "withdrawalTransactionHex",
          "fee"
        ]
      },
      "WithdrawalRequestDto": {
        "type": "object",
        "properties": {
          "stakerPublicKey": {
            "type": "string",
            "description": "Staker public key.",
            "example": "02be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4"
          },
          "stakeTransactionHash": {
            "type": "string",
            "description": "Hash of the initial staking transaction.",
            "example": "80410b51dabc9d31edab7fbdff26ac3bda70d3131830239ac0e3e9c8c1fc4028"
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "Staker withdrawal address.",
            "example": "tb1p3e5dfkaxxqgq4vgv4peujcg8dwqe7ry9ky9702hx7jfmvrk5a3yq4q5ua9"
          }
        },
        "required": [
          "stakerPublicKey",
          "stakeTransactionHash",
          "withdrawalAddress"
        ]
      },
      "TransactionIsNotStake": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 120102
          },
          "message": {
            "type": "string",
            "default": "The requested transaction is not a stake transaction"
          },
          "name": {
            "type": "string",
            "default": "TransactionIsNotStake"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "UnstakeResponseDto": {
        "type": "object",
        "properties": {
          "stakerPublicKey": {
            "type": "string",
            "description": "Staker public key.",
            "example": "02be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4"
          },
          "stakeTransactionHash": {
            "type": "string",
            "description": "Staker taproot address.",
            "example": ""
          },
          "unstakeTransactionHex": {
            "type": "string",
            "description": "Unsigned transaction for the unstake request in the hexadecimal format. Sign the transaction to consequently broadcast it to the Bitcoin blockchain.",
            "example": "70736274ff0100e402000000014f0d8e70d376cda7200bc900803d35dab2658fad9ce15454326b642523660ae90200000000fdffffff04b80b000000000000225120df0ec02350705a695b526f5c7662f33d8f8256cbd80cf8cda6d7c46d7d1578d00000000000000000496a4762626434002be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4bf609ba8977d3fbf4dee7f9d993c41f2fa584ccd27b3e4bf04a5376267e13c000c8025d0000000000002251208e68d4dba630100ab10ca873c961076b819f0c85b10be7aae6f493b60ed4ec48102700000000000000000000000001012bc5690000000000002251208e68d4dba630100ab10ca873c961076b819f0c85b10be7aae6f493b60ed4ec480000000000"
          },
          "unstakeFee": {
            "type": "number",
            "description": "Total fee in SATOSHI charged for unlocking the staked assets and processing the transaction (1 BTC = 10⁸ SATOSHI).",
            "example": 1000
          }
        },
        "required": [
          "stakerPublicKey",
          "stakeTransactionHash",
          "unstakeTransactionHex",
          "unstakeFee"
        ]
      },
      "SendResponseDto": {
        "type": "object",
        "properties": {
          "transactionHash": {
            "type": "string",
            "description": "Transaction hash.",
            "example": "70736274ff0100e402000000014f0d8e70d376cda7200bc900803d35dab2658fad9ce15454326b642523660ae90200000000fdffffff04b80b000000000000225120df0ec02350705a695b526f5c7662f33d8f8256cbd80cf8cda6d7c46d7d1578d00000000000000000496a4762626434002be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4bf609ba8977d3fbf4dee7f9d993c41f2fa584ccd27b3e4bf04a5376267e13c000c8025d0000000000002251208e68d4dba630100ab10ca873c961076b819f0c85b10be7aae6f493b60ed4ec48102700000000000000000000000001012bc5690000000000002251208e68d4dba630100ab10ca873c961076b819f0c85b10be7aae6f493b60ed4ec480000000000"
          }
        },
        "required": [
          "transactionHash"
        ]
      },
      "SendRequestDto": {
        "type": "object",
        "properties": {
          "transactionHex": {
            "type": "string",
            "description": "Signed transaction in the hexadecimal format which needs to be broadcasted to the network.",
            "example": "70736274ff0100e402000000014f0d8e70d376cda7200bc900803d35dab2658fad9ce15454326b642523660ae90200000000fdffffff04b80b000000000000225120df0ec02350705a695b526f5c7662f33d8f8256cbd80cf8cda6d7c46d7d1578d00000000000000000496a4762626434002be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4bf609ba8977d3fbf4dee7f9d993c41f2fa584ccd27b3e4bf04a5376267e13c000c8025d0000000000002251208e68d4dba630100ab10ca873c961076b819f0c85b10be7aae6f493b60ed4ec48102700000000000000000000000001012bc5690000000000002251208e68d4dba630100ab10ca873c961076b819f0c85b10be7aae6f493b60ed4ec480000000000"
          },
          "maxFee": {
            "type": "number",
            "description": "Maximum fee in SATOSHI that can be charged for processing the transaction (1 BTC = 10⁸ SATOSHI).",
            "example": 1000000
          }
        },
        "required": [
          "transactionHex",
          "maxFee"
        ]
      },
      "UnbondingResponseDto": {
        "type": "object",
        "properties": {
          "stakingTxHash": {
            "type": "string",
            "description": "Hash of the initial staking transaction.",
            "example": "80410b51dabc9d31edab7fbdff26ac3bda70d3131830239ac0e3e9c8c1fc4028"
          },
          "unbondingTxHex": {
            "type": "string",
            "description": "Unsigned transaction for the unbonding request in the hexadecimal format.",
            "example": "70736274ff0100e402000000014f0d8e70d376cda7200bc900803d35dab2658fad9ce15454326b642523660ae90200000000fdffffff04b80b000000000000225120df0ec02350705a695b526f5c7662f33d8f8256cbd80cf8cda6d7c46d7d1578d00000000000000000496a4762626434002be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4bf609ba8977d3fbf4dee7f9d993c41f2fa584ccd27b3e4bf04a5376267e13c000c8025d0000000000002251208e68d4dba630100ab10ca873c961076b819f0c85b10be7aae6f493b60ed4ec48102700000000000000000000000001012bc5690000000000002251208e68d4dba630100ab10ca873c961076b819f0c85b10be7aae6f493b60ed4ec480000000000"
          },
          "unbondingTxHash": {
            "type": "string",
            "description": "Hash of the partially signed unbonding transaction.",
            "example": "02000000000101e64994aad9ebe5f9bbe8344a743aa6dbbc9d5ecab0cc135b2697bbeef7834bfd0000000000ffffffff017869000000000000225120abc575829d73ef108ceba4f1686f657e6e2f70852208eabaa0cd74e248f203a7034031226d5e6be2988bc81b4ede2e507e8795992e2f8dbf73c3c7887ca611ef74d46e4ddcf41734478e088a2c9f110be6bb29f4d8fc9a6c0aca6b2ba648bdb850208a20be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4ad2017921cf156ccb4e73d428f996ed11b245313e37e27c978ac4d2cc21eca4672e4ac2049766ccd9e3cd94343e2040474a77fb37cdfd30530d05f9f1e96ae1e2102c86eba2076d1ae01f8fb6bf30108731c884cddcf57ef6eef2d9d9559e130894e0e40c62cba529c61c050929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac073c168cce70e3d66240fcd3ef216f083436f448372fe7cccb668449cbcb15b26639fa5fb4094c2f7ea65e9c176ccd983b1cda874de942d6fb8cd3b4f2e2aa14b00000000"
          },
          "stakerSignature": {
            "type": "string",
            "description": "Staker signature of the unbonding transaction.",
            "example": "304402203f7c0f6c1f7a8f7"
          }
        },
        "required": [
          "stakingTxHash",
          "unbondingTxHex",
          "unbondingTxHash",
          "stakerSignature"
        ]
      },
      "UnbondingRequestDto": {
        "type": "object",
        "properties": {
          "stakingTxHash": {
            "type": "string",
            "description": "Hash of the initial staking transaction.",
            "example": "80410b51dabc9d31edab7fbdff26ac3bda70d3131830239ac0e3e9c8c1fc4028"
          },
          "unbondingTxHex": {
            "type": "string",
            "description": "Unsigned transaction for the unbonding request in the hexadecimal format.",
            "example": "70736274ff0100e402000000014f0d8e70d376cda7200bc900803d35dab2658fad9ce15454326b642523660ae90200000000fdffffff04b80b000000000000225120df0ec02350705a695b526f5c7662f33d8f8256cbd80cf8cda6d7c46d7d1578d00000000000000000496a4762626434002be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4bf609ba8977d3fbf4dee7f9d993c41f2fa584ccd27b3e4bf04a5376267e13c000c8025d0000000000002251208e68d4dba630100ab10ca873c961076b819f0c85b10be7aae6f493b60ed4ec48102700000000000000000000000001012bc5690000000000002251208e68d4dba630100ab10ca873c961076b819f0c85b10be7aae6f493b60ed4ec480000000000"
          }
        },
        "required": [
          "stakingTxHash",
          "unbondingTxHex"
        ]
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Transaction type.",
            "example": "Stake"
          },
          "txHash": {
            "type": "string",
            "description": "Transaction hash.",
            "example": "0x"
          },
          "stakerPublicKey": {
            "type": "string",
            "description": "Staker public key.",
            "example": "02be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Staker address.",
            "example": "tb1p3e5dfkaxxqgq4vgv4peujcg8dwqe7ry9ky9702hx7jfmvrk5a3yq4q5ua9"
          },
          "stakeAmount": {
            "type": "number",
            "description": "Stake amount in SATOSHI (1 BTC = 10⁸ SATOSHI).",
            "example": 1000000
          },
          "stakeTime": {
            "type": "number",
            "description": "Time-lock period for staking in Bitcoin blocks.",
            "example": 100
          },
          "finallyProviderPublicKey": {
            "type": "string",
            "description": "Finality provider public key produced by the Schnorr signature algorithm.",
            "example": "02be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4"
          }
        },
        "required": [
          "type",
          "txHash",
          "stakerPublicKey",
          "stakerAddress",
          "stakeAmount",
          "stakeTime",
          "finallyProviderPublicKey"
        ]
      },
      "GetByAddressResponse": {
        "type": "object",
        "properties": {
          "transactions": {
            "description": "List of Babylon transactions.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        },
        "required": [
          "transactions"
        ]
      },
      "GetByHashResponse": {
        "type": "object",
        "properties": {
          "transaction": {
            "description": "List of Babylon transactions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Transaction"
              }
            ]
          }
        },
        "required": [
          "transaction"
        ]
      },
      "RemoveValidatorException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111121
          },
          "message": {
            "type": "string",
            "default": "The remove validator transaction could not be created because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "RemoveValidatorException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "EthereumUnsignedTransactionListResponse": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
            }
          }
        },
        "required": [
          "list"
        ]
      },
      "ExitValidatorException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111125
          },
          "message": {
            "type": "string",
            "default": "The exit validator transaction could not be created because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "ExitValidatorException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "WithdrawException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111142
          },
          "message": {
            "type": "string",
            "default": "Failed to create P2P SSV withdraw transaction"
          },
          "name": {
            "type": "string",
            "default": "WithdrawException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SetFeeRecipientAddressException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111108
          },
          "message": {
            "type": "string",
            "default": "The set fee recipient address transaction could not be created because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "SetFeeRecipientAddressException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "DepositException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111140
          },
          "message": {
            "type": "string",
            "default": "Failed to create P2P SSV deposit transaction"
          },
          "name": {
            "type": "string",
            "default": "DepositException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetOperatorFeeException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111109
          },
          "message": {
            "type": "string",
            "default": "The amount of fee charged by the operator could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetOperatorFeeException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetOperatorFeeResponse": {
        "type": "object",
        "properties": {
          "fee": {
            "type": "string",
            "example": "1000",
            "description": "Fee charged by the operator, denominated in SSV tokens."
          },
          "balance": {
            "type": "string",
            "example": "1000",
            "description": "Operator outstanding earnings, denominated in SSV tokens."
          }
        },
        "required": [
          "fee",
          "balance"
        ]
      },
      "GetBalanceException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111110
          },
          "message": {
            "type": "string",
            "default": "The cluster balance could not be obtained because an internal server error occurred."
          },
          "name": {
            "type": "string",
            "default": "GetBalanceException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetBalanceResponse": {
        "type": "object",
        "properties": {
          "balances": {
            "example": "1000",
            "description": "Clusters outstanding balance, denominated in SSV tokens.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "balances"
        ]
      },
      "ClaimNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111146
          },
          "message": {
            "type": "string",
            "default": "Claim not found"
          },
          "name": {
            "type": "string",
            "default": "ClaimNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ClaimException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111145
          },
          "message": {
            "type": "string",
            "default": "Failed to claim P2P SSV deposit"
          },
          "name": {
            "type": "string",
            "default": "ClaimException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "DepositListException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111144
          },
          "message": {
            "type": "string",
            "default": "Failed to get list of deposits"
          },
          "name": {
            "type": "string",
            "default": "DepositListException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SsvDepositDepoResponse": {
        "type": "object",
        "properties": {
          "depositId": {
            "type": "string",
            "description": "Deposit id which our contract generates when addEth is called",
            "example": "49851686-9058-491f-a393-9ca477a7063a"
          },
          "transactionHash": {
            "type": "string",
            "description": "Transaction with addEth method.",
            "example": "0xc6180e03f1ea7e30eba1c0870471516c575e695afa5066b55038ca73df242e33"
          },
          "senderAddress": {
            "type": "string",
            "description": "Sender address.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address of the validator.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "feeRecipientAddress": {
            "type": "string",
            "description": "Fee recipient address.",
            "example": "0x338EF19fA2eC0fc4d1277B1307a613fA1FBbc0cb",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "totalAmount": {
            "type": "string",
            "description": "Total amount of the deposit.",
            "example": "32"
          },
          "unprocessedAmount": {
            "type": "string",
            "description": "Amount of the deposit that was not processed by the contract.",
            "example": "0"
          }
        },
        "required": [
          "depositId",
          "transactionHash",
          "senderAddress",
          "withdrawalAddress",
          "feeRecipientAddress",
          "totalAmount",
          "unprocessedAmount"
        ]
      },
      "SsvDepositValidatorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "unknown",
              "not_found",
              "pending_initialized",
              "pending_queued",
              "active_ongoing",
              "active_exiting",
              "active_slashed",
              "exited_unslashed",
              "exited_slashed",
              "withdrawal_possible",
              "withdrawal_done"
            ],
            "description": "<p>State of the validator:</p><ul><li>`not_found` — specified validator could not be located.</li><li>`pending_initialized` — validator is initialized but not yet in the queue for activation.</li><li>`pending_queued` — validator entered a queue for activation.</li><li>`active_ongoing` — validator was activated and currently participates in attesting and proposing blocks.</li><li>`active_exiting` — validator is in process of exiting the network while participating in the validator activities.</li><li>`active_slashed` — validator was slashed due to misbehaviors.</li><li>`exited_unslashed` — validator has exited the network without being slashed and is no longer acting as a validator.</li><li>`exited_slashed` — validator has exited the network after being slashed and is no longer acting as a validator.</li><li>`withdrawal_possible` — validator has a non-zero balance.</li><li>`withdrawal_done` — validator completed the withdrawal process.</li></ul>",
            "example": "active_ongoing"
          },
          "amount": {
            "type": "string",
            "example": "1",
            "description": "Total stake amount for the validator at the moment."
          },
          "pubkey": {
            "type": "string",
            "description": "Validator public key.",
            "example": [
              "0xbe5E9c3Bb9eba1BF4C5eC1c1cbcF85ee2CE2fEC66Ce5460C23eF82332A044FDCabF7011F588CCbD77E73CCe6c4accDF0"
            ],
            "pattern": "^0x[a-fA-F0-9]{96}$"
          }
        },
        "required": [
          "status",
          "amount",
          "pubkey"
        ]
      },
      "SsvDepositResponse": {
        "type": "object",
        "properties": {
          "deposit": {
            "$ref": "#/components/schemas/SsvDepositDepoResponse"
          },
          "validator": {
            "$ref": "#/components/schemas/SsvDepositValidatorResponse"
          }
        },
        "required": [
          "deposit",
          "validator"
        ]
      },
      "SsvDepositListResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SsvDepositResponse"
            }
          },
          "totalAmount": {
            "type": "string",
            "description": "Total amount of deposits"
          },
          "unprocessedAmount": {
            "type": "string",
            "description": "Total amount of unprocessed deposits"
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list",
          "totalAmount",
          "unprocessedAmount"
        ]
      },
      "ValidatorsException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111143
          },
          "message": {
            "type": "string",
            "default": "Failed to get list of validators"
          },
          "name": {
            "type": "string",
            "default": "ValidatorsException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SsvValidatorResponse": {
        "type": "object",
        "properties": {
          "pubkey": {
            "type": "string",
            "description": "Validator public key.",
            "example": [
              "0xbe5E9c3Bb9eba1BF4C5eC1c1cbcF85ee2CE2fEC66Ce5460C23eF82332A044FDCabF7011F588CCbD77E73CCe6c4accDF0"
            ],
            "pattern": "^0x[a-fA-F0-9]{96}$"
          }
        },
        "required": [
          "pubkey"
        ]
      },
      "SsvValidatorListResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SsvValidatorResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "String": {
        "type": "object",
        "properties": {}
      },
      "CodecDate": {
        "type": "object",
        "properties": {}
      },
      "UnifiedStakeResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount of tokens to stake in native currency.",
            "example": 1002282880,
            "minimum": 0
          },
          "stakerAddress": {
            "description": "Account address initiated the staking, unstaking, or withdrawal operation.",
            "example": "6ZuLUCwVTvuQJrN1HrpoHJheQUw9Zk8CtiD3CEpHiA9E",
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              }
            ]
          },
          "unsignedTransactionData": {
            "description": "Unsigned transaction data in Base64 encrypted format or as an object. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAA...",
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              }
            ]
          },
          "extraData": {
            "type": "object",
            "description": "Additional transaction details."
          },
          "createdAt": {
            "format": "datetime",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z",
            "allOf": [
              {
                "$ref": "#/components/schemas/CodecDate"
              }
            ]
          }
        },
        "required": [
          "amount",
          "stakerAddress",
          "unsignedTransactionData",
          "createdAt"
        ]
      },
      "UnifiedStakeRequest": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "enum": [
              "avail",
              "babylon-btc",
              "solana",
              "eth_ssv",
              "ton_whales"
            ],
            "description": "Target blockchain network in which the transaction is processed (avail,babylon-btc,solana,eth_ssv,ton_whales).",
            "example": "avail"
          },
          "network": {
            "type": "string",
            "enum": [
              "mainnet",
              "testnet",
              "mainnet-beta"
            ],
            "description": "Network environment in which the transaction is processed (mainnet,testnet,mainnet-beta).",
            "example": "mainnet"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Account address initiating the staking transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to stake in native currency.",
            "minimum": 1,
            "example": 1
          },
          "extra": {
            "type": "object",
            "description": "Additional optional parameters.",
            "example": {
              "stakerPublicKey": "02be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4"
            }
          }
        },
        "required": [
          "chain",
          "network",
          "stakerAddress",
          "amount"
        ]
      },
      "UnifiedUnstakeRequest": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "enum": [
              "avail",
              "babylon-btc",
              "solana",
              "eth_ssv",
              "ton_whales"
            ],
            "description": "Target blockchain network in which the transaction is processed (avail,babylon-btc,solana,eth_ssv,ton_whales).",
            "example": "avail"
          },
          "network": {
            "type": "string",
            "enum": [
              "mainnet",
              "testnet",
              "mainnet-beta"
            ],
            "description": "Network environment in which the transaction is processed (mainnet,testnet,mainnet-beta).",
            "example": "mainnet"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Account address initiating the unstaking transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "extra": {
            "type": "object",
            "description": "Additional chain-specific request parameters.",
            "example": {
              "stakerPublicKey": "02be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4"
            }
          }
        },
        "required": [
          "chain",
          "network",
          "stakerAddress"
        ]
      },
      "UnifiedWithdrawRequest": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "enum": [
              "avail",
              "babylon-btc",
              "solana",
              "eth_ssv",
              "ton_whales"
            ],
            "description": "Target blockchain network in which the transaction is processed (avail,babylon-btc,solana,eth_ssv,ton_whales).",
            "example": "avail"
          },
          "network": {
            "type": "string",
            "enum": [
              "mainnet",
              "testnet",
              "mainnet-beta"
            ],
            "description": "Network environment in which the transaction is processed (mainnet,testnet,mainnet-beta).",
            "example": "mainnet"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Account address initiating the withdrawal transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "extra": {
            "type": "object",
            "description": "Additional chain-specific request parameters.",
            "example": {
              "stakerPublicKey": "02be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4"
            }
          }
        },
        "required": [
          "chain",
          "network",
          "stakerAddress"
        ]
      },
      "UnifiedTxBroadcastResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the broadcast transaction.",
            "example": "success"
          },
          "extraData": {
            "type": "object",
            "description": "Additional transaction details specific to the network."
          }
        },
        "required": [
          "status"
        ]
      },
      "UnifiedTxBroadcastRequest": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "enum": [
              "avail",
              "babylon-btc",
              "solana",
              "eth_ssv",
              "ton_whales"
            ],
            "description": "Target blockchain network in which the transaction is processed (avail,babylon-btc,solana,eth_ssv,ton_whales).",
            "example": "avail"
          },
          "network": {
            "type": "string",
            "enum": [
              "mainnet",
              "testnet",
              "mainnet-beta"
            ],
            "description": "Network environment in which the transaction is processed (mainnet,testnet,mainnet-beta).",
            "example": "mainnet"
          },
          "signedTransaction": {
            "description": "Signed transaction in Base64 encrypted format, which contains all transaction details required to broadcast the transaction to the network.",
            "example": "0x450284002c6eca5cdaa3e87d7f8e06d10015bf0508b52d301c8991af113d5cf49a53553f01befdb7fa39c5a995a8d58676a0513d082be",
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              }
            ]
          },
          "stakerAddress": {
            "description": "Account address initiating the staking, unstaking, or withdrawal transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC",
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              }
            ]
          },
          "extra": {
            "type": "object",
            "description": "Additional chain-specific request parameters.",
            "example": {
              "stakerPublicKey": "02be65fdd561fee421c4f4564b02e4de31f74836b9b8cd1bbbf9d9c544733614e4"
            }
          }
        },
        "required": [
          "chain",
          "network",
          "signedTransaction",
          "stakerAddress"
        ]
      },
      "SingleNominatorStakeResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction for the stake request in the hexadecimal format.",
            "example": "b5ee9c7241010101003000005c00000000000000039fedeab7a2b56b38f19f60b5b9f70b2f1ba2d89b9c5a756036c7cfad73571fb28188ee6b2800b10cbe42"
          },
          "walletVersion": {
            "type": "string",
            "description": "Version of the smart contract used by the wallet in the TON blockchain.",
            "example": "V4"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Main account address of the bounceable type which keeps tokens.",
            "example": "7031f1dcbe0f670daf4094d04ff9a7947bc4ac9174a7d470255d1a664e20b7c6"
          },
          "publicKey": {
            "type": "string",
            "description": "Public key of the nominator for the TON network.",
            "example": "7031f1dcbe0f670daf4094d04ff9a7947bc4ac9174a7d470255d1a664e20b7c6"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to stake in TON.",
            "example": 2
          }
        },
        "required": [
          "unsignedTransaction",
          "walletVersion",
          "stakerAddress",
          "publicKey",
          "amount"
        ]
      },
      "SingleNominatorStakeRequest": {
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string",
            "description": "Public key of the nominator for the TON network.",
            "example": "7031f1dcbe0f670daf4094d04ff9a7947bc4ac9174a7d470255d1a664e20b7c6"
          },
          "amount": {
            "format": "int64",
            "type": "integer",
            "description": "Amount of tokens to stake in nanoTONs (1 TON = 10⁹ nanoTONs).",
            "example": "20000000000"
          },
          "walletVersion": {
            "type": "string",
            "description": "Version of the smart contract used by the wallet in the TON blockchain.",
            "example": "V4",
            "default": "V4"
          }
        },
        "required": [
          "publicKey",
          "amount"
        ]
      },
      "SingleNominatorUnstakeResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction for the unstake request in the hexadecimal format.",
            "example": "b5ee9c7241010101003800006b000010000000000000000001000000039fedeab7a2b56b38f19f60b5b9f70b2f1ba2d89b9c5a756036c7cfad73571fb281887735940193456f7e"
          },
          "publicKey": {
            "type": "string",
            "description": "Public key of the nominator for the TON network.",
            "example": "7031f1dcbe0f670daf4094d04ff9a7947bc4ac9174a7d470255d1a664e20b7c6"
          },
          "amount": {
            "type": "string",
            "description": "Amount of tokens to unstake in TON.",
            "example": "2"
          }
        },
        "required": [
          "unsignedTransaction",
          "publicKey",
          "amount"
        ]
      },
      "SingleNominatorUnstakeRequest": {
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string",
            "description": "Public key of the nominator for the TON network.",
            "example": "7031f1dcbe0f670daf4094d04ff9a7947bc4ac9174a7d470255d1a664e20b7c6"
          },
          "amount": {
            "format": "int64",
            "type": "integer",
            "description": "The amount to be unstaked in nano tons",
            "example": "200"
          },
          "walletVersion": {
            "type": "string",
            "description": "Version of the wallet",
            "example": "V4",
            "default": "V4"
          }
        },
        "required": [
          "publicKey",
          "amount"
        ]
      },
      "TonWhalesStakeResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction for the stake request in the hexadecimal format.",
            "example": "b5ee9c7241010101003000005c00000000000000039fedeab7a2b56b38f19f60b5b9f70b2f1ba2d89b9c5a756036c7cfad73571fb28188ee6b2800b10cbe42"
          },
          "poolAddress": {
            "type": "string",
            "description": "Nominator pool address.",
            "example": "kQDr9Sq482A6ikIUh5mUUjJaBUUJBrye13CJiDB-R31_l7mg"
          },
          "walletVersion": {
            "type": "string",
            "description": "Version of the smart contract used by the wallet in the TON blockchain.",
            "example": "V4"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Main account address of the bounceable type which keeps tokens.",
            "example": "7031f1dcbe0f670daf4094d04ff9a7947bc4ac9174a7d470255d1a664e20b7c6"
          },
          "publicKey": {
            "type": "string",
            "description": "Public key of the nominator for the TON network.",
            "example": "7031f1dcbe0f670daf4094d04ff9a7947bc4ac9174a7d470255d1a664e20b7c6"
          },
          "amount": {
            "type": "string",
            "description": "Amount of tokens to stake in TON.",
            "example": 2
          }
        },
        "required": [
          "unsignedTransaction",
          "poolAddress",
          "walletVersion",
          "stakerAddress",
          "publicKey",
          "amount"
        ]
      },
      "TonWhalesStakeRequest": {
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string",
            "description": "Public key of the nominator for the TON network.",
            "example": "7031f1dcbe0f670daf4094d04ff9a7947bc4ac9174a7d470255d1a664e20b7c6"
          },
          "amount": {
            "format": "int64",
            "type": "integer",
            "description": "Amount of tokens to stake in nanoTONs (1 TON = 10⁹ nanoTONs).",
            "example": "20000000000"
          },
          "walletVersion": {
            "type": "string",
            "description": "Version of the smart contract used by the wallet in the TON blockchain.",
            "example": "V4",
            "default": "V4"
          }
        },
        "required": [
          "publicKey",
          "amount"
        ]
      },
      "TonWhalesUnstakeRequest": {
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string",
            "description": "Public key of the nominator for the TON network.",
            "example": "7031f1dcbe0f670daf4094d04ff9a7947bc4ac9174a7d470255d1a664e20b7c6"
          },
          "amount": {
            "format": "int64",
            "type": "integer",
            "description": "Amount of tokens to unstake in TON.",
            "example": "200"
          },
          "walletVersion": {
            "type": "string",
            "description": "Version of the smart contract used by the wallet in the TON blockchain.",
            "example": "V4",
            "default": "V4"
          }
        },
        "required": [
          "publicKey",
          "amount"
        ]
      },
      "StatusResponse": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Staker account address.",
            "example": "0QC1f6DghlW6w31D7GWiYt0dZvX1SR3sGAsto_AhdQRFBobh"
          },
          "lt": {
            "type": "string",
            "description": "Logical time of the last transaction created by this staker account.",
            "example": "27726830000001"
          },
          "prevTransactionHash": {
            "type": "string",
            "description": "Hash of the previous transaction.",
            "example": "6210303f3cfb630c349b3859d9e367a65a6772938c681774e2a315aa95c80224"
          },
          "prevTransactionLt": {
            "type": "string",
            "description": "Logical time of the previous transaction.",
            "example": "1234567890abcdef"
          },
          "now": {
            "type": "number",
            "description": "Current time on the TON blockchain node.",
            "example": 1730905768
          },
          "outMessagesCount": {
            "type": "number",
            "description": "Count of output messages sent by the smart contract in the result of this transaction.",
            "example": 1
          },
          "oldStatus": {
            "type": "string",
            "description": "Staker account status before the transaction execution.",
            "example": "active"
          },
          "endStatus": {
            "type": "string",
            "description": "Staker account status after the transaction execution.",
            "example": "active"
          },
          "transactionHash": {
            "type": "string",
            "description": "Transaction hash.",
            "example": "2829e4bb8a7b8084040c731a07523d680ce30fecef12f8eec1e409f3c6077a5e"
          }
        },
        "required": [
          "address",
          "lt",
          "prevTransactionHash",
          "prevTransactionLt",
          "now",
          "outMessagesCount",
          "oldStatus",
          "endStatus",
          "transactionHash"
        ]
      },
      "TonTransactionResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Amount of tokens to be staked in TON.",
            "example": "2"
          },
          "transactionHash": {
            "type": "string",
            "description": "Transaction hash.",
            "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Staker account address.",
            "example": "7031f1dcbe0f670daf4094d04ff9a7947bc4ac9174a7d470255d1a664e20b7c6"
          },
          "publicKey": {
            "type": "string",
            "description": "Public key of the nominator for the TON network.",
            "example": "7031f1dcbe0f670daf4094d04ff9a7947bc4ac9174a7d470255d1a664e20b7c6"
          },
          "nominatorPoolAddress": {
            "type": "string",
            "description": "Nominator pool address in the TON network."
          },
          "walletVersion": {
            "type": "string",
            "enum": [
              "stake",
              "unstake"
            ],
            "description": "Version of the smart contract used by the wallet in the TON blockchain.",
            "example": "V4"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "broadcasted"
            ],
            "description": "Status of the transaction.",
            "example": "broadcasted"
          },
          "type": {
            "type": "string",
            "enum": [
              "stake",
              "unstake"
            ],
            "description": "Type of the transaction.",
            "example": "stake"
          }
        },
        "required": [
          "amount",
          "transactionHash",
          "stakerAddress",
          "publicKey",
          "nominatorPoolAddress",
          "walletVersion",
          "status",
          "type"
        ]
      },
      "GetListTonTransactionResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "Number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TonTransactionResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "BroadcastResponse": {
        "type": "object",
        "properties": {}
      },
      "BroadcastRequest": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Signed transaction in the hexadecimal format which needs to be broadcasted to the network.",
            "example": "te6ccgEBAQEABgAACCiAmCM="
          },
          "signature": {
            "type": "string",
            "description": "External message signature which needs to be signed with the private key.",
            "example": "te6ccgEBAQEABgAACCiAmCM="
          },
          "publicKey": {
            "type": "string",
            "description": "Public key of the nominator for the TON network.",
            "example": "7031f1dcbe0f670daf4094d04ff9a7947bc4ac9174a7d470255d1a664e20b7c6"
          },
          "walletVersion": {
            "type": "string",
            "description": "Version of the smart contract used by the wallet in the TON blockchain.",
            "example": "V4",
            "default": "V4"
          }
        },
        "required": [
          "unsignedTransaction",
          "signature",
          "publicKey"
        ]
      }
    }
  }
}