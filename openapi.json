{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/cosmos/{network}/staking/stake": {
      "post": {
        "operationId": "create-cosmos-stake-transaction",
        "summary": "Create Staking Request",
        "description": "Create stake request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "theta-testnet-001",
            "description": "Cosmos network names",
            "schema": {
              "type": "string",
              "enum": [
                "cosmoshub-4",
                "theta-testnet-001"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StakeOrUnstakeStakingCosmosRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakeOrUnstakeTransactionStakingCosmosResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/SimulationTransactionOnCosmosException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientFundsOnCosmosAccountException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  },
                  "SimulationTransactionOnCosmosException": {
                    "value": {
                      "code": 110113,
                      "message": "Simulation transaction failed",
                      "type": "client"
                    }
                  },
                  "InsufficientFundsOnCosmosAccountException": {
                    "value": {
                      "code": 110101,
                      "message": "There are not enough funds in your account to make a stake",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateStakeTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateStakeTransactionException": {
                    "value": {
                      "code": 110103,
                      "message": "Create stake transaction failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Cosmos"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/cosmos/{network}/staking/unstake": {
      "post": {
        "operationId": "create-cosmos-unstake-transaction",
        "summary": "Create Unstake Request",
        "description": "Create unstake request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "theta-testnet-001",
            "description": "Cosmos network names",
            "schema": {
              "type": "string",
              "enum": [
                "cosmoshub-4",
                "theta-testnet-001"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StakeOrUnstakeStakingCosmosRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakeOrUnstakeTransactionStakingCosmosResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientFundsOnCosmosValidatorException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "InsufficientFundsOnCosmosValidatorException": {
                    "value": {
                      "code": 110102,
                      "message": "The validator does not have enough funds to complete the unstake operation",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateUnstakeTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateUnstakeTransactionException": {
                    "value": {
                      "code": 110104,
                      "message": "Create stake transaction failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Cosmos"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/cosmos/{network}/staking/redelegate/from": {
      "post": {
        "operationId": "create-cosmos-redelegate-from-transaction",
        "summary": "Create Redelegate From Request",
        "description": "Create redelegate from default validator request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "theta-testnet-001",
            "description": "Cosmos network names",
            "schema": {
              "type": "string",
              "enum": [
                "cosmoshub-4",
                "theta-testnet-001"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedelegateTransactionStakingCosmosRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/RedelegateTransactionStakingCosmosResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/SimulationTransactionOnCosmosException"
                        },
                        {
                          "$ref": "#/components/schemas/RedelegationTransactionInProcessException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  },
                  "SimulationTransactionOnCosmosException": {
                    "value": {
                      "code": 110113,
                      "message": "Simulation transaction failed",
                      "type": "client"
                    }
                  },
                  "RedelegationTransactionInProcessException": {
                    "value": {
                      "code": 110114,
                      "message": "Redelegation to this validator already in progress; first redelegation to this validator must complete before next redelegation",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateRedelegateTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateRedelegateTransactionException": {
                    "value": {
                      "code": 110105,
                      "message": "Create redelegate transaction failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Cosmos"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/cosmos/{network}/staking/redelegate/to": {
      "post": {
        "operationId": "create-cosmos-redelegate-to-transaction",
        "summary": "Create Redelegate To Request",
        "description": "Create redelegate to default validator request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "theta-testnet-001",
            "description": "Cosmos network names",
            "schema": {
              "type": "string",
              "enum": [
                "cosmoshub-4",
                "theta-testnet-001"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedelegateTransactionStakingCosmosRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/RedelegateTransactionStakingCosmosResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/SimulationTransactionOnCosmosException"
                        },
                        {
                          "$ref": "#/components/schemas/RedelegationTransactionInProcessException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  },
                  "SimulationTransactionOnCosmosException": {
                    "value": {
                      "code": 110113,
                      "message": "Simulation transaction failed",
                      "type": "client"
                    }
                  },
                  "RedelegationTransactionInProcessException": {
                    "value": {
                      "code": 110114,
                      "message": "Redelegation to this validator already in progress; first redelegation to this validator must complete before next redelegation",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateRedelegateTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateRedelegateTransactionException": {
                    "value": {
                      "code": 110105,
                      "message": "Create redelegate transaction failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Cosmos"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/cosmos/{network}/staking/claim-rewards": {
      "post": {
        "operationId": "create-cosmos-claim-rewards-transaction",
        "summary": "Create Claim Rewards Request",
        "description": "Create claim rewards request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "theta-testnet-001",
            "description": "Cosmos network names",
            "schema": {
              "type": "string",
              "enum": [
                "cosmoshub-4",
                "theta-testnet-001"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseStakingCosmosRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/ClaimRewardsTransactionStakingCosmosResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/SimulationTransactionOnCosmosException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  },
                  "SimulationTransactionOnCosmosException": {
                    "value": {
                      "code": 110113,
                      "message": "Simulation transaction failed",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/CreateClaimRewardsTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "CreateClaimRewardsTransactionException": {
                    "value": {
                      "code": 110106,
                      "message": "Create claim rewards transaction failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Cosmos"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/cosmos/{network}/transaction/send": {
      "post": {
        "operationId": "broadcast-cosmos-transaction",
        "summary": "Broadcast Transaction",
        "description": "Broadcast transaction to the Cosmos network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "theta-testnet-001",
            "description": "Cosmos network names",
            "schema": {
              "type": "string",
              "enum": [
                "cosmoshub-4",
                "theta-testnet-001"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BroadcastTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TransactionStatusResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "TransactionNotFoundException": {
                    "value": {
                      "code": 110107,
                      "message": "Transaction not found",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/BroadcastTransactionFailedException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "BroadcastTransactionFailedException": {
                    "value": {
                      "code": 110109,
                      "message": "Broadcast transaction failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Cosmos"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/cosmos/{network}/transaction/status/{transactionHash}": {
      "get": {
        "operationId": "get-cosmos-transaction-status",
        "summary": "Check Transaction Status",
        "description": "Check the status of the transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "theta-testnet-001",
            "description": "Cosmos network names",
            "schema": {
              "type": "string",
              "enum": [
                "cosmoshub-4",
                "theta-testnet-001"
              ]
            }
          },
          {
            "name": "transactionHash",
            "required": true,
            "in": "path",
            "example": "EDDA3AE81ACBF56CB1F154F4957779C04F10B6F4C23B13597EFFC61FE05A02D2",
            "schema": {
              "format": "[A-Z0-9]{64}",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TransactionStatusResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidTransactionHashException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionAlreadyBroadcastException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "TransactionNotFoundException": {
                    "value": {
                      "code": 110107,
                      "message": "Transaction not found",
                      "type": "client"
                    }
                  },
                  "InvalidTransactionHashException": {
                    "value": {
                      "code": 110111,
                      "message": "The transaction hash must satisfy the regular expression (undefined)",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  },
                  "TransactionAlreadyBroadcastException": {
                    "value": {
                      "code": 110110,
                      "message": "Transaction already broadcast",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetTransactionStatusFailedException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetTransactionStatusFailedException": {
                    "value": {
                      "code": 110108,
                      "message": "Get transaction status failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Cosmos"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/exit-queue": {
      "get": {
        "operationId": "data-network-exit-queue",
        "summary": "Get Network Exit Queue",
        "description": "Method to retrieve the network exit queue — a queue of validators who have requested to exit the network. Validators in the queue must wait for a certain period before they can safely exit.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Network:</p><ul><li>`ethereum` — Ethereum mainnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkQueueResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsNotFoundException": {
                    "value": {
                      "code": 115102,
                      "message": "Network stats not found",
                      "type": "not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkExitQueueException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkExitQueueException": {
                    "value": {
                      "code": 115103,
                      "message": "Get network exit queue failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/staking-queue": {
      "get": {
        "operationId": "data-network-staking-queue",
        "summary": "Get Network Staking Queue",
        "description": "Method to retrieve network staking queue.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Network:</p><ul><li>`ethereum` — Ethereum mainnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkQueueResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsNotFoundException": {
                    "value": {
                      "code": 115102,
                      "message": "Network stats not found",
                      "type": "not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStakingQueueException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStakingQueueException": {
                    "value": {
                      "code": 115104,
                      "message": "Get network staking queue failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/supply-data": {
      "get": {
        "operationId": "data-network-staking-queue",
        "summary": "Get Network Supply Data",
        "description": "Method to retrieve network supply data.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Network:</p><ul><li>`ethereum` — Ethereum mainnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkSupplyDataResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsNotFoundException": {
                    "value": {
                      "code": 115102,
                      "message": "Network stats not found",
                      "type": "not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkSupplyDataException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkSupplyDataException": {
                    "value": {
                      "code": 115105,
                      "message": "Get network supply data failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/last-staking-period": {
      "get": {
        "operationId": "data-network-last-staking-period",
        "summary": "Get Network Last Staking Period",
        "description": "Method to retrieve network last staking period.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Network:</p><ul><li>`ethereum` — Ethereum mainnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkLastStakingPeriodResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsNotFoundException": {
                    "value": {
                      "code": 115102,
                      "message": "Network stats not found",
                      "type": "not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkLastStakingPeriodException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkLastStakingPeriodException": {
                    "value": {
                      "code": 115106,
                      "message": "Get network last staking period failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/apy": {
      "post": {
        "operationId": "data-network-apy",
        "summary": "Get network APY by staking period",
        "description": "Method to retrive network APY by staking period",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Network:</p><ul><li>`ethereum` — Ethereum mainnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetNetworkStatsHistoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkAPYListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsNotFoundException": {
                    "value": {
                      "code": 115102,
                      "message": "Network stats not found",
                      "type": "not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsHistoryException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsHistoryException": {
                    "value": {
                      "code": 115108,
                      "message": "Get network stats history by staking period failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/validators-count": {
      "post": {
        "operationId": "data-network-validator-count",
        "summary": "Get network validators count by staking period",
        "description": "Method to retrive network validators count by staking period",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Network:</p><ul><li>`ethereum` — Ethereum mainnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetNetworkStatsHistoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkValidatorsCountListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsHistoryNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsHistoryNotFoundException": {
                    "value": {
                      "code": 115102,
                      "message": "Network stats history not found",
                      "type": "server"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsHistoryException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsHistoryException": {
                    "value": {
                      "code": 115108,
                      "message": "Get network stats history by staking period failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/delegators-count": {
      "post": {
        "operationId": "data-network-delegators-count",
        "summary": "Get network delegators count by staking period",
        "description": "Method to retrive network delegators count by staking period",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Network:</p><ul><li>`ethereum` — Ethereum mainnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetNetworkStatsHistoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkDelegatorsCountListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsHistoryNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsHistoryNotFoundException": {
                    "value": {
                      "code": 115102,
                      "message": "Network stats history not found",
                      "type": "server"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsHistoryException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsHistoryException": {
                    "value": {
                      "code": 115108,
                      "message": "Get network stats history by staking period failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/stake": {
      "post": {
        "operationId": "data-network-stake",
        "summary": "Get network stake by staking period",
        "description": "Method to retrive network stake by staking period",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Network:</p><ul><li>`ethereum` — Ethereum mainnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetNetworkStatsHistoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStakeListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsHistoryNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsHistoryNotFoundException": {
                    "value": {
                      "code": 115102,
                      "message": "Network stats history not found",
                      "type": "server"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsHistoryException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsHistoryException": {
                    "value": {
                      "code": 115108,
                      "message": "Get network stats history by staking period failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/network/rewards": {
      "post": {
        "operationId": "data-network-rewards",
        "summary": "Get network rewards by staking period",
        "description": "Method to retrive network rewards by staking period",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Network:</p><ul><li>`ethereum` — Ethereum mainnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "ethereum",
                "solana",
                "cosmoshub",
                "polkadot"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetNetworkStatsHistoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkRewardsListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkStatsHistoryNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkStatsHistoryNotFoundException": {
                    "value": {
                      "code": 115102,
                      "message": "Network stats history not found",
                      "type": "server"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetNetworkRewardsStatsHistoryException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetNetworkRewardsStatsHistoryException": {
                    "value": {
                      "code": 115110,
                      "message": "Get network rewards stats history by staking period failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Network"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/validator/stakes": {
      "get": {
        "operationId": "data-validator-stakes",
        "summary": "Get Validator Stake",
        "description": "Get a current validator stake.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Network:</p><ul><li>`ethereum` — Ethereum mainnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "solana",
                "ethereum",
                "polkadot"
              ]
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "The number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "The number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          },
          {
            "name": "startAt",
            "required": true,
            "in": "query",
            "description": "Start timestamp for the report data period in ISO 8601 format.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": true,
            "in": "query",
            "description": "Finish timestamp for the report data period in ISO 8601 format.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "validatorAddress",
            "required": true,
            "in": "query",
            "description": "Validator address in the required network. For the Ethereum network, it is a public validator key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorStakesResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidValidatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "InvalidValidatorAddressException": {
                    "value": {
                      "code": 100101,
                      "message": "Validator address is not valid for the specified network",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorStakesException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorStakesException": {
                    "value": {
                      "code": 115111,
                      "message": "Get validator stakes failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/validator/rewards": {
      "get": {
        "operationId": "data-validator-rewards",
        "summary": "Get Validator Rewards",
        "description": "Get a list of validator rewards.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Network:</p><ul><li>`ethereum` — Ethereum mainnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "solana",
                "ethereum",
                "polkadot"
              ]
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "The number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "The number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          },
          {
            "name": "startAt",
            "required": true,
            "in": "query",
            "description": "Start timestamp for the report data period in ISO 8601 format.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": true,
            "in": "query",
            "description": "Finish timestamp for the report data period in ISO 8601 format.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "validatorAddress",
            "required": true,
            "in": "query",
            "description": "Validator address in the required network. For the Ethereum network, it is a public validator key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorRewardsResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidValidatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "InvalidValidatorAddressException": {
                    "value": {
                      "code": 100101,
                      "message": "Validator address is not valid for the specified network",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorRewardsException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorRewardsException": {
                    "value": {
                      "code": 115112,
                      "message": "Get validator rewards failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/validator/apy": {
      "get": {
        "operationId": "data-validator-apy",
        "summary": "Get Validator APY",
        "description": "Get a list of validator annual percentage yield (APY).",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Network:</p><ul><li>`ethereum` — Ethereum mainnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "solana",
                "ethereum",
                "polkadot"
              ]
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "The number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "The number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          },
          {
            "name": "startAt",
            "required": true,
            "in": "query",
            "description": "Start timestamp for the report data period in ISO 8601 format.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": true,
            "in": "query",
            "description": "Finish timestamp for the report data period in ISO 8601 format.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "validatorAddress",
            "required": true,
            "in": "query",
            "description": "Validator address in the required network. For the Ethereum network, it is a public validator key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorAPYResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidValidatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "InvalidValidatorAddressException": {
                    "value": {
                      "code": 100101,
                      "message": "Validator address is not valid for the specified network",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorApyException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorApyException": {
                    "value": {
                      "code": 115113,
                      "message": "Get validator apy failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/{network}/data/validator/fee": {
      "get": {
        "operationId": "data-validator-fee",
        "summary": "Get Validator Fee",
        "description": "Get a list of validator fee.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Network:</p><ul><li>`ethereum` — Ethereum mainnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "solana",
                "ethereum",
                "polkadot"
              ]
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "The number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "The number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          },
          {
            "name": "startAt",
            "required": true,
            "in": "query",
            "description": "Start timestamp for the report data period in ISO 8601 format.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "finishAt",
            "required": true,
            "in": "query",
            "description": "Finish timestamp for the report data period in ISO 8601 format.",
            "example": "2020-01-01T00:00:00.000Z",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "startNumber",
            "required": false,
            "in": "query",
            "description": "Start number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "finishNumber",
            "required": false,
            "in": "query",
            "description": "Finish number of the staking period.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "validatorAddress",
            "required": true,
            "in": "query",
            "description": "Validator address in the required network. For the Ethereum network, it is a public validator key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorFeeResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidValidatorAddressException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "InvalidValidatorAddressException": {
                    "value": {
                      "code": 100101,
                      "message": "Validator address is not valid for the specified network",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 100101,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetValidatorFeeException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetValidatorFeeException": {
                    "value": {
                      "code": 115114,
                      "message": "Get validator fee failed",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Validator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/options/relays-sets": {
      "get": {
        "operationId": "eth-nodes-request-relays-sets",
        "summary": "Get List MEV Relays",
        "description": "Get the list of MEV relays.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetRelaysSetsRequestResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetRelaysSetsException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetRelaysSetsException": {
                    "value": {
                      "code": 103125,
                      "message": "Error getting relays sets",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/tx/deposit": {
      "post": {
        "operationId": "eth-staking-deposit",
        "summary": "Prepare Staking Transaction",
        "description": "Construct serialized transaction to deposit the stake amount, utilizing the functionalities of P2P smart contract.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StakeEthereumRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Web3CreateTransactionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Web3CreateTransactionException": {
                    "value": {
                      "code": 103104,
                      "message": "Could not create transaction",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/tx/withdrawal": {
      "post": {
        "operationId": "eth-staking-withdrawal",
        "summary": "Prepare Withdrawal Transaction",
        "description": "Construct serialized transaction to initiate the withdrawal process for active validators, utilizing the functionalities of P2P smart contract.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnstakeEthereumRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidDepositDataSignException"
                        },
                        {
                          "$ref": "#/components/schemas/PubkeyDoNotExistsException"
                        },
                        {
                          "$ref": "#/components/schemas/ValidatorNotActiveException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "InvalidDepositDataSignException": {
                    "value": {
                      "code": 103113,
                      "message": "Invalid deposit-data signature",
                      "type": "client"
                    }
                  },
                  "PubkeyDoNotExistsException": {
                    "value": {
                      "code": 103105,
                      "message": "Unauthorized to request withdrawal transaction for validator public key",
                      "type": "client"
                    }
                  },
                  "ValidatorNotActiveException": {
                    "value": {
                      "code": 103106,
                      "message": "Error creating withdrawal transaction because one or more validators are not in active state",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Web3CreateTransactionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/WithdrawalTransactionException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Web3CreateTransactionException": {
                    "value": {
                      "code": 103104,
                      "message": "Could not create transaction",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  },
                  "WithdrawalTransactionException": {
                    "value": {
                      "code": 103107,
                      "message": "Could not create withdrawal transaction",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/validator/status": {
      "post": {
        "operationId": "eth-validator-status",
        "summary": "Get Validator Status",
        "description": "Check the status of the validators.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatorsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/ValidatorsResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/nodes-request/create": {
      "post": {
        "operationId": "eth-nodes-request-create",
        "summary": "Create Staking Request",
        "description": "Set up nodes for staking using P2P infrastructure.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNodesRequestRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NodesRequestIdAlreadyExistException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NodesRequestIdAlreadyExistException": {
                    "value": {
                      "code": 103121,
                      "message": "Nodes request id already exists",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestCreateException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NodesRequestCreateException": {
                    "value": {
                      "code": 103116,
                      "message": "Error creating nodes request",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/nodes-request/status/{id}": {
      "get": {
        "operationId": "eth-nodes-request-status",
        "summary": "Get Request Status",
        "description": "Check the status of the node set-up operation.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the nodes request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NodesRequestNotFoundException": {
                    "value": {
                      "code": 103114,
                      "message": "Nodes request not found",
                      "type": "not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestGetException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NodesRequestGetException": {
                    "value": {
                      "code": 103117,
                      "message": "Error getting nodes request",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/nodes-request": {
      "get": {
        "operationId": "eth-nodes-request-list",
        "summary": "Get All Requests Status",
        "description": "Check the status of all the node set-up operations created through the authorization token",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "The number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "The number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetListNodesRequestResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestGetListException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NodesRequestGetListException": {
                    "value": {
                      "code": 103120,
                      "message": "Error getting nodes requests list",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/vem/create": {
      "post": {
        "operationId": "eth-vem-create",
        "summary": "Create VEM Request",
        "description": "Set up VEM request.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVemRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/VemIdAlreadyExistException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "VemIdAlreadyExistException": {
                    "value": {
                      "code": 112103,
                      "message": "VEM request id already exists",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/VemCreateException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "VemCreateException": {
                    "value": {
                      "code": 112101,
                      "message": "Error creating VEM request",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/vem/status/{id}": {
      "get": {
        "operationId": "eth-vem-status",
        "summary": "Get VEM Request Status",
        "description": "Check the status of the VEM request.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the VEM request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/VemResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/VemNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "VemNotFoundException": {
                    "value": {
                      "code": 112102,
                      "message": "VEM request not found",
                      "type": "not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/VemGetException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "VemGetException": {
                    "value": {
                      "code": 112104,
                      "message": "Error getting VEMs request",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/tx/status/{blockHash}/{transactionHash}": {
      "get": {
        "operationId": "polkadot-transaction-status",
        "summary": "Get Transaction Status",
        "description": "Check the status of the transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          },
          {
            "name": "blockHash",
            "required": true,
            "in": "path",
            "description": "Block hash in which the transaction was included.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionHash",
            "required": true,
            "in": "path",
            "description": "Extrinsic transaction hash.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/SignTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 107119,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TransactionNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TransactionNotFoundException": {
                    "value": {
                      "code": 107108,
                      "message": "Bond not found",
                      "type": "not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/StatusException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "StatusException": {
                    "value": {
                      "code": 107122,
                      "message": "Unable to get transaction status",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/tx/send": {
      "post": {
        "operationId": "polkadot-transaction-send",
        "summary": "Broadcast Transaction",
        "description": "Broadcast transaction to the Polkadot network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/SignTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/ExtrinsicCouldNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 107119,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  },
                  "ExtrinsicCouldNotFoundException": {
                    "value": {
                      "code": 107116,
                      "message": "Extrinsic cannot be found",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SendException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionUsurpedException"
                        },
                        {
                          "$ref": "#/components/schemas/CouldNotGetStateException"
                        },
                        {
                          "$ref": "#/components/schemas/ExtrinsicCouldNotSendException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionFinalityTimeoutException"
                        },
                        {
                          "$ref": "#/components/schemas/TransactionDroppedException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SendException": {
                    "value": {
                      "code": 107123,
                      "message": "Unable to send transaction",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  },
                  "TransactionUsurpedException": {
                    "value": {
                      "code": 107113,
                      "message": "Transaction was usurped",
                      "type": "server"
                    }
                  },
                  "CouldNotGetStateException": {
                    "value": {
                      "code": 107117,
                      "message": "Could not get transaction state",
                      "type": "server"
                    }
                  },
                  "ExtrinsicCouldNotSendException": {
                    "value": {
                      "code": 107118,
                      "message": "Extrinsic cannot be sent",
                      "type": "server"
                    }
                  },
                  "TransactionInvalidException": {
                    "value": {
                      "code": 107112,
                      "message": "Transaction is invalid",
                      "type": "server"
                    }
                  },
                  "TransactionFinalityTimeoutException": {
                    "value": {
                      "code": 107114,
                      "message": "Transaction was finality timeouted",
                      "type": "server"
                    }
                  },
                  "TransactionDroppedException": {
                    "value": {
                      "code": 107115,
                      "message": "Transaction was dropped",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/tx": {
      "get": {
        "operationId": "polkadot-transaction-list",
        "summary": "List Broadcasted Transactions",
        "description": "Return a list of all broadcasted transactions.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "The number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "The number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetListTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TransactionGetListException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TransactionGetListException": {
                    "value": {
                      "code": 107124,
                      "message": "Unable to get list of transaction",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/account/add": {
      "post": {
        "operationId": "polkadot-account-add",
        "summary": "Add Staking Proxy Account",
        "description": "Adding a staking proxy account allows users to utilize an account less frequently while maintaining active participation in the Polkadot network based on the weight of tokens held within that account.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "code": 107101,
                      "message": "Polkadot address (undefined) is invalid",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 107119,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/AddException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "AddException": {
                    "value": {
                      "code": 107120,
                      "message": "Unable to add proxy",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "code": 107102,
                      "message": "Insufficient balance. Min balance is undefined",
                      "type": "client"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/account/remove": {
      "post": {
        "operationId": "polkadot-account-remove",
        "summary": "Remove Staking Proxy Account",
        "description": "Removing a proxy account involves discontinuing the delegation of staking responsibilities from one account to another. This action allows users to regain direct control over their staking activities and tokens in the Polkadot network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/ProxyNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "code": 107101,
                      "message": "Polkadot address (undefined) is invalid",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 107119,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  },
                  "ProxyNotFoundException": {
                    "value": {
                      "code": 107107,
                      "message": "Proxy not found",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/RemoveException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "RemoveException": {
                    "value": {
                      "code": 107121,
                      "message": "Unable to remove proxy",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/bond": {
      "post": {
        "operationId": "polkadot-staking-bond",
        "summary": "Create Bond Request",
        "description": "Submitting a bond to the Polkadot network in exchange for some other benefit.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BondRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PolkadotUnsignedBondTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/StakeAmountTooSmallException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "code": 107101,
                      "message": "Polkadot address (undefined) is invalid",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 107119,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  },
                  "StakeAmountTooSmallException": {
                    "value": {
                      "code": 107106,
                      "message": "Stake amount too small. Min amount is undefined",
                      "type": "client"
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "code": 107102,
                      "message": "Insufficient balance. Min balance is undefined",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/BondException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "BondException": {
                    "value": {
                      "code": 107125,
                      "message": "Unable to request bond",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/bond-extra": {
      "post": {
        "operationId": "polkadot-staking-bondExtra",
        "summary": "Create Extra Bond Request",
        "description": "Submitting an extra bond to the Polkadot network in exchange for some other benefit.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BondExtraRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PolkadotUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/InsufficientBalanceException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "code": 107101,
                      "message": "Polkadot address (undefined) is invalid",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 107119,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  },
                  "InsufficientBalanceException": {
                    "value": {
                      "code": 107102,
                      "message": "Insufficient balance. Min balance is undefined",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/BondExtraException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "BondExtraException": {
                    "value": {
                      "code": 107126,
                      "message": "Unable to request bond extra",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/rebond": {
      "post": {
        "operationId": "polkadot-staking-rebond",
        "summary": "Create Rebond Request",
        "description": "Rebonding tokens within the Polkadot network involves the process of re-staking or redelegating tokens that were previously withdrawn from the staking mechanism.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RebondRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PolkadotUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/LedgerNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/NotEnoughPendingAmountException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongControllerException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "code": 107101,
                      "message": "Polkadot address (undefined) is invalid",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 107119,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  },
                  "LedgerNotFoundException": {
                    "value": {
                      "code": 107104,
                      "message": "Ledger not found",
                      "type": "client"
                    }
                  },
                  "NotEnoughPendingAmountException": {
                    "value": {
                      "code": 107109,
                      "message": "Not enough pending amount",
                      "type": "client"
                    }
                  },
                  "WrongControllerException": {
                    "value": {
                      "code": 107105,
                      "message": "Wrong controller",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/RebondException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "RebondException": {
                    "value": {
                      "code": 107128,
                      "message": "Unable to request rebond",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/nominate": {
      "get": {
        "operationId": "polkadot-staking-nominate-list",
        "summary": "Get List Validators",
        "description": "Return list of P2P.org public validators to nominate.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetListNominateResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "polkadot-staking-nominate",
        "summary": "Create Nomination Request",
        "description": "Submitting nomination is the action of choosing validators within the Polkadot network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NominateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/NominateTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "code": 107101,
                      "message": "Polkadot address (undefined) is invalid",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 107119,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NominateException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NominateException": {
                    "value": {
                      "code": 107127,
                      "message": "Unable to request nominate",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/unbond": {
      "post": {
        "operationId": "polkadot-staking-unbond",
        "summary": "Create Unbond Request",
        "description": "Unbonding tokens within the Polkadot network refers to the process of withdrawing or releasing tokens that were previously staked or bonded.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnbondRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/PolkadotUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/NotEnoughBonedAmountException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "code": 107101,
                      "message": "Polkadot address (undefined) is invalid",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 107119,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  },
                  "NotEnoughBonedAmountException": {
                    "value": {
                      "code": 107110,
                      "message": "Not enough bonded amount",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/UnbondException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "UnbondException": {
                    "value": {
                      "code": 107129,
                      "message": "Unable to request unbond",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polkadot/{network}/staking/withdraw-unbonded": {
      "post": {
        "operationId": "polkadot-staking-withdrawUnbonded",
        "summary": "Withdraw Unbonded Request",
        "description": "Withdrawing tokens within the Polkadot network that were previously unbonded.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet",
                "kusama",
                "westend"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawUnbondedRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/WithdrawalTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/AddressIsInvalidException"
                        },
                        {
                          "$ref": "#/components/schemas/NetworkIsNotIncludedInListException"
                        },
                        {
                          "$ref": "#/components/schemas/BondNotFoundException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongControllerException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "AddressIsInvalidException": {
                    "value": {
                      "code": 107101,
                      "message": "Polkadot address (undefined) is invalid",
                      "type": "client"
                    }
                  },
                  "NetworkIsNotIncludedInListException": {
                    "value": {
                      "code": 107119,
                      "message": "Network is not included in list (undefined)",
                      "type": "client"
                    }
                  },
                  "BondNotFoundException": {
                    "value": {
                      "code": 107103,
                      "message": "Bond not found",
                      "type": "client"
                    }
                  },
                  "WrongControllerException": {
                    "value": {
                      "code": 107105,
                      "message": "Wrong controller",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/WithdrawUnbondedException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "WithdrawUnbondedException": {
                    "value": {
                      "code": 107130,
                      "message": "Unable to withdraw unbonded",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polkadot"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/tx/send": {
      "post": {
        "operationId": "solana-staking-send",
        "summary": "Send Transaction",
        "description": "Send signed transaction to the Solana network.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet-beta",
                "testnet"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/SendResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/account/staking": {
      "get": {
        "operationId": "solana-staking-get-staking-account",
        "summary": "Get Staking Account",
        "description": "Return information about staking accounts.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet-beta",
                "testnet"
              ]
            }
          },
          {
            "name": "stakeAuthorities",
            "required": false,
            "in": "query",
            "description": "List of account addresses that can perform staking operations with staking accounts.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC,AaMC5y1RofbY3unyrahRzyCzsesp7rfGuaGegbAg1Hxb",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stakeAccounts",
            "required": false,
            "in": "query",
            "description": "List of staking account addresses.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC,AaMC5y1RofbY3unyrahRzyCzsesp7rfGuaGegbAg1Hxb",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withdrawAuthorities",
            "required": false,
            "in": "query",
            "description": "List of account addresses that can perform withdrawal operation with staking accounts.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC,AaMC5y1RofbY3unyrahRzyCzsesp7rfGuaGegbAg1Hxb",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Staking account status: `active`, `inactive`, `activating`, `deactivating`.",
            "example": "active",
            "schema": {
              "enum": [
                "active",
                "inactive",
                "activating",
                "deactivating"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakingResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/staking/stake": {
      "post": {
        "operationId": "solana-staking-stake",
        "summary": "Create Staking Request",
        "description": "Create staking request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet-beta",
                "testnet"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StakeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakeResult"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/staking/deactivate": {
      "post": {
        "operationId": "solana-staking-deactivate",
        "summary": "Create Deactivate Stake Request",
        "description": "Create deactivate stake request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet-beta",
                "testnet"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeactivateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/DeactivateResult"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/staking/withdraw": {
      "post": {
        "operationId": "solana-staking-withdraw",
        "summary": "Create Withdrawal Request",
        "description": "Create withdrawal request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet-beta",
                "testnet"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/WithdrawResult"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/staking/split": {
      "post": {
        "operationId": "solana-staking-split",
        "summary": "Create Split Request",
        "description": "Create split request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet-beta",
                "testnet"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SplitRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/StakeResult"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/staking/merge": {
      "post": {
        "operationId": "solana-staking-merge",
        "summary": "Create Merge Request",
        "description": "Create merge request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet-beta",
                "testnet"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/DeactivateResult"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/solana/{network}/staking/delegate": {
      "post": {
        "operationId": "solana-staking-delegate",
        "summary": "Create Delegate Request",
        "description": "Create delegate request transaction.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "<p>Solana network:</p><ul><li>`mainnet-beta` — production network.</li><li>`testnet` — testnet.</li></ul>",
            "schema": {
              "type": "string",
              "enum": [
                "mainnet-beta",
                "testnet"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/DeactivateResult"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Solana"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polygon/staking/approve": {
      "post": {
        "operationId": "StakingController_approve",
        "summary": "Approve Token Management",
        "description": "Allows the Polygon smart contract to manage tokens by obtaining approval.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polygon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polygon/staking/delegate": {
      "post": {
        "operationId": "StakingController_delegate",
        "summary": "Delegate Tokens to Stake",
        "description": "Delegate tokens to P2P validator to stake.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polygon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polygon/staking/undelegate": {
      "post": {
        "operationId": "StakingController_undelegate",
        "summary": "Undelegate Staked Tokens",
        "description": "Prepare previously staked tokens to unstake.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UndelegateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polygon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polygon/staking/unstake": {
      "post": {
        "operationId": "StakingController_unstake",
        "summary": "Unstake Tokens",
        "description": "Unstake tokens.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnstakeRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polygon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polygon/staking/withdraw": {
      "post": {
        "operationId": "StakingController_withdraw",
        "summary": "Withdraw Unstaked Tokens",
        "description": "Withdraw unstaked tokens.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polygon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polygon/staking/restake": {
      "post": {
        "operationId": "StakingController_restake",
        "summary": "Withdraw and Restake Rewards",
        "description": "Withdraw rewards in tokens and then stake it.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestakeRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polygon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polygon/staking/redelegate": {
      "post": {
        "operationId": "StakingController_redelegate",
        "summary": "Create Redelegate Transaction",
        "description": "Redelegate tokens from another validator.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedelegateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polygon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/polygon/transaction/send": {
      "post": {
        "operationId": "TransactionController_send",
        "summary": "Send Transaction",
        "description": "Send signed transaction to the Polygon network.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendTransactionDtoRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Polygon"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/request/create": {
      "post": {
        "operationId": "ssv-request-create",
        "summary": "Create SSV Request",
        "description": "Set up request for run a distributed validator and staking.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSsvRequestRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        },
                        {
                          "$ref": "#/components/schemas/SsvRequestIdAlreadyExistException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  },
                  "SsvRequestIdAlreadyExistException": {
                    "value": {
                      "code": 111103,
                      "message": "The SSV request id already exists",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SsvRequestCreateException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SsvRequestCreateException": {
                    "value": {
                      "code": 111100,
                      "message": "Error creating a SSV request",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/request/status/{id}": {
      "get": {
        "operationId": "ssv-request-status",
        "summary": "Check Status Request",
        "description": "Check the status of the set-up operation.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the SSV request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/SsvRequestResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SsvRequestNotFoundException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SsvRequestNotFoundException": {
                    "value": {
                      "code": 111104,
                      "message": "The SSV request not found",
                      "type": "not_found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/request": {
      "get": {
        "operationId": "ssv-request-list",
        "summary": "Check All Status Requests",
        "description": "Check the status of all the set-up operations created through the authorization token",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "example": 50,
            "description": "The number of resources that a single response page contains.",
            "schema": {
              "minimum": 1,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "example": 0,
            "description": "The number of resources to exclude from a response.",
            "schema": {
              "minimum": 0,
              "maximum": 100000,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetListSsvRequestResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SsvRequestGetListException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SsvRequestGetListException": {
                    "value": {
                      "code": 111101,
                      "message": "Error getting SSV requests list",
                      "type": "server"
                    }
                  },
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/tx/fee-recipient-address": {
      "get": {
        "operationId": "transaction-set-feeRecipientAddress",
        "summary": "Prepare Change feeRecipientAddress Transaction",
        "description": "Construct serialized transaction to set feeRecipientAddress on SSV cluster.",
        "parameters": [
          {
            "name": "feeRecipientAddress",
            "required": true,
            "in": "query",
            "description": "An ETH1 address that receives fee recipient rewards.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "schema": {
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/SetFeeRecipientAddressException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "SetFeeRecipientAddressException": {
                    "value": {
                      "code": 111108,
                      "message": "Failed to create set feeRecipientAddress transaction",
                      "type": "server"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/tx/deposit/{id}": {
      "get": {
        "operationId": "transaction-deposit",
        "summary": "Prepare Top-Up Cluster Balance Transaction",
        "description": "Construct serialized transaction to deposit SSV tokens on the cluster balance.",
        "parameters": [
          {
            "name": "operationPeriodInDays",
            "required": true,
            "in": "query",
            "example": 365,
            "description": "Operation period in days.",
            "schema": {
              "minimum": 1,
              "default": 365,
              "type": "number"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the SSV request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EthereumUnsignedTransactionListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/DepositException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "DepositException": {
                    "value": {
                      "code": 111120,
                      "message": "Error creating deposit tx",
                      "type": "server"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/tx/operator-fee": {
      "get": {
        "operationId": "transaction-get-operator-fee",
        "summary": "Get Operator Fee",
        "description": "Check the operator on SSV cluster.",
        "parameters": [
          {
            "name": "operatorId",
            "required": true,
            "in": "query",
            "example": 1,
            "description": "Operator Id",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetOperatorFeeResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetOperatorFeeException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetOperatorFeeException": {
                    "value": {
                      "code": 111109,
                      "message": "Failed to get operator fee",
                      "type": "server"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/ssv/tx/balance/{id}": {
      "get": {
        "operationId": "transaction-get-balance",
        "summary": "Get Cluster Fee Balance",
        "description": "Check the total SSV cluster balance.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the SSV request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/GetBalanceResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "ValidationException": {
                    "value": {
                      "code": 100101,
                      "message": "Validation error",
                      "type": "client"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "NoTokenException": {
                    "value": {
                      "code": 101111,
                      "message": "No token",
                      "type": "authentication"
                    }
                  },
                  "WrongTokenException": {
                    "value": {
                      "code": 101109,
                      "message": "Wrong token",
                      "type": "authentication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/GetBalanceException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "GetBalanceException": {
                    "value": {
                      "code": 111110,
                      "message": "Failed to get operator balance",
                      "type": "server"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "TokenGuardException": {
                    "value": {
                      "code": 101110,
                      "message": "Token guard error",
                      "type": "server"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SSV"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Staking API",
    "description": "API used for staking",
    "version": "1.0.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "https://api.p2p.org",
      "description": "Staking API"
    },
    {
      "url": "https://api-test.p2p.org",
      "description": "Testnet Staking API"
    },
    {
      "url": "https://api.p2p.org",
      "description": "ETH staking API"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "ExceptionResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object"
          },
          "result": {
            "type": "object",
            "nullable": true,
            "default": null
          }
        },
        "required": [
          "error",
          "result"
        ]
      },
      "NoTokenException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 101111
          },
          "message": {
            "type": "string",
            "default": "No token"
          },
          "name": {
            "type": "string",
            "default": "NoTokenException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "WrongTokenException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 101109
          },
          "message": {
            "type": "string",
            "default": "Wrong token"
          },
          "name": {
            "type": "string",
            "default": "WrongTokenException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidationErrorResponse": {
        "type": "object",
        "properties": {
          "property": {
            "type": "string"
          },
          "constraints": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "property",
          "constraints"
        ]
      },
      "ValidationException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 100101
          },
          "message": {
            "type": "string",
            "default": "Validation error"
          },
          "name": {
            "type": "string",
            "default": "ValidationException"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationErrorResponse"
            }
          }
        },
        "required": [
          "code",
          "message",
          "name",
          "errors"
        ]
      },
      "NetworkIsNotIncludedInListException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107119
          },
          "message": {
            "type": "string",
            "default": "Network is not included in list ([ 'mainnet', 'kusama', 'westend' ])"
          },
          "name": {
            "type": "string",
            "default": "NetworkIsNotIncludedInListException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SimulationTransactionOnCosmosException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110113
          },
          "message": {
            "type": "string",
            "default": "Simulation transaction failed"
          },
          "name": {
            "type": "string",
            "default": "SimulationTransactionOnCosmosException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "InsufficientFundsOnCosmosAccountException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110101
          },
          "message": {
            "type": "string",
            "default": "There are not enough funds in your account to make a stake"
          },
          "name": {
            "type": "string",
            "default": "InsufficientFundsOnCosmosAccountException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "CreateStakeTransactionException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110103
          },
          "message": {
            "type": "string",
            "default": "Create stake transaction failed"
          },
          "name": {
            "type": "string",
            "default": "CreateStakeTransactionException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "nullable": true,
            "default": null
          },
          "result": {
            "type": "object"
          }
        },
        "required": [
          "error",
          "result"
        ]
      },
      "Coin": {
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        },
        "required": [
          "denom",
          "amount"
        ]
      },
      "MsgDelegate": {
        "type": "object",
        "properties": {
          "delegatorAddress": {
            "type": "string",
            "description": "Delegator address",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "validatorAddress": {
            "type": "string",
            "description": "Validator address",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          },
          "amount": {
            "$ref": "#/components/schemas/Coin"
          }
        },
        "required": [
          "delegatorAddress",
          "validatorAddress"
        ]
      },
      "MsgUndelegate": {
        "type": "object",
        "properties": {
          "delegatorAddress": {
            "type": "string",
            "description": "Delegator address",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "validatorAddress": {
            "type": "string",
            "description": "Validator address",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          },
          "amount": {
            "$ref": "#/components/schemas/Coin"
          }
        },
        "required": [
          "delegatorAddress",
          "validatorAddress"
        ]
      },
      "MsgBeginRedelegate": {
        "type": "object",
        "properties": {
          "delegatorAddress": {
            "type": "string",
            "description": "Delegator address",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "validatorSrcAddress": {
            "type": "string",
            "description": "Source validator address",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          },
          "validatorDstAddress": {
            "type": "string",
            "description": "Destination validator address",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          },
          "amount": {
            "$ref": "#/components/schemas/Coin"
          }
        },
        "required": [
          "delegatorAddress",
          "validatorSrcAddress",
          "validatorDstAddress"
        ]
      },
      "MsgWithdrawDelegatorReward": {
        "type": "object",
        "properties": {
          "delegatorAddress": {
            "type": "string",
            "description": "Delegator address",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "validatorAddress": {
            "type": "string",
            "description": "Validator address",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "delegatorAddress",
          "validatorAddress"
        ]
      },
      "Message": {
        "type": "object",
        "properties": {
          "typeUrl": {
            "type": "string",
            "enum": [
              "/cosmos.staking.v1beta1.MsgDelegate",
              "/cosmos.staking.v1beta1.MsgUndelegate",
              "/cosmos.staking.v1beta1.MsgBeginRedelegate",
              "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward",
              "/cosmos.crypto.secp256k1.PubKey"
            ],
            "example": "/cosmos.staking.v1beta1.Tx"
          },
          "value": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MsgDelegate"
              },
              {
                "$ref": "#/components/schemas/MsgUndelegate"
              },
              {
                "$ref": "#/components/schemas/MsgBeginRedelegate"
              },
              {
                "$ref": "#/components/schemas/MsgWithdrawDelegatorReward"
              }
            ],
            "example": {
              "delegatorAddress": "string"
            }
          }
        },
        "required": [
          "typeUrl",
          "value"
        ]
      },
      "Amount": {
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "enum": [
              "atom",
              "uatom",
              "matom"
            ]
          },
          "amount": {
            "type": "string"
          }
        },
        "required": [
          "denom",
          "amount"
        ]
      },
      "TransactionFee": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Amount"
            }
          },
          "gas": {
            "type": "string"
          }
        },
        "required": [
          "amount",
          "gas"
        ]
      },
      "TransactionData": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "fee": {
            "$ref": "#/components/schemas/TransactionFee"
          },
          "memo": {
            "type": "string"
          },
          "encodedBody": {
            "type": "string"
          },
          "encodedAuthInfo": {
            "type": "string"
          }
        },
        "required": [
          "messages",
          "fee",
          "encodedBody",
          "encodedAuthInfo"
        ]
      },
      "StakeOrUnstakeTransactionStakingCosmosResponse": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address witch keeps tokens for bonding",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "transactionData": {
            "description": "Transaction data with messages, fee and memo",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionData"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number",
            "format": "decimal"
          },
          "currency": {
            "type": "string",
            "enum": [
              "atom",
              "uatom",
              "matom"
            ]
          },
          "validatorAddress": {
            "type": "string",
            "description": "Cosmos validator address",
            "example": "cosmosvaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          },
          "rewardDestinationAddress": {
            "type": "string",
            "description": "Reward destination account address in cosmos network",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "stashAccountAddress",
          "transactionData",
          "createdAt",
          "amount",
          "currency",
          "validatorAddress",
          "rewardDestinationAddress"
        ]
      },
      "StakeOrUnstakeStakingCosmosRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Cosmos stash account address",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "memo": {
            "type": "string",
            "example": "This is your memo message"
          },
          "amount": {
            "type": "number",
            "format": "decimal"
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "InsufficientFundsOnCosmosValidatorException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110102
          },
          "message": {
            "type": "string",
            "default": "The validator does not have enough funds to complete the unstake operation"
          },
          "name": {
            "type": "string",
            "default": "InsufficientFundsOnCosmosValidatorException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "CreateUnstakeTransactionException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110104
          },
          "message": {
            "type": "string",
            "default": "Create unstake transaction failed"
          },
          "name": {
            "type": "string",
            "default": "CreateUnstakeTransactionException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RedelegationTransactionInProcessException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110114
          },
          "message": {
            "type": "string",
            "default": "Redelegation to this validator already in progress; first redelegation to this validator must complete before next redelegation"
          },
          "name": {
            "type": "string",
            "default": "RedelegationTransactionInProcessException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "CreateRedelegateTransactionException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110105
          },
          "message": {
            "type": "string",
            "default": "Create redelegate transaction failed"
          },
          "name": {
            "type": "string",
            "default": "CreateRedelegateTransactionException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RedelegateTransactionStakingCosmosResponse": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address witch keeps tokens for bonding",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "transactionData": {
            "description": "Transaction data with messages, fee and memo",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionData"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number",
            "format": "decimal"
          },
          "currency": {
            "type": "string",
            "enum": [
              "atom",
              "uatom",
              "matom"
            ]
          },
          "sourceValidatorAddress": {
            "type": "string",
            "description": "Redelegate source validator address",
            "example": "cosmosvaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          },
          "destinationValidatorAddress": {
            "type": "string",
            "description": "Redelegate destination validator address",
            "example": "cosmosvaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "stashAccountAddress",
          "transactionData",
          "createdAt",
          "amount",
          "currency",
          "sourceValidatorAddress",
          "destinationValidatorAddress"
        ]
      },
      "RedelegateTransactionStakingCosmosRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Cosmos stash account address",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "memo": {
            "type": "string",
            "example": "This is your memo message"
          },
          "amount": {
            "type": "number",
            "format": "decimal"
          },
          "validatorAddress": {
            "type": "string",
            "description": "Cosmos validator address",
            "example": "cosmosvaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "stashAccountAddress",
          "amount",
          "validatorAddress"
        ]
      },
      "CreateClaimRewardsTransactionException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110106
          },
          "message": {
            "type": "string",
            "default": "Create claim rewards transaction failed"
          },
          "name": {
            "type": "string",
            "default": "CreateClaimRewardsTransactionException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ClaimRewardsTransactionStakingCosmosResponse": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address witch keeps tokens for bonding",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "transactionData": {
            "description": "Transaction data with messages, fee and memo",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionData"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "validatorAddress": {
            "type": "string",
            "description": "Cosmos validator address",
            "example": "cosmosvaloperjj5m7nku1ZlgyUJJ5kH1Rln3bER6eWHAKwKsgC9",
            "pattern": "^cosmosvaloper[a-zA-Z0-9]{39}$"
          }
        },
        "required": [
          "stashAccountAddress",
          "transactionData",
          "createdAt",
          "validatorAddress"
        ]
      },
      "BaseStakingCosmosRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Cosmos stash account address",
            "pattern": "^cosmos[a-zA-Z0-9]{39}$"
          },
          "memo": {
            "type": "string",
            "example": "This is your memo message"
          }
        },
        "required": [
          "stashAccountAddress"
        ]
      },
      "TransactionNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107108
          },
          "message": {
            "type": "string",
            "default": "Transaction not found"
          },
          "name": {
            "type": "string",
            "default": "TransactionNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "BroadcastTransactionFailedException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110109
          },
          "message": {
            "type": "string",
            "default": "Broadcast transaction failed"
          },
          "name": {
            "type": "string",
            "default": "BroadcastTransactionFailedException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "Gas": {
        "type": "object",
        "properties": {
          "used": {
            "type": "number"
          },
          "wanted": {
            "type": "number"
          }
        },
        "required": [
          "used",
          "wanted"
        ]
      },
      "TransactionStatusResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "failed"
            ]
          },
          "blockId": {
            "type": "number"
          },
          "fee": {
            "type": "number",
            "description": "Transaction fee in ATOM"
          },
          "gas": {
            "$ref": "#/components/schemas/Gas"
          },
          "transactionHash": {
            "type": "string",
            "pattern": "[A-Z0-9]{64}"
          }
        },
        "required": [
          "status",
          "blockId",
          "fee",
          "gas",
          "transactionHash"
        ]
      },
      "BroadcastTransactionRequest": {
        "type": "object",
        "properties": {
          "signedTransaction": {
            "type": "string",
            "description": "Signed transaction hash which needs to be broadcast to the network"
          }
        },
        "required": [
          "signedTransaction"
        ]
      },
      "InvalidTransactionHashException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110111
          },
          "message": {
            "type": "string",
            "default": "The transaction hash must satisfy the regular expression (/^[A-Z0-9]{64}$/)"
          },
          "name": {
            "type": "string",
            "default": "InvalidTransactionHashException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionAlreadyBroadcastException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110110
          },
          "message": {
            "type": "string",
            "default": "Transaction already broadcast"
          },
          "name": {
            "type": "string",
            "default": "TransactionAlreadyBroadcastException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetTransactionStatusFailedException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 110108
          },
          "message": {
            "type": "string",
            "default": "Get transaction status failed"
          },
          "name": {
            "type": "string",
            "default": "GetTransactionStatusFailedException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetNetworkStatsNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115102
          },
          "message": {
            "type": "string",
            "default": "Network stats not found"
          },
          "name": {
            "type": "string",
            "default": "GetNetworkStatsNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetNetworkExitQueueException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115103
          },
          "message": {
            "type": "string",
            "default": "Get network exit queue failed"
          },
          "name": {
            "type": "string",
            "default": "GetNetworkExitQueueException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetNetworkQueueResponse": {
        "type": "object",
        "properties": {
          "length": {
            "type": "number",
            "description": "Length of the queue.",
            "example": 0.1750427
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp of the last update to the queue.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "length",
          "updatedAt"
        ]
      },
      "GetNetworkStakingQueueException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115104
          },
          "message": {
            "type": "string",
            "default": "Get network staking queue failed"
          },
          "name": {
            "type": "string",
            "default": "GetNetworkStakingQueueException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetNetworkSupplyDataException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115105
          },
          "message": {
            "type": "string",
            "default": "Get network supply data failed"
          },
          "name": {
            "type": "string",
            "default": "GetNetworkSupplyDataException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetNetworkSupplyDataResponse": {
        "type": "object",
        "properties": {
          "percent": {
            "type": "number",
            "description": "Supply staked percent",
            "example": 18.645613
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp of the last update to the queue.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "percent",
          "updatedAt"
        ]
      },
      "GetNetworkLastStakingPeriodException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115106
          },
          "message": {
            "type": "string",
            "default": "Get network last staking period failed"
          },
          "name": {
            "type": "string",
            "default": "GetNetworkLastStakingPeriodException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetNetworkLastStakingPeriodResponse": {
        "type": "object",
        "properties": {
          "period": {
            "type": "number",
            "description": "Last staking period",
            "example": 244333
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp of the last update to the queue.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "period",
          "updatedAt"
        ]
      },
      "GetNetworkStatsHistoryException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115108
          },
          "message": {
            "type": "string",
            "default": "Get network stats history by staking period failed"
          },
          "name": {
            "type": "string",
            "default": "GetNetworkStatsHistoryException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetNetworkAPYResponse": {
        "type": "object",
        "properties": {
          "stakingPeriodNumber": {
            "type": "number",
            "description": "Unique identifier for the current staking period.",
            "example": 1227
          },
          "stakingPeriodStart": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the staking period, indicating when it began.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "stakingPeriodEnd": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the staking period, marking its scheduled conclusion.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "networkApy": {
            "type": "number",
            "description": "Annual Percentage Yield (APY) for the entire network.",
            "example": 5.2
          },
          "consensusLayerApy": {
            "type": "number",
            "description": "Annual Percentage Yield (APY) specific to the consensus layer of the network.",
            "example": 3.8
          },
          "executionLayerApy": {
            "type": "number",
            "description": "Annual Percentage Yield (APY) specific to the execution layer of the network.",
            "example": 6.5
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the last update to this data.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "stakingPeriodNumber",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "networkApy",
          "consensusLayerApy",
          "executionLayerApy",
          "updatedAt"
        ]
      },
      "GetNetworkAPYListResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "The number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "The number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetNetworkAPYResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "GetNetworkStatsHistoryRequest": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "maximum": 1000,
            "example": 50,
            "description": "The number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "example": 0,
            "minimum": 0,
            "maximum": 100000,
            "description": "The number of resources to exclude from a response."
          },
          "stakingPeriodStart": {
            "format": "datetime",
            "type": "string",
            "description": "Complete ISO-8601 date of staking period start",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "stakingPeriodEnd": {
            "format": "datetime",
            "type": "string",
            "description": "Complete ISO-8601 date of staking period end",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "limit",
          "offset",
          "stakingPeriodStart",
          "stakingPeriodEnd"
        ]
      },
      "GetNetworkStatsHistoryNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115109
          },
          "message": {
            "type": "string",
            "default": "Network stats history not found"
          },
          "name": {
            "type": "string",
            "default": "GetNetworkStatsHistoryNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetNetworkValidatorsCountResponse": {
        "type": "object",
        "properties": {
          "stakingPeriodNumber": {
            "type": "number",
            "description": "Unique identifier for the current staking period.",
            "example": 1227
          },
          "stakingPeriodStart": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the staking period, indicating when it began.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "stakingPeriodEnd": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the staking period, marking its scheduled conclusion.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "validatorsCount": {
            "type": "number",
            "description": "Validators count for the current staking period.",
            "example": 297
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the last update to this data.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "stakingPeriodNumber",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "validatorsCount",
          "updatedAt"
        ]
      },
      "GetNetworkValidatorsCountListResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "The number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "The number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetNetworkValidatorsCountResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "GetNetworkDelegatorsCountResponse": {
        "type": "object",
        "properties": {
          "stakingPeriodNumber": {
            "type": "number",
            "description": "Unique identifier for the current staking period.",
            "example": 1227
          },
          "stakingPeriodStart": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the staking period, indicating when it began.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "stakingPeriodEnd": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the staking period, marking its scheduled conclusion.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "delegatorsCount": {
            "type": "number",
            "description": "Delegators count for the current staking period.",
            "example": 21751
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the last update to this data.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "stakingPeriodNumber",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "delegatorsCount",
          "updatedAt"
        ]
      },
      "GetNetworkDelegatorsCountListResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "The number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "The number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetNetworkDelegatorsCountResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "GetNetworkStakeResponse": {
        "type": "object",
        "properties": {
          "stakingPeriodNumber": {
            "type": "number",
            "description": "Unique identifier for the current staking period.",
            "example": 1227
          },
          "stakingPeriodStart": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the staking period, indicating when it began.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "stakingPeriodEnd": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the staking period, marking its scheduled conclusion.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "stake": {
            "type": "number",
            "description": "Stake for the current staking period",
            "example": 665113860
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the last update to this data.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "stakingPeriodNumber",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "stake",
          "updatedAt"
        ]
      },
      "GetNetworkStakeListResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "The number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "The number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetNetworkStakeResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "GetNetworkRewardsStatsHistoryException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115110
          },
          "message": {
            "type": "string",
            "default": "Get network rewards stats history by staking period failed"
          },
          "name": {
            "type": "string",
            "default": "GetNetworkRewardsStatsHistoryException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetNetworkRewardsResponse": {
        "type": "object",
        "properties": {
          "stakingPeriodNumber": {
            "type": "number",
            "description": "Unique identifier for the current staking period.",
            "example": 12345
          },
          "stakingPeriodStart": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the staking period, indicating when it began.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "stakingPeriodEnd": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the staking period, marking its scheduled conclusion.",
            "example": "2023-08-24T08:23:18.830Z"
          },
          "rewardType": {
            "type": "string",
            "description": "Reward type.",
            "example": "staking"
          },
          "rewardAmount": {
            "type": "number",
            "description": "Reward amount for the current staking period",
            "example": 352843
          },
          "currency": {
            "type": "string",
            "description": "Reward currency.",
            "example": "DOT"
          },
          "mevSender": {
            "type": "string",
            "description": "Sender of the reward",
            "example": "0x1234567890abcdef"
          },
          "mevTxHash": {
            "type": "string",
            "description": "Transaction hash of the reward.",
            "example": "0x1234567890abcdef"
          },
          "mevSlot": {
            "type": "string",
            "description": "Slot of the reward.",
            "example": "12345"
          },
          "mevBlock": {
            "type": "string",
            "description": "Block of the reward.",
            "example": "12345"
          },
          "mevService": {
            "type": "string",
            "description": "MeV service.",
            "example": "Validator Rewards"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the last update to this data.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "stakingPeriodNumber",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "rewardType",
          "rewardAmount",
          "currency",
          "mevSender",
          "mevTxHash",
          "mevSlot",
          "mevBlock",
          "mevService",
          "updatedAt"
        ]
      },
      "GetNetworkRewardsListResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "The number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "The number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetNetworkRewardsResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "InvalidValidatorAddressException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115100
          },
          "message": {
            "type": "string",
            "default": "Validator address is not valid for the specified network"
          },
          "name": {
            "type": "string",
            "default": "InvalidValidatorAddressException"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationErrorResponse"
            }
          }
        },
        "required": [
          "code",
          "message",
          "name",
          "errors"
        ]
      },
      "GetValidatorStakesException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115111
          },
          "message": {
            "type": "string",
            "default": "Get validator stakes failed"
          },
          "name": {
            "type": "string",
            "default": "GetValidatorStakesException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidatorStake": {
        "type": "object",
        "properties": {
          "stakingPeriod": {
            "type": "number",
            "description": "Number of the staking period."
          },
          "stakingPeriodStart": {
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format."
          },
          "stakingPeriodEnd": {
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format."
          },
          "stake": {
            "type": "number",
            "description": "Total stake balance of the validator."
          }
        },
        "required": [
          "stakingPeriod",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "stake"
        ]
      },
      "GetValidatorStakesResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "The number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "The number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorStake"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "GetValidatorRewardsException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115112
          },
          "message": {
            "type": "string",
            "default": "Get validator rewards failed"
          },
          "name": {
            "type": "string",
            "default": "GetValidatorRewardsException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "Reward": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Reward type: `consensus`, `execution`."
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "Amount of tokens in the stake."
          },
          "currency": {
            "type": "string",
            "enum": [
              "ETH",
              "SOL",
              "POL"
            ],
            "description": "Currency of the tokens."
          },
          "recipient": {
            "type": "string",
            "description": "Rewards recipient address."
          }
        },
        "required": [
          "type",
          "amount",
          "currency",
          "recipient"
        ]
      },
      "ValidatorRewards": {
        "type": "object",
        "properties": {
          "stakingPeriod": {
            "type": "number",
            "description": "Number of the staking period."
          },
          "stakingPeriodStart": {
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format."
          },
          "stakingPeriodEnd": {
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format."
          },
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reward"
            }
          }
        },
        "required": [
          "stakingPeriod",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "rewards"
        ]
      },
      "GetValidatorRewardsResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "The number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "The number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorRewards"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "GetValidatorApyException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115113
          },
          "message": {
            "type": "string",
            "default": "Get validator apy failed"
          },
          "name": {
            "type": "string",
            "default": "GetValidatorApyException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidatorAPY": {
        "type": "object",
        "properties": {
          "stakingPeriod": {
            "type": "number",
            "description": "Number of the staking period."
          },
          "stakingPeriodStart": {
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format."
          },
          "stakingPeriodEnd": {
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format."
          },
          "apy": {
            "type": "number",
            "description": "Validator annual percentage yield (APY)."
          }
        },
        "required": [
          "stakingPeriod",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "apy"
        ]
      },
      "GetValidatorAPYResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "The number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "The number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorAPY"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "GetValidatorFeeException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 115113
          },
          "message": {
            "type": "string",
            "default": "Get validator fee failed"
          },
          "name": {
            "type": "string",
            "default": "GetValidatorFeeException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidatorFee": {
        "type": "object",
        "properties": {
          "stakingPeriod": {
            "type": "number",
            "description": "Number of the staking period."
          },
          "stakingPeriodStart": {
            "type": "string",
            "description": "Timestamp of the staking period start in the ISO 8601 format."
          },
          "stakingPeriodEnd": {
            "type": "string",
            "description": "Timestamp of the staking period finish in the ISO 8601 format."
          },
          "fee": {
            "type": "number",
            "description": "Validator fee."
          }
        },
        "required": [
          "stakingPeriod",
          "stakingPeriodStart",
          "stakingPeriodEnd",
          "fee"
        ]
      },
      "GetValidatorFeeResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "The number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "The number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorFee"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "DepositDataResponse": {
        "type": "object",
        "properties": {
          "pubkey": {
            "type": "string",
            "description": "Validator public key.",
            "example": "0xbe5E9c3Bb9eba1BF4C5eC1c1cbcF85ee2CE2fEC66Ce5460C23eF82332A044FDCabF7011F588CCbD77E73CCe6c4accDF0",
            "pattern": "^0x[a-fA-F0-9]{96}$"
          },
          "signature": {
            "type": "string",
            "description": "Validator signature.",
            "example": "0x15C9D0Bf74BE4ef12b0008Ed53825Da647E0C0FE21c0EfAE2B36E066bf44A5a9b5De0B70cE19F73D8eC5E7237Dde667FE8a99Ad607BddDC4b2aDd4c4Bc57b10ddfe7f0bFb925b48f4d37Cee8f894cEA365CeeA6c4B25a9Ca7DAbDfFdB2EDd6eB",
            "pattern": "^0x[a-fA-F0-9]{192}$"
          },
          "depositDataRoot": {
            "type": "string",
            "description": "Hash of the deposit data.",
            "example": "0xFEDdcB470eAA856c57f466e2f4d4F6971efEA1ED38fdB91bD913EEFFb52C8E24",
            "pattern": "^0x[a-fA-F0-9]{64}$"
          },
          "withdrawalCredentials": {
            "type": "string",
            "description": "Public key for withdrawing balance."
          },
          "amount": {
            "type": "string",
            "description": "Deposit amount."
          },
          "depositMessageRoot": {
            "type": "string",
            "description": "Cryptographic hash of the Merkle tree’s root."
          },
          "forkVersion": {
            "type": "string",
            "description": "Version of the Ethereum fork that the deposit is for."
          },
          "eth2NetworkName": {
            "type": "string",
            "description": "Eth2 network name."
          },
          "depositCliVersion": {
            "type": "string",
            "description": "Version of the deposit command-line interface."
          }
        },
        "required": [
          "pubkey",
          "signature",
          "depositDataRoot"
        ]
      },
      "NodesRequestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "UUID that was specified in the node set-up request."
          },
          "status": {
            "type": "string",
            "enum": [
              "init",
              "processing",
              "ready",
              "cancel"
            ],
            "description": "<p>Current status of the nodes request:</p><ul><li><i>init</i> — node request was created.</li><li><i>processing</i> — node request is in work.</li><li><i>ready</i> — backend has deposit data for the node request.</li><li><i>cancel</i> — something went wrong and the deposit data did not create.</li></ul>",
            "example": "processing"
          },
          "validatorsCount": {
            "type": "number",
            "description": "Number of validators.",
            "default": 1,
            "minimum": 1,
            "maximum": 3125,
            "example": 1
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address of the validator.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "controllerAddress": {
            "type": "string",
            "description": "Controller address of the validator.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "feeRecipientAddress": {
            "type": "string",
            "description": "Fee recipient address of the validator.",
            "example": "0x53da3c92fCCEb0CFE1764f65DDfF1564A2b15585",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "depositData": {
            "minItems": 1,
            "maxItems": 400,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepositDataResponse"
            }
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "id",
          "status",
          "validatorsCount",
          "withdrawalAddress",
          "feeRecipientAddress",
          "createdAt"
        ]
      },
      "GetRelaysSetsException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103125
          },
          "message": {
            "type": "string",
            "default": "Error getting relays sets"
          },
          "name": {
            "type": "string",
            "default": "GetRelaysSetsException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TokenGuardException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 101110
          },
          "message": {
            "type": "string",
            "default": "Token guard error"
          },
          "name": {
            "type": "string",
            "default": "TokenGuardException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RelaysSetResponse": {
        "type": "object",
        "properties": {
          "relaysSet": {
            "type": "string",
            "description": "Name of the MEV relay set."
          }
        },
        "required": [
          "relaysSet"
        ]
      },
      "GetRelaysSetsRequestResponse": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelaysSetResponse"
            }
          }
        },
        "required": [
          "list"
        ]
      },
      "Web3CreateTransactionException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103104
          },
          "message": {
            "type": "string",
            "default": "Could not create transaction"
          },
          "name": {
            "type": "string",
            "default": "Web3CreateTransactionException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "EthereumUnsignedTransactionResponse": {
        "type": "object",
        "properties": {
          "serializeTx": {
            "type": "string",
            "description": "Serialized unsigned transaction.",
            "example": "0x02f902d705808301674e8508530af16e830186a094681a1b3441c6bfb12f91651efd9f02c83c0702938901bc16d674ec800000b902a44f498c730000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030aa5f27070a21d79455c4a9b73c0aa4a8b1a65a1fb530d7fd8e6cd23aa16660679ac43ee4861098f6d9166aed3a4d8abb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002001000000000000000000000028c84612d37de9209018ad96167f12169b653e9a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060978c565cd915f4e885b4201093d1501697610eb9ee99b9b60b70434dc330e98d5b42927725304ded48483a8b8f39506d09bcb22ee18d4f6b50257946ac5ee360385308d95c0e2bc963902d42e985c29ee489aa3c989ac1561c952a6424f107a800000000000000000000000000000000000000000000000000000000000000014cb452f6e3f10ba2175c86a0284f53fcb61404b458393391abc3d5622e3e55cdc0",
            "pattern": "^0x([A-Fa-f0-9])+$",
            "nullable": false
          },
          "to": {
            "type": "string",
            "description": "Recipient address for this transaction.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "gasLimit": {
            "type": "string",
            "example": "0",
            "description": "Maximum gas limit for this block."
          },
          "data": {
            "type": "string",
            "example": "",
            "description": "Transaction data."
          },
          "value": {
            "type": "string",
            "example": "0",
            "description": "Amount of tokens to send in Wei."
          },
          "chainId": {
            "type": "string",
            "example": "0",
            "description": "Chain ID this transaction is authorized on, as specified by EIP-155."
          },
          "type": {
            "type": "string",
            "example": "0",
            "description": "EIP-2718 type of this transaction envelope."
          },
          "maxFeePerGas": {
            "type": "string",
            "example": "0",
            "description": "Maximum price per unit of gas this transaction will pay for the combined EIP-1559 block's base fee and this transaction's priority fee in Wei."
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "example": "0",
            "description": "Price per unit of gas in Wei, which is added to the EIP-1559 block's base fee. This added fee is used to incentivize miners to prioritize this transaction."
          }
        },
        "required": [
          "serializeTx",
          "to",
          "gasLimit",
          "data",
          "value",
          "chainId",
          "type",
          "maxFeePerGas",
          "maxPriorityFeePerGas"
        ]
      },
      "DepositDataRequest": {
        "type": "object",
        "properties": {
          "pubkey": {
            "type": "string",
            "description": "Validator public key.",
            "example": "0x4Ef81c0018aB0DCbBdC8915D26efAcEa7CDef61eE9aBdddcBdAD2f2F04c5b6E4fBA6F5afD1Ad46267c1DC8544E690fE4",
            "pattern": "^0x[a-fA-F0-9]{96}$"
          },
          "signature": {
            "type": "string",
            "description": "Validator signature.",
            "example": "0x83D2E925AEAEdcB18db983Bd447db0BFc1Ee9a6Ead118E5BEfeBcb24BA8C0efd3BD19Cb1cE8e807Fc980a67bBbf8b11e039efe2DB71fcdF096fccac5B04dF80f6a1804cd8d492455D30abE27FcDbDA78AFE61856cad65ffF5cA48Ed4776edd88",
            "pattern": "^0x[a-fA-F0-9]{192}$"
          },
          "depositDataRoot": {
            "type": "string",
            "description": "Hash of the deposit data.",
            "example": "0x784bfffb4DfEFb457BA9187B38E49a1Bc0f4af50EDDDaca9581AA0aA7F98E96C",
            "pattern": "^0x[a-fA-F0-9]{64}$"
          }
        },
        "required": [
          "pubkey",
          "signature",
          "depositDataRoot"
        ]
      },
      "StakeEthereumRequest": {
        "type": "object",
        "properties": {
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "depositData": {
            "minItems": 1,
            "maxItems": 400,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepositDataRequest"
            }
          }
        },
        "required": [
          "withdrawalAddress",
          "depositData"
        ]
      },
      "InvalidDepositDataSignException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103113
          },
          "message": {
            "type": "string",
            "default": "Invalid deposit-data signature"
          },
          "name": {
            "type": "string",
            "default": "InvalidDepositDataSignException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "PubkeyDoNotExistsException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103105
          },
          "message": {
            "type": "string",
            "default": "Unauthorized to request withdrawal transaction for validator public key"
          },
          "name": {
            "type": "string",
            "default": "PubkeyDoNotExistsException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidatorNotActiveException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103106
          },
          "message": {
            "type": "string",
            "default": "Error creating withdrawal transaction because one or more validators are not in active state"
          },
          "name": {
            "type": "string",
            "default": "ValidatorNotActiveException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "WithdrawalTransactionException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103107
          },
          "message": {
            "type": "string",
            "default": "Could not create withdrawal transaction"
          },
          "name": {
            "type": "string",
            "default": "WithdrawalTransactionException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "UnstakeEthereumRequest": {
        "type": "object",
        "properties": {
          "pubkeys": {
            "description": "List of validators public keys.",
            "example": [
              "0xffC08FcD7cFeF5c70fB2b0e1f2A8EaA690AaE2bDFfa5dBEc4dEef31DcC0B19eB1f9Cebe3E2fe9eefBD9a1BDF6FD89b39"
            ],
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{96}$"
            }
          }
        },
        "required": [
          "pubkeys"
        ]
      },
      "ValidatorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "not_found",
              "pending_initialized",
              "pending_queued",
              "active_ongoing",
              "active_exiting",
              "active_slashed",
              "exited_unslashed",
              "exited_slashed",
              "withdrawal_possible",
              "withdrawal_done"
            ],
            "description": "<p>State of the validator:</p><ul><li>`not_found` — the specified validator could not be located.</li><li>`deposited` — the user deposited 32 ETH, and the deposit was processed by the Ethereum Beacon Chain.</li><li>`pending` — the validator entered a queue for activation.</li><li>`active_online` — the validator was activated and participating in attesting and proposing blocks.</li><li>`active_offline` — the validator is offline and not participating in the validator activities.</li><li>`slashed` — the validator was slashed due to misbehaviors.</li><li>`exited` — the validator has exited the network and is no longer acting as a validator.</li></ul>",
            "example": "active_ongoing"
          },
          "amount": {
            "type": "string",
            "example": "1",
            "description": "Total stake amount for the validator at the moment."
          },
          "pubkey": {
            "type": "string",
            "description": "Validator public key.",
            "example": "0xbe5E9c3Bb9eba1BF4C5eC1c1cbcF85ee2CE2fEC66Ce5460C23eF82332A044FDCabF7011F588CCbD77E73CCe6c4accDF0",
            "pattern": "^0x[a-fA-F0-9]{96}$"
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address of the validator.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "status",
          "amount",
          "pubkey"
        ]
      },
      "ValidatorsResponse": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorResponse"
            }
          }
        },
        "required": [
          "list"
        ]
      },
      "ValidatorsRequest": {
        "type": "object",
        "properties": {
          "pubkeys": {
            "description": "List of validator public keys.",
            "example": [
              "0xffC08FcD7cFeF5c70fB2b0e1f2A8EaA690AaE2bDFfa5dBEc4dEef31DcC0B19eB1f9Cebe3E2fe9eefBD9a1BDF6FD89b39"
            ],
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{96}$"
            }
          }
        },
        "required": [
          "pubkeys"
        ]
      },
      "NodesRequestIdAlreadyExistException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103121
          },
          "message": {
            "type": "string",
            "default": "Nodes request id already exists"
          },
          "name": {
            "type": "string",
            "default": "NodesRequestIdAlreadyExistException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NodesRequestCreateException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103116
          },
          "message": {
            "type": "string",
            "default": "Error creating nodes request"
          },
          "name": {
            "type": "string",
            "default": "NodesRequestCreateException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NodesOptionsRequest": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "enum": [
              "any"
            ],
            "example": "any",
            "description": "Nodes location. Currently, only `any` is supported.",
            "default": "any"
          },
          "relaysSet": {
            "type": "string",
            "description": "MEV Relay selection.",
            "example": null
          }
        },
        "required": [
          "location"
        ]
      },
      "CreateNodesRequestRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "Arbitrary UUID. You can later use that UUID to check the status of the set-up operation."
          },
          "validatorsCount": {
            "type": "number",
            "description": "Number of validators. One validator is equal to 32 ETH.",
            "default": 1,
            "minimum": 1,
            "maximum": 3125,
            "example": 1
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address for the validators.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "controllerAddress": {
            "type": "string",
            "description": "Controller address for the validators.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "feeRecipientAddress": {
            "type": "string",
            "description": "The fee recipient address",
            "example": "0x53da3c92fCCEb0CFE1764f65DDfF1564A2b15585",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "nodesOptions": {
            "$ref": "#/components/schemas/NodesOptionsRequest"
          }
        },
        "required": [
          "id",
          "validatorsCount",
          "withdrawalAddress",
          "nodesOptions"
        ]
      },
      "NodesRequestNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103114
          },
          "message": {
            "type": "string",
            "default": "Nodes request not found"
          },
          "name": {
            "type": "string",
            "default": "NodesRequestNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NodesRequestGetException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103117
          },
          "message": {
            "type": "string",
            "default": "Error getting nodes request"
          },
          "name": {
            "type": "string",
            "default": "NodesRequestGetException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NodesRequestGetListException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 103120
          },
          "message": {
            "type": "string",
            "default": "Error getting nodes requests list"
          },
          "name": {
            "type": "string",
            "default": "NodesRequestGetListException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetListNodesRequestResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "The number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "The number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodesRequestResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "VemIdAlreadyExistException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 112103
          },
          "message": {
            "type": "string",
            "default": "VEM request id already exists"
          },
          "name": {
            "type": "string",
            "default": "VemIdAlreadyExistException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "VemCreateException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 112101
          },
          "message": {
            "type": "string",
            "default": "Error creating VEM request"
          },
          "name": {
            "type": "string",
            "default": "VemCreateException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "CreateVemRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "Arbitrary UUID. You can later use that UUID to check the status of the VEM request."
          },
          "type": {
            "type": "string",
            "enum": [
              "off_chain",
              "on_chain"
            ],
            "description": "<p>Type of the VEM request:</p><ul><li>`off_chain` — off-chain signature.</li><li>`on_chain` — on-chain signature.</li></ul>",
            "example": "off_chain",
            "default": "off_chain"
          },
          "vemRequest": {
            "type": "string",
            "description": "Prepared VEM request. Required if the type is `off_chain`.",
            "example": "{\"action\": \"vem_request\",\"pubkeys\": [\"0x867a9f95287decd74e076b8fefca3022fcb2c3c37de246e950ade0cc3609c74d4badda62657a64c2c4009f1b6625c647\", \"0x93e298f6ac5fb8f262a23450d1638aec1c45f77fd1ac86beb19b696b3b84fef3694e9b2166b337783911a3d7df13fbf1\"],\"ecdh_client_pubkey\": \"0xa16c2f1354a7a58abbf78172730595c4de8277962ebe92100793f99ea80f66abe5e75a14a52e86ce1c086c1ca2e1662b3900510346d848b425d34279ceea92661fb1166b9438589c0b57eb4ebb69e0c3844ebe5ad4c0e316b637d47148d69dc2387c2968c82d198114a6c0f14a605a9e85110d24a9db4f11963b9b13dc788c0538096cadffd258364c63621f6bb1a3e515d3741af4619e62452a394fab9d84be7cee255fdd7216401cafee6471b4adbb77e93f878f1bb4df633e0632522b51fe70fc154e7d3e60a69f815a4e2a84506f05b1ccfce01e873cd7dc51fba0b6eac66af1c0a7500f71af405a6c34ffd27a1239180c22fbddf8dc15d30c821c57307d\"}"
          },
          "vemRequestSignature": {
            "type": "string",
            "description": "Signature of `vem_request` by either `withdrawalAddress` or `controllerAddress`. Required if the type is `off_chain`.",
            "example": "0x5d64827430e3d2fc1f4C9293709B13fc2af45c8eed295f96a4195d2c9224b5e344a969279ff437139868fc7e534191217ef3fe4d9c9b71d1bfeeDASbfb26d118243"
          },
          "vemRequestSignedBy": {
            "type": "string",
            "description": "`withdrawalAddress` or `controllerAddress` that signed the request. Required if the type is `off_chain`.",
            "example": "0x78ADAeE48151b2E42de20f42b1a1980871314Ef5"
          },
          "vemRequestTxId": {
            "type": "string",
            "description": "Hash of the successful `vem_request` transaction. Required if the type is `on_chain`.",
            "example": null
          },
          "vemRequestProof": {
            "type": "string",
            "description": "Hash of the signed `vemRequestTxId` transaction. Required if the type is `on_chain`.",
            "example": null
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "VemNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 112102
          },
          "message": {
            "type": "string",
            "default": "VEM request not found"
          },
          "name": {
            "type": "string",
            "default": "VemNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "VemGetException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 112104
          },
          "message": {
            "type": "string",
            "default": "Error getting VEMs request"
          },
          "name": {
            "type": "string",
            "default": "VemGetException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "VemResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "UUID that was specified in the VEM request."
          },
          "status": {
            "type": "string",
            "enum": [
              "processing",
              "success",
              "error",
              "fault"
            ],
            "description": "<p>Current status of the VEM request:</p><ul><li>`processing` — requst is in progress.</li><li>`success` — answer is ready.</li><li>`error` — there is an issue with the data, unable to create VEM.</li><li>`fault` — error occurred on the server side.</li></ul>",
            "example": "processing"
          },
          "type": {
            "type": "string",
            "enum": [
              "off_chain",
              "on_chain"
            ],
            "description": "<p>Type of the VEM request:</p><ul><li>`off_chain` — off-chain signature.</li><li>`on_chain` — on-chain signature.</li></ul>",
            "example": "off_chain"
          },
          "vemRequest": {
            "type": "string",
            "description": "Prepared VEM request.",
            "example": "{\"action\": \"vem_request\",\"pubkeys\": [\"0x867a9f95287decd74e076b8fefca3022fcb2c3c37de246e950ade0cc3609c74d4badda62657a64c2c4009f1b6625c647\", \"0x93e298f6ac5fb8f262a23450d1638aec1c45f77fd1ac86beb19b696b3b84fef3694e9b2166b337783911a3d7df13fbf1\"],\"ecdh_client_pubkey\": \"0xa16c2f1354a7a58abbf78172730595c4de8277962ebe92100793f99ea80f66abe5e75a14a52e86ce1c086c1ca2e1662b3900510346d848b425d34279ceea92661fb1166b9438589c0b57eb4ebb69e0c3844ebe5ad4c0e316b637d47148d69dc2387c2968c82d198114a6c0f14a605a9e85110d24a9db4f11963b9b13dc788c0538096cadffd258364c63621f6bb1a3e515d3741af4619e62452a394fab9d84be7cee255fdd7216401cafee6471b4adbb77e93f878f1bb4df633e0632522b51fe70fc154e7d3e60a69f815a4e2a84506f05b1ccfce01e873cd7dc51fba0b6eac66af1c0a7500f71af405a6c34ffd27a1239180c22fbddf8dc15d30c821c57307d\"}"
          },
          "vemRequestSignature": {
            "type": "string",
            "description": "Signature of `vem_request` by either `withdrawalAddress` or `controllerAddress`.",
            "example": "0x5d64827430e3d2fc1f4C9293709B13fc2af45c8eed295f96a4195d2c9224b5e344a969279ff437139868fc7e534191217ef3fe4d9c9b71d1bfeeDASbfb26d118243"
          },
          "vemRequestSignedBy": {
            "type": "string",
            "description": "`withdrawalAddress` or `controllerAddress` that signed the request.",
            "example": "0x78ADAeE48151b2E42de20f42b1a1980871314Ef5"
          },
          "vemRequestTxId": {
            "type": "string",
            "description": "Hash of the successful `vem_request` transaction.",
            "example": null
          },
          "vemRequestProof": {
            "type": "string",
            "description": "Hash of the signed `vemRequestTxId` transaction.",
            "example": null
          },
          "error": {
            "type": "string",
            "description": "Error message.",
            "example": ""
          },
          "vemResult": {
            "type": "string",
            "description": "Encrypted VEM result.",
            "example": ""
          },
          "forkVersion": {
            "type": "string",
            "description": "Version of the Ethereum fork."
          }
        },
        "required": [
          "id",
          "status",
          "type"
        ]
      },
      "StatusException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107122
          },
          "message": {
            "type": "string",
            "default": "Unable to get transaction status"
          },
          "name": {
            "type": "string",
            "default": "StatusException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SignTransactionResponse": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "mainnet",
              "kusama",
              "westend"
            ],
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>"
          },
          "signedTransaction": {
            "type": "string",
            "description": "Signed transaction in Base64 encrypted format which needs to be broadcast to the network.",
            "example": "0xbd018400cc7cb7325ad1208212e2d8ee41a7572e816d53ac1bcac1be5df433486819213c011a6fc75a4d779e13a789ce9fe03d5cbb090b1e9833ae38c2c873571b73e2d7393f30bf097d93ca1692d426196f263d609e4d421cef3e017ad8bd388604e47e839502a80006010700e40b5402",
            "pattern": "^0x([A-Fa-f0-9])+$",
            "nullable": false
          },
          "status": {
            "type": "string",
            "enum": [
              "success",
              "failed"
            ],
            "description": "Transaction status.",
            "example": "success"
          },
          "blockHash": {
            "type": "string",
            "description": "Block hash in which the transaction was included.",
            "example": "0x0628743b05ffb4c9d5ea2144b359af38910f0ae439a685f57d85b50b9481ba3f"
          },
          "blockId": {
            "type": "number",
            "description": "Unique block identifier.",
            "example": "17168395"
          },
          "extrinsicId": {
            "type": "number",
            "description": "Unique extrinsic identifier.",
            "example": "17177570-2"
          },
          "transactionHash": {
            "type": "string",
            "description": "Signed extrinsic transaction in hex format.",
            "example": "0xbd018400cc7cb7325ad1208212e2d8ee41a7572e816d53ac1bcac1be5df433486819213c011a6fc75a4d779e13a789ce9fe03d5cbb090b1e9833ae38c2c873571b73e2d7393f30bf097d93ca1692d426196f263d609e4d421cef3e017ad8bd388604e47e839502a80006010700e40b5402"
          },
          "signerAccount": {
            "type": "string",
            "description": "Account that signed the transaction.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "data": {
            "type": "string",
            "description": "Method data."
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "network",
          "signedTransaction",
          "status",
          "blockHash",
          "blockId",
          "extrinsicId",
          "transactionHash",
          "signerAccount",
          "data",
          "createdAt"
        ]
      },
      "ExtrinsicCouldNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107116
          },
          "message": {
            "type": "string",
            "default": "Extrinsic cannot be found"
          },
          "name": {
            "type": "string",
            "default": "ExtrinsicCouldNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SendException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107123
          },
          "message": {
            "type": "string",
            "default": "Unable to send transaction"
          },
          "name": {
            "type": "string",
            "default": "SendException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionUsurpedException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107113
          },
          "message": {
            "type": "string",
            "default": "Transaction was usurped"
          },
          "name": {
            "type": "string",
            "default": "TransactionUsurpedException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "CouldNotGetStateException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107117
          },
          "message": {
            "type": "string",
            "default": "Could not get transaction state"
          },
          "name": {
            "type": "string",
            "default": "CouldNotGetStateException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ExtrinsicCouldNotSendException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107118
          },
          "message": {
            "type": "string",
            "default": "Extrinsic cannot be sent"
          },
          "name": {
            "type": "string",
            "default": "ExtrinsicCouldNotSendException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionInvalidException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107112
          },
          "message": {
            "type": "string",
            "default": "Transaction is invalid"
          },
          "name": {
            "type": "string",
            "default": "TransactionInvalidException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionFinalityTimeoutException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107114
          },
          "message": {
            "type": "string",
            "default": "Transaction was finality timeouted"
          },
          "name": {
            "type": "string",
            "default": "TransactionFinalityTimeoutException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionDroppedException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107115
          },
          "message": {
            "type": "string",
            "default": "Transaction was dropped"
          },
          "name": {
            "type": "string",
            "default": "TransactionDroppedException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SendRequest": {
        "type": "object",
        "properties": {
          "signedTransaction": {
            "type": "string",
            "description": "Signed transaction in Base64 encrypted format which needs to be broadcast to the network.",
            "example": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAcJjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+jagnMHpK8BDHt0PpssHwXGD2fBxS6MWBoxptD2u9TvrgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1NjSeWM5+GSJdoQd43Al9SVVXC9FfWGwbe7icpomwAUGodgXkTdUKpg0N73+KnqyVX9TXIp4citopJ3AAAAAAAah2BelAgULaAeR5s5tuI4eW3FQ9h/GeQpOtNEAAAAABqfVFxjHdMkoVmOYaR1etoteuKObS21cc1VbIQAAAAAGp9UXGSxcUSGMyUw9SvF/WNruCJuh/UTj29mKAAAAAAan1RcZNYTQ/u2bs0MdEyBr5UQoG1e4VmzFN1/0AAAAijW940iwWddz25ZC37fI0ue5fa+eTbC2ynBM3b0t4pcDAgMAAQBgAwAAAI5ELeF3F+N1ZPBWe0G1FV0heaKPY7e8dg5tBPbrf8voBAAAAAAAAABzZWVkgJaYAAAAAADIAAAAAAAAAAah2BeRN1QqmDQ3vf4qerJVf1NcinhyK2ikncAAAAAABAIBB3QAAAAAjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+iORC3hdxfjdWTwVntBtRVdIXmij2O3vHYObQT263/L6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQGAQMGCAUABAIAAAA="
          }
        },
        "required": [
          "signedTransaction"
        ]
      },
      "TransactionGetListException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107124
          },
          "message": {
            "type": "string",
            "default": "Unable to get list of transaction"
          },
          "name": {
            "type": "string",
            "default": "TransactionGetListException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "PolkadotTransactionResponse": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "mainnet",
              "kusama",
              "westend"
            ],
            "example": "westend",
            "description": "<p>Polkadot network:</p><ul><li>`mainnet` — Polkadot mainnet.</li><li>`kusama` — a canary network that holds real economic value.</li><li>`westend` — Polkadot testnet.</li></ul>"
          },
          "signedTransaction": {
            "type": "string",
            "description": "Signed transaction in Base64 encrypted format which needs to be broadcast to the network.",
            "example": "0xbd018400cc7cb7325ad1208212e2d8ee41a7572e816d53ac1bcac1be5df433486819213c011a6fc75a4d779e13a789ce9fe03d5cbb090b1e9833ae38c2c873571b73e2d7393f30bf097d93ca1692d426196f263d609e4d421cef3e017ad8bd388604e47e839502a80006010700e40b5402",
            "pattern": "^0x([A-Fa-f0-9])+$",
            "nullable": false
          },
          "status": {
            "type": "string",
            "enum": [
              "success",
              "failed"
            ],
            "description": "Transaction status.",
            "example": "success"
          },
          "blockHash": {
            "type": "string",
            "description": "Block hash in which the transaction was included.",
            "example": "0x0628743b05ffb4c9d5ea2144b359af38910f0ae439a685f57d85b50b9481ba3f"
          },
          "blockId": {
            "type": "number",
            "description": "Unique block identifier.",
            "example": "17168395"
          },
          "extrinsicId": {
            "type": "number",
            "description": "Unique extrinsic identifier.",
            "example": "17177570-2"
          },
          "transactionHash": {
            "type": "string",
            "description": "Signed extrinsic transaction in hex format.",
            "example": "0xbd018400cc7cb7325ad1208212e2d8ee41a7572e816d53ac1bcac1be5df433486819213c011a6fc75a4d779e13a789ce9fe03d5cbb090b1e9833ae38c2c873571b73e2d7393f30bf097d93ca1692d426196f263d609e4d421cef3e017ad8bd388604e47e839502a80006010700e40b5402"
          },
          "signerAccount": {
            "type": "string",
            "description": "Account that signed the transaction.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "data": {
            "type": "string",
            "description": "Method data."
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "network",
          "signedTransaction",
          "status",
          "blockHash",
          "blockId",
          "extrinsicId",
          "transactionHash",
          "signerAccount",
          "data",
          "createdAt"
        ]
      },
      "GetListTransactionResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "The number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "The number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolkadotTransactionResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "AddressIsInvalidException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107101
          },
          "message": {
            "type": "string",
            "default": "Polkadot address (%s) is invalid"
          },
          "name": {
            "type": "string",
            "default": "AddressIsInvalidException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "AddException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107120
          },
          "message": {
            "type": "string",
            "default": "Unable to add proxy"
          },
          "name": {
            "type": "string",
            "default": "AddException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "InsufficientBalanceException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107102
          },
          "message": {
            "type": "string",
            "default": "Insufficient balance. Min balance is %s"
          },
          "name": {
            "type": "string",
            "default": "InsufficientBalanceException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "0xa404160200165874de804160c3cd013d9b6f4bba864657c4c2168a542f78ff14a0253873190200000000"
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:23:18.830Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "createdAt"
        ]
      },
      "AddRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Proxied account is an address that transfers rights to a proxy account. The original account retains all of its rights, and the proxy account can be removed at any time.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "proxyAccountAddress": {
            "type": "string",
            "description": "Proxy account is an address that receives proxied account rights.",
            "example": "5Ggpg3JepXM3ZrktNpoc5QA1sKaFVpUPWMRr7jppiMxTuU75"
          }
        },
        "required": [
          "stashAccountAddress",
          "proxyAccountAddress"
        ]
      },
      "ProxyNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107107
          },
          "message": {
            "type": "string",
            "default": "Proxy not found"
          },
          "name": {
            "type": "string",
            "default": "ProxyNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RemoveException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107121
          },
          "message": {
            "type": "string",
            "default": "Unable to remove proxy"
          },
          "name": {
            "type": "string",
            "default": "RemoveException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RemoveRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Proxied account is an address that transfers rights to a proxy account. The original account retains all of its rights, and the proxy account can be removed at any time.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "proxyAccountAddress": {
            "type": "string",
            "description": "Proxy account is an address that receives proxied account rights.",
            "example": "5Ca1Bqfzc4DdU6zMXLu5UhpRtdX5EzCseDXW9YisVm25ATeJ"
          }
        },
        "required": [
          "stashAccountAddress",
          "proxyAccountAddress"
        ]
      },
      "StakeAmountTooSmallException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107106
          },
          "message": {
            "type": "string",
            "default": "Stake amount too small. Min amount is %s"
          },
          "name": {
            "type": "string",
            "default": "StakeAmountTooSmallException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "BondException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107125
          },
          "message": {
            "type": "string",
            "default": "Unable to request bond"
          },
          "name": {
            "type": "string",
            "default": "BondException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "PolkadotUnsignedBondTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "0xac0406000b0030ef7dba0203ded255321b86f5f975cf04fd0e9d2b1d941469d469dcc93b89441cdfe6c39f7b"
          },
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "rewardDestinationType": {
            "type": "string",
            "enum": [
              "staked",
              "stash",
              "controller",
              "account"
            ],
            "description": "<p>Rewards destination type:</p><ul><li>`staked` — rewards will be sent to your Stash account and added to your current bond (compounding rewards).</li><li>`stash` — rewards will be sent to your Stash account as transferrable balance (not compounding rewards).</li><li>`controller` — rewards will be sent to the controller account.</li><li>`account` — rewards will be sent to any account you specify as transferrable balance.</li></ul>"
          },
          "rewardDestination": {
            "type": "string",
            "description": "Rewards destination account address.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond (in usual DOTs/KSMs/WNDs).",
            "example": 3
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "stashAccountAddress",
          "rewardDestinationType",
          "rewardDestination",
          "amount",
          "createdAt"
        ]
      },
      "BondRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "rewardDestinationType": {
            "type": "string",
            "enum": [
              "staked",
              "stash",
              "controller",
              "account"
            ],
            "example": "account",
            "description": "<p>Rewards destination type:</p><ul><li>`staked` — rewards will be sent to your Stash account and added to your current bond (compounding rewards).</li><li>`stash` — rewards will be sent to your Stash account as transferrable balance (not compounding rewards).</li><li>`controller` — rewards will be sent to the controller account.</li><li>`account` — rewards will be sent to any account you specify as transferrable balance.</li></ul>"
          },
          "rewardDestination": {
            "type": "string",
            "description": "Rewards destination account address.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond (in usual DOTs/KSMs/WNDs).",
            "example": 3
          }
        },
        "required": [
          "stashAccountAddress",
          "rewardDestinationType",
          "amount"
        ]
      },
      "BondExtraException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107126
          },
          "message": {
            "type": "string",
            "default": "Unable to request bond extra"
          },
          "name": {
            "type": "string",
            "default": "BondExtraException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "PolkadotUnsignedTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "0xac0406000b0030ef7dba0203ded255321b86f5f975cf04fd0e9d2b1d941469d469dcc93b89441cdfe6c39f7b"
          },
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens for bond operations (in usual DOTs/KSMs/WNDs).",
            "example": 3
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "stashAccountAddress",
          "amount",
          "createdAt"
        ]
      },
      "BondExtraRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond (in usual DOTs/KSMs/WNDs).",
            "example": 1
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "LedgerNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107104
          },
          "message": {
            "type": "string",
            "default": "Ledger not found"
          },
          "name": {
            "type": "string",
            "default": "LedgerNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NotEnoughPendingAmountException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107109
          },
          "message": {
            "type": "string",
            "default": "Not enough pending amount"
          },
          "name": {
            "type": "string",
            "default": "NotEnoughPendingAmountException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "WrongControllerException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107105
          },
          "message": {
            "type": "string",
            "default": "Wrong controller"
          },
          "name": {
            "type": "string",
            "default": "WrongControllerException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RebondException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107128
          },
          "message": {
            "type": "string",
            "default": "Unable to request rebond"
          },
          "name": {
            "type": "string",
            "default": "RebondException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RebondRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to bond (in usual DOTs/KSMs/WNDs).",
            "example": 3
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "NominateResponse": {
        "type": "object",
        "properties": {
          "nominate": {
            "type": "string",
            "description": "Validator address."
          }
        },
        "required": [
          "nominate"
        ]
      },
      "GetListNominateResponse": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NominateResponse"
            }
          }
        },
        "required": [
          "list"
        ]
      },
      "NominateException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107127
          },
          "message": {
            "type": "string",
            "default": "Unable to request nominate"
          },
          "name": {
            "type": "string",
            "default": "NominateException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NominateTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action."
          },
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "targets": {
            "description": "Selected validators in the targets.",
            "example": [
              "5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY",
              "5HpG9w8EBLe5XCrbczpwq5TSXvedjrBGCwqxK1iQ7qUsSWFc"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:26.593Z"
          }
        },
        "required": [
          "unsignedTransaction",
          "stashAccountAddress",
          "targets",
          "createdAt"
        ]
      },
      "NominateRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          }
        },
        "required": [
          "stashAccountAddress"
        ]
      },
      "NotEnoughBonedAmountException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107110
          },
          "message": {
            "type": "string",
            "default": "Not enough bonded amount"
          },
          "name": {
            "type": "string",
            "default": "NotEnoughBonedAmountException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "UnbondException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107129
          },
          "message": {
            "type": "string",
            "default": "Unable to request unbond"
          },
          "name": {
            "type": "string",
            "default": "UnbondException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "UnbondRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to unbond (in usual DOTs/KSMs/WNDs).",
            "example": 3
          }
        },
        "required": [
          "stashAccountAddress",
          "amount"
        ]
      },
      "BondNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107103
          },
          "message": {
            "type": "string",
            "default": "Bond not found"
          },
          "name": {
            "type": "string",
            "default": "BondNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "WithdrawUnbondedException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107130
          },
          "message": {
            "type": "string",
            "default": "Unable to withdraw unbonded"
          },
          "name": {
            "type": "string",
            "default": "WithdrawUnbondedException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "WithdrawalTransactionResponse": {
        "type": "object",
        "properties": {
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action."
          },
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding."
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format."
          }
        },
        "required": [
          "unsignedTransaction",
          "stashAccountAddress",
          "createdAt"
        ]
      },
      "WithdrawUnbondedRequest": {
        "type": "object",
        "properties": {
          "stashAccountAddress": {
            "type": "string",
            "description": "Main stash account address which keeps tokens for bonding.",
            "example": "5H6ryBWChC5w7eaQ4GZjo329sEnhvjetSr6MBEt42mZ5tPw5"
          }
        },
        "required": [
          "stashAccountAddress"
        ]
      },
      "SendResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "Block hash in which the transaction was included.",
            "example": "0x0628743b05ffb4c9d5ea2144b359af38910f0ae439a685f57d85b50b9481ba3f"
          },
          "slot": {
            "type": "number",
            "description": "Period of time during which each leader collects transactions and creates a block in the Solana network.",
            "example": "17168395"
          },
          "signerAccounts": {
            "type": "string",
            "description": "Account addresses that signed the transaction.",
            "example": [
              "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
            ]
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "transactionId",
          "slot",
          "signerAccounts",
          "createdAt"
        ]
      },
      "GetStakingResponse": {
        "type": "object",
        "properties": {
          "stakeAccount": {
            "type": "string",
            "description": "Account address that stores tokens for staking.",
            "example": "Fw82VhehY4yazX6tcZfNQWTsqHDSXaGmwVkbJYegDMbG"
          },
          "stakeAuthority": {
            "type": "string",
            "description": "Account address that can perform staking operations with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "withdrawAuthority": {
            "type": "string",
            "description": "Account address that can perform withdrawal operation with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "voteAccount": {
            "type": "string",
            "description": "Vote account address.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "activating",
              "deactivating"
            ],
            "description": "Stake account status: `active`, `inactive`, `activating`, `deactivating`.",
            "example": "active"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to stake in lamports (1 SOl = 10^9 lamports).",
            "minimum": 1,
            "example": 1
          }
        },
        "required": [
          "stakeAccount",
          "stakeAuthority",
          "withdrawAuthority",
          "voteAccount",
          "status",
          "amount"
        ]
      },
      "StakingResponse": {
        "type": "object",
        "properties": {
          "accounts": {
            "description": "List of stake accounts.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetStakingResponse"
            }
          }
        },
        "required": [
          "accounts"
        ]
      },
      "StakeResult": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "fromPublicKey": {
            "type": "string",
            "description": "Account address from which the staking account will be created.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAccount": {
            "type": "string",
            "description": "Account address that stores tokens for staking.",
            "example": "6ZuLUCwVTvuQJrN1HrpoHJheQUw9Zk8CtiD3CEpHiA9E"
          },
          "stakeAuthority": {
            "type": "string",
            "description": "Account address that can perform staking operations with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "withdrawAuthority": {
            "type": "string",
            "description": "Account address that can perform withdrawal operation with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to stake in lamports (1 SOl = 10^9 lamports). Min amount is `1002282880`.",
            "minimum": 1,
            "example": 1
          },
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in Base64 encrypted format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAcJjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+jagnMHpK8BDHt0PpssHwXGD2fBxS6MWBoxptD2u9TvrgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1NjSeWM5+GSJdoQd43Al9SVVXC9FfWGwbe7icpomwAUGodgXkTdUKpg0N73+KnqyVX9TXIp4citopJ3AAAAAAAah2BelAgULaAeR5s5tuI4eW3FQ9h/GeQpOtNEAAAAABqfVFxjHdMkoVmOYaR1etoteuKObS21cc1VbIQAAAAAGp9UXGSxcUSGMyUw9SvF/WNruCJuh/UTj29mKAAAAAAan1RcZNYTQ/u2bs0MdEyBr5UQoG1e4VmzFN1/0AAAAijW940iwWddz25ZC37fI0ue5fa+eTbC2ynBM3b0t4pcDAgMAAQBgAwAAAI5ELeF3F+N1ZPBWe0G1FV0heaKPY7e8dg5tBPbrf8voBAAAAAAAAABzZWVkgJaYAAAAAADIAAAAAAAAAAah2BeRN1QqmDQ3vf4qerJVf1NcinhyK2ikncAAAAAABAIBB3QAAAAAjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+iORC3hdxfjdWTwVntBtRVdIXmij2O3vHYObQT263/L6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQGAQMGCAUABAIAAAA="
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "feePayer",
          "fromPublicKey",
          "stakeAccount",
          "stakeAuthority",
          "withdrawAuthority",
          "amount",
          "unsignedTransaction",
          "createdAt"
        ]
      },
      "StakeRequest": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "fromPublicKey": {
            "type": "string",
            "description": "Account address from which the staking account will be created.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAuthority": {
            "type": "string",
            "description": "Account address that can perform staking operations with staking account. If not specified, rights will be taken from the `fromPublicKey` parameter.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "withdrawAuthority": {
            "type": "string",
            "description": "Account address that can perform withdrawal operation with staking account. If not specified, rights will be taken from the `fromPublicKey` parameter.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to stake in lamports (1 SOl = 10^9 lamports). Min amount is `1002282880`.",
            "minimum": 1,
            "example": 1
          }
        },
        "required": [
          "feePayer",
          "fromPublicKey",
          "amount"
        ]
      },
      "DeactivateResult": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAccount": {
            "type": "string",
            "description": "Account address that stores tokens for staking.",
            "example": "Fw82VhehY4yazX6tcZfNQWTsqHDSXaGmwVkbJYegDMbG"
          },
          "stakeAuthority": {
            "type": "string",
            "description": "Account address that can perform staking operations with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in Base64 encrypted format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAcJjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+jagnMHpK8BDHt0PpssHwXGD2fBxS6MWBoxptD2u9TvrgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1NjSeWM5+GSJdoQd43Al9SVVXC9FfWGwbe7icpomwAUGodgXkTdUKpg0N73+KnqyVX9TXIp4citopJ3AAAAAAAah2BelAgULaAeR5s5tuI4eW3FQ9h/GeQpOtNEAAAAABqfVFxjHdMkoVmOYaR1etoteuKObS21cc1VbIQAAAAAGp9UXGSxcUSGMyUw9SvF/WNruCJuh/UTj29mKAAAAAAan1RcZNYTQ/u2bs0MdEyBr5UQoG1e4VmzFN1/0AAAAijW940iwWddz25ZC37fI0ue5fa+eTbC2ynBM3b0t4pcDAgMAAQBgAwAAAI5ELeF3F+N1ZPBWe0G1FV0heaKPY7e8dg5tBPbrf8voBAAAAAAAAABzZWVkgJaYAAAAAADIAAAAAAAAAAah2BeRN1QqmDQ3vf4qerJVf1NcinhyK2ikncAAAAAABAIBB3QAAAAAjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+iORC3hdxfjdWTwVntBtRVdIXmij2O3vHYObQT263/L6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQGAQMGCAUABAIAAAA="
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "feePayer",
          "unsignedTransaction",
          "createdAt"
        ]
      },
      "DeactivateRequest": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAccount": {
            "type": "string",
            "description": "Account address that stores tokens for staking.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAuthority": {
            "type": "string",
            "description": "Account address that can perform staking operations with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          }
        },
        "required": [
          "feePayer",
          "stakeAccount",
          "stakeAuthority"
        ]
      },
      "WithdrawResult": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAccount": {
            "type": "string",
            "description": "Account address that stores tokens for staking.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "withdrawAuthority": {
            "type": "string",
            "description": "Account address that can perform withdrawal operation with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "recipient": {
            "type": "string",
            "description": "Account address to which tokens will be sent.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to withdraw in lamports (1 SOl = 10^9 lamports).",
            "minimum": 1,
            "example": 1
          },
          "unsignedTransaction": {
            "type": "string",
            "description": "Unsigned transaction in hex format. Sign the transaction and submit it to the blockchain to perform the called action.",
            "example": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAcJjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+jagnMHpK8BDHt0PpssHwXGD2fBxS6MWBoxptD2u9TvrgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1NjSeWM5+GSJdoQd43Al9SVVXC9FfWGwbe7icpomwAUGodgXkTdUKpg0N73+KnqyVX9TXIp4citopJ3AAAAAAAah2BelAgULaAeR5s5tuI4eW3FQ9h/GeQpOtNEAAAAABqfVFxjHdMkoVmOYaR1etoteuKObS21cc1VbIQAAAAAGp9UXGSxcUSGMyUw9SvF/WNruCJuh/UTj29mKAAAAAAan1RcZNYTQ/u2bs0MdEyBr5UQoG1e4VmzFN1/0AAAAijW940iwWddz25ZC37fI0ue5fa+eTbC2ynBM3b0t4pcDAgMAAQBgAwAAAI5ELeF3F+N1ZPBWe0G1FV0heaKPY7e8dg5tBPbrf8voBAAAAAAAAABzZWVkgJaYAAAAAADIAAAAAAAAAAah2BeRN1QqmDQ3vf4qerJVf1NcinhyK2ikncAAAAAABAIBB3QAAAAAjkQt4XcX43Vk8FZ7QbUVXSF5oo9jt7x2Dm0E9ut/y+iORC3hdxfjdWTwVntBtRVdIXmij2O3vHYObQT263/L6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQGAQMGCAUABAIAAAA="
          },
          "createdAt": {
            "format": "datetime",
            "type": "string",
            "description": "Timestamp of the transaction in the ISO 8601 format.",
            "example": "2023-08-24T08:14:50.455Z"
          }
        },
        "required": [
          "feePayer",
          "amount",
          "unsignedTransaction",
          "createdAt"
        ]
      },
      "WithdrawRequest": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAccount": {
            "type": "string",
            "description": "Account address that stores tokens for staking.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "withdrawAuthority": {
            "type": "string",
            "description": "Account address that can perform withdrawal operations with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "recipient": {
            "type": "string",
            "description": "Account address to which tokens will be sent.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to withdraw in lamports (1 SOl = 10^9 lamports).",
            "minimum": 1,
            "example": 1
          }
        },
        "required": [
          "feePayer",
          "amount"
        ]
      },
      "SplitRequestDto": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "baseAccount": {
            "type": "string",
            "description": "Account address to split tokens from.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAccount": {
            "type": "string",
            "description": "Account address that will receive split tokens for staking.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "authority": {
            "type": "string",
            "description": "Account address that can perform withdrawal operations with `stakeAccount` and `baseAccount`.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to move in lamports (1 SOl = 10^9 lamports).",
            "minimum": 1,
            "example": 1
          }
        },
        "required": [
          "feePayer",
          "baseAccount",
          "stakeAccount",
          "amount"
        ]
      },
      "MergeRequest": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAccount": {
            "type": "string",
            "description": "Account address that will merge split tokens for staking.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "sourceStakeAccount": {
            "type": "string",
            "description": "Account address to merge tokens from.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "authority": {
            "type": "string",
            "description": "Account address that can perform withdrawal operations with `stakeAccount` and `sourseStakeAccount`.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          }
        },
        "required": [
          "feePayer",
          "stakeAccount",
          "sourceStakeAccount",
          "authority"
        ]
      },
      "DelegateRequest": {
        "type": "object",
        "properties": {
          "feePayer": {
            "type": "string",
            "description": "Account address that will pay the fee for the transaction.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAccount": {
            "type": "string",
            "description": "Account address that will be delegated.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          },
          "stakeAuthority": {
            "type": "string",
            "description": "Account address that can perform staking operations with staking account.",
            "example": "C83GxcNFTC2tK22rLCCrLKYRkckbNVGsjethN5iswgfC"
          }
        },
        "required": [
          "feePayer",
          "stakeAccount",
          "stakeAuthority"
        ]
      },
      "ApproveRequestDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Amount of tokens in MATIC to approve for staking.",
            "example": "100000000000000000"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Staker account address.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "amount",
          "stakerAddress"
        ]
      },
      "DelegateRequestDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Amount of tokens in MATIC to delegate.",
            "example": "100000000000000000"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Staker account address.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "amount",
          "stakerAddress"
        ]
      },
      "UndelegateRequestDto": {
        "type": "object",
        "properties": {
          "claimAmount": {
            "type": "string",
            "description": "Amount of tokens in MATIC to undelegate.",
            "example": "100000000000000000"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Staker account address.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "claimAmount",
          "stakerAddress"
        ]
      },
      "UnstakeRequestDto": {
        "type": "object",
        "properties": {
          "unbondNonce": {
            "type": "string",
            "description": "Unique identifier of the undelegate request.",
            "example": "100"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Staker account address.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "unbondNonce",
          "stakerAddress"
        ]
      },
      "WithdrawRequestDto": {
        "type": "object",
        "properties": {
          "stakerAddress": {
            "type": "string",
            "description": "Staker account address.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "stakerAddress"
        ]
      },
      "RestakeRequestDto": {
        "type": "object",
        "properties": {
          "stakerAddress": {
            "type": "string",
            "description": "Staker account address.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "stakerAddress"
        ]
      },
      "RedelegateRequestDto": {
        "type": "object",
        "properties": {
          "formValidatorId": {
            "type": "string",
            "description": "From validator ID.",
            "example": "12"
          },
          "toValidatorId": {
            "type": "string",
            "description": "To validator ID.",
            "example": "18"
          },
          "amount": {
            "type": "string",
            "description": "Amount of tokens in MATIC to delegate.",
            "example": "100000000000000000"
          },
          "stakerAddress": {
            "type": "string",
            "description": "Staker account address.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "formValidatorId",
          "toValidatorId",
          "amount",
          "stakerAddress"
        ]
      },
      "SendTransactionDtoRequest": {
        "type": "object",
        "properties": {
          "signedTransaction": {
            "type": "string",
            "description": "Serialized signed transaction.",
            "example": "0x02f902d705808301674e8508530af16e830186a094681a1b3441c6bfb12f91651efd9f02c83c0702938901bc16d674ec800000b902a44f498c730000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030aa5f27070a21d79455c4a9b73c0aa4a8b1a65a1fb530d7fd8e6cd23aa16660679ac43ee4861098f6d9166aed3a4d8abb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002001000000000000000000000028c84612d37de9209018ad96167f12169b653e9a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060978c565cd915f4e885b4201093d1501697610eb9ee99b9b60b70434dc330e98d5b42927725304ded48483a8b8f39506d09bcb22ee18d4f6b50257946ac5ee360385308d95c0e2bc963902d42e985c29ee489aa3c989ac1561c952a6424f107a800000000000000000000000000000000000000000000000000000000000000014cb452f6e3f10ba2175c86a0284f53fcb61404b458393391abc3d5622e3e55cdc0",
            "pattern": "^0x([A-Fa-f0-9])+$",
            "nullable": false
          },
          "stackerAddress": {
            "type": "string",
            "description": "Stacker account address.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "signedTransaction",
          "stackerAddress"
        ]
      },
      "SsvRequestIdAlreadyExistException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111103
          },
          "message": {
            "type": "string",
            "default": "The SSV request id already exists"
          },
          "name": {
            "type": "string",
            "default": "SsvRequestIdAlreadyExistException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "SsvRequestCreateException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111100
          },
          "message": {
            "type": "string",
            "default": "Error creating a SSV request"
          },
          "name": {
            "type": "string",
            "default": "SsvRequestCreateException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "CreateSsvRequestRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "Arbitrary UUID. You can later use that UUID to check the status of the set-up operation."
          },
          "validatorsCount": {
            "type": "number",
            "description": "Number of validators. One validator is equal to 32 ETH.",
            "default": 1,
            "minimum": 1,
            "example": 1
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "The client’s withdrawal address.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "feeRecipientAddress": {
            "type": "string",
            "description": "An ETH1 address that receives fee recipient rewards.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "type": {
            "type": "string",
            "enum": [
              "with-encrypt-key",
              "without-encrypt-key"
            ],
            "example": "with-encrypt-key",
            "default": "with-encrypt-key",
            "description": "Request type: with a encryptKey, without a encryptKey."
          },
          "operationPeriodInDays": {
            "type": "number",
            "example": 365,
            "description": "Operation period in days.",
            "minimum": 1,
            "default": 365
          },
          "ecdhPublicKey": {
            "type": "string",
            "example": null,
            "description": "The public key for getting the encrypted validator private key."
          }
        },
        "required": [
          "id",
          "validatorsCount",
          "withdrawalAddress",
          "feeRecipientAddress",
          "type",
          "operationPeriodInDays"
        ]
      },
      "SsvRequestNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111104
          },
          "message": {
            "type": "string",
            "default": "The SSV request not found"
          },
          "name": {
            "type": "string",
            "default": "SsvRequestNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "EncryptedShareResponse": {
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string",
            "description": "Validator public key"
          },
          "nonce": {
            "type": "string",
            "description": "Nonce for signature in sharesData in registerValidator"
          },
          "sharesData": {
            "type": "string",
            "description": "SharesData for registerValidator"
          },
          "ecdhEncryptedPrivateKey": {
            "type": "string",
            "description": "Encoded private keys"
          }
        },
        "required": [
          "publicKey",
          "nonce",
          "sharesData"
        ]
      },
      "SsvRequestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "UUID that was specified in the ssv set-up request."
          },
          "status": {
            "type": "string",
            "enum": [
              "init",
              "processing",
              "ready",
              "cancel"
            ],
            "description": "Current status of the request",
            "example": "processing"
          },
          "validatorsCount": {
            "type": "number",
            "description": "The number of validators",
            "default": 1,
            "minimum": 1,
            "maximum": 1,
            "example": 1
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "The wallet address of the cluster owner.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "feeRecipientAddress": {
            "type": "string",
            "description": "An ETH1 address that receives fee recipient rewards.",
            "example": "0x39D02C253dA1d9F85ddbEB3B6Dc30bc1EcBbFA17",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "type": {
            "type": "string",
            "enum": [
              "with-encrypt-key",
              "without-encrypt-key"
            ],
            "example": "without-encrypt-key",
            "default": "without-encrypt-key",
            "description": "Request type: with a encryptKey, without a encryptKey."
          },
          "operationPeriodInDays": {
            "type": "number",
            "example": 31556952,
            "description": "Operation period in days."
          },
          "liquidationPeriodInDays": {
            "type": "number",
            "example": 2629746,
            "description": "Liquidation threshold period in days."
          },
          "ecdhPublicKey": {
            "type": "string",
            "example": null,
            "description": "The public key for getting the encrypted validator private key."
          },
          "validatorRegistrationTxs": {
            "example": null,
            "description": "Array tx about validator registration.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ssvFeeTxs": {
            "example": null,
            "description": "Array tx about deposit ssv fees in the cluster balance.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "feeRecipientTx": {
            "example": null,
            "description": "Tx about set fee recipient address.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "approveTx": {
            "example": null,
            "description": "Tx for approve SSV transfer.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "depositData": {
            "minItems": 1,
            "maxItems": 400,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepositDataResponse"
            }
          },
          "encryptedShares": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EncryptedShareResponse"
            }
          }
        },
        "required": [
          "id",
          "status",
          "validatorsCount",
          "withdrawalAddress",
          "feeRecipientAddress",
          "type",
          "operationPeriodInDays",
          "liquidationPeriodInDays",
          "depositData",
          "encryptedShares"
        ]
      },
      "SsvRequestGetListException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111101
          },
          "message": {
            "type": "string",
            "default": "Error getting SSV requests list"
          },
          "name": {
            "type": "string",
            "default": "SsvRequestGetListException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetListSsvRequestResponse": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "minimum": 1,
            "default": 50,
            "description": "The number of resources that a single response page contains."
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "The number of resources to exclude from a response."
          },
          "totalCount": {
            "type": "number",
            "minimum": 1,
            "description": "Total count of resources in the response."
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SsvRequestResponse"
            }
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount",
          "list"
        ]
      },
      "SetFeeRecipientAddressException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111108
          },
          "message": {
            "type": "string",
            "default": "Failed to create set feeRecipientAddress transaction"
          },
          "name": {
            "type": "string",
            "default": "SetFeeRecipientAddressException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "DepositException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111120
          },
          "message": {
            "type": "string",
            "default": "Error creating deposit tx"
          },
          "name": {
            "type": "string",
            "default": "DepositException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "EthereumUnsignedTransactionListResponse": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EthereumUnsignedTransactionResponse"
            }
          }
        },
        "required": [
          "list"
        ]
      },
      "GetOperatorFeeException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111109
          },
          "message": {
            "type": "string",
            "default": "Failed to get operator fee"
          },
          "name": {
            "type": "string",
            "default": "GetOperatorFeeException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetOperatorFeeResponse": {
        "type": "object",
        "properties": {
          "fee": {
            "type": "string",
            "example": "1000",
            "description": "The fee charged by the operator"
          },
          "balance": {
            "type": "string",
            "example": "1000",
            "description": "Operators outstanding earnings in $SSV tokens"
          }
        },
        "required": [
          "fee",
          "balance"
        ]
      },
      "GetBalanceException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 111110
          },
          "message": {
            "type": "string",
            "default": "Failed to get operator balance"
          },
          "name": {
            "type": "string",
            "default": "GetBalanceException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "GetBalanceResponse": {
        "type": "object",
        "properties": {
          "balances": {
            "example": "1000",
            "description": "Clusters outstanding balance denominated in $SSV tokens",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "balances"
        ]
      }
    }
  }
}